components:
  parameters:
    activity:
      description: This is a specific activity uuid.
      in: path
      name: activity
      required: true
      schema:
        type: string
    activity_filter_enum:
      description: This is an ActivityFilterEnum as a optional filter. Ensure you
        update ActivityFilterEnum if this is updated.
      in: query
      name: activity_filter_enum
      required: false
      schema:
        enum:
        - CREATED
        - UPDATED
        - DELETED
        - REFERENCED
        type: string
    anchor:
      description: This is the specific uuid of an anchor.
      in: path
      name: anchor
      required: true
      schema:
        type: string
    anchor_point:
      description: This is the specific uuid of an anchor_point.
      in: path
      name: anchor_point
      required: true
      schema:
        type: string
    annotation:
      description: This is a specific annotation uuid.
      in: path
      name: annotation
      required: true
      schema:
        type: string
    annotation_type_filter:
      description: This is an AnnotationTypeEnum as a optional filter.
      in: query
      name: annotation_type_filter
      required: false
      schema:
        enum:
        - DESCRIPTION
        - COMMENT
        - COMMENTATION
        - DOCUMENTATION
        - SUMMARIZATION
        - SUMMARY
        - EXPLANATION
        - GIT_COMMIT
        type: string
    application:
      description: This is a uuid that represents an application
      in: path
      name: application
      required: true
      schema:
        type: string
    asset:
      description: The id (uuid) of the asset that you are trying to access.
      in: path
      name: asset
      required: true
      schema:
        example: 2254f2c8-5797-40e8-ac56-41166dc0e159
        format: uuid
        type: string
    automatic:
      description: For most cases set to true. If this is set to true we will handle
        the behavior automically or else we will not proactively handle specific behavior
        but we will let the developer decide the behavior.
      in: query
      name: automatic
      schema:
        default: true
        type: boolean
    backup:
      description: This is a identifier that is used to identify a specific backup.(version_timestamp)
      in: path
      name: backup
      required: true
      schema:
        type: string
    classify:
      description: This will let us know if you want us to classifiy your code, this
        is default to false.
      in: query
      name: classify
      required: false
      schema:
        type: boolean
    conversation:
      description: This is the uuid of a conversation.
      in: path
      name: conversation
      required: true
      schema:
        type: string
    distribution:
      description: This is the uuid of a specific distribution.
      in: path
      name: distribution
      required: true
      schema:
        type: string
    export_type:
      description: This specifies the type of export the user wants.
      in: query
      name: export_type
      required: true
      schema:
        enum:
        - HTML
        - MD
        type: string
    format:
      description: The id (uuid) for a specific format.
      in: path
      name: format
      required: true
      schema:
        example: 102ff265-fdfb-4142-8d94-4932d400199c
        format: uuid
        type: string
    hint:
      description: This is a specific hint uuid
      in: path
      name: hint
      required: true
      schema:
        type: string
    message:
      description: This is the uuid of a message.
      in: path
      name: message
      required: true
      schema:
        type: string
    model:
      description: model id
      in: path
      name: model
      required: true
      schema:
        type: string
    person:
      description: This is a uuid that represents a person.
      in: path
      name: person
      required: true
      schema:
        type: string
    pseudo:
      description: This is helper boolean that will give you the ability to also include
        your pseudo assets, we will always default to false.
      in: query
      name: pseudo
      required: false
      schema:
        type: boolean
    query:
      description: This is a string that you can use to search your assets.
      in: query
      name: query
      schema:
        type: string
      style: form
    range:
      description: This is a identifier that is used to identify a specific range.
      in: path
      name: range
      required: true
      schema:
        type: string
    relationship:
      description: this is a specific relationship uuid.
      in: path
      name: relationship
      required: true
      schema:
        type: string
    searchable_tags:
      description: This is a comma separated value of tags used for search.
      in: query
      name: searchable_tags
      required: false
      schema:
        type: string
    sensitive:
      description: This is a uuid that represents a sensitive.
      in: path
      name: sensitive
      required: true
      schema:
        type: string
    share:
      description: Share id
      in: path
      name: share
      required: true
      schema:
        type: string
    suggested:
      description: This will let us know if a developer, wants a snapshot related
        to suggested content or normal content
      in: query
      name: suggested
      required: false
      schema:
        type: boolean
    tag:
      description: tag id
      in: path
      name: tag
      required: true
      schema:
        type: string
    transferable:
      description: This is a boolean that will decided if we are want to return the
        transferable data (default) or not(performance enhancement)
      in: query
      name: transferable
      schema:
        type: boolean
    transferables:
      description: This is a boolean that will decided if we are want to return the
        transferable data (default) or not(performance enhancement)
      in: query
      name: transferables
      required: false
      schema:
        type: boolean
    user:
      description: The id (uuid) for a specific user.
      in: path
      name: user
      required: true
      schema:
        example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        format: uuid
        type: string
    vision_event:
      description: This is a identifier that is used to identify a specific WPE_vision
        event.
      in: path
      name: vision_event
      required: true
      schema:
        type: string
    website:
      description: website id
      in: path
      name: website
      required: true
      schema:
        type: string
    workstream_event:
      description: This is a identifier that is used to identify a specific workstream_event.
      in: path
      name: workstream_event
      required: true
      schema:
        type: string
    workstream_summary:
      description: This is a identifier that is used to identify a specific workstream_summary.
      in: path
      name: workstream_summary
      required: true
      schema:
        type: string
  schemas:
    AccessEnum:
      enum:
      - PUBLIC
      - PRIVATE
      title: AccessEnum
      type: string
    Accessor:
      description: 'This is used to determine who has accessed a share. and how many
        times.


        The user here is the user that accessed this Piece.(optional) if undefined
        then this user was not logged in yet.'
      properties:
        count:
          description: how many times this user accessed this piece.
          type: integer
        id:
          type: string
        os:
          description: this is an os id.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        share:
          type: string
        user:
          $ref: '#/components/schemas/FlattenedUserProfile'
      required:
      - id
      - os
      - share
      - count
      title: Accessor
      type: object
    Accessors:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Accessor'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Accessors
      type: object
    ActiveOSServerApplet:
      description: TODO
      properties:
        port:
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/OSAppletEnum'
      required:
      - port
      - type
      title: ActiveOSServerApplet
      type: object
    Activities:
      description: This is the plural of activity
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Activities
      type: object
      x-stoplight:
        id: eekinsh4u4p4o
    Activity:
      description: 'consider a rename to Event? That being said if we go with event
        we need to think about a word to pre/post fix event because it is likely to
        be a reserved word.


        additional documentation: https://www.notion.so/getpieces/Activity-4da8de193733441f85f87b510235fb74



        Notes:

        - user/asset/format are all optional, NOT required that one of these are present.

        - if mechanism == internal we will not display to the user.


        Thoughts around additional properties.

        - hmm dismissed array here, that is an array of strings, where the string
        is the userId that dismissed this notification? or we could potentially do
        it based on the os_ID.

        -

        '
      properties:
        application:
          $ref: '#/components/schemas/Application'
        asset:
          $ref: '#/components/schemas/FlattenedAsset'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        event:
          $ref: '#/components/schemas/SeededConnectorTracking'
        format:
          $ref: '#/components/schemas/FlattenedFormat'
        id:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        rank:
          description: This is the numeric value assigned for this activity event.
            This number is based off the the type of activity event calcaulated on
            the server side.DO NOT MODIFY. To see what the value qualilates to, please
            refer to the function within the common sdk. The number here is based
            on the fib series. from 0 -> infinity but rn there arnt any value over
            8.
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        user:
          $ref: '#/components/schemas/FlattenedUserProfile'
      required:
      - id
      - created
      - updated
      - event
      - application
      - mechanism
      title: Activity
      type: object
      x-stoplight:
        id: q4bbj6s5siojj
    ActivityFilterEnum:
      description: NOTE**** if you modify this please also update the "activity_type_filter"
        in the query paramters.
      enum:
      - CREATED
      - UPDATED
      - DELETED
      - REFERENCED
      title: ActivityFilterEnum
      type: string
      x-stoplight:
        id: te99ogro3b23e
    Aesthetics:
      description: These are aesthetics properties that will ensure the darkmode +
        font size and other aesthetics properties persist:)
      properties:
        font:
          $ref: '#/components/schemas/Font'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        theme:
          $ref: '#/components/schemas/Theme'
      required:
      - theme
      - font
      title: Aesthetics
      type: object
    AllocationCloud:
      description: 'update && version: will be present only if your cloud was successfully
        spun up && running.


        updated: is the last time this was updated.'
      properties:
        id:
          description: This is a uuid that represents this cloud.(this is the same
            as the userid)
          type: string
        project:
          description: This is the project that this is attached to.
          type: string
        region:
          description: this is the region where the project is defined.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/AllocationCloudStatus'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        urls:
          $ref: '#/components/schemas/AllocationCloudUrls'
        user:
          description: this is your useruuid.
          type: string
        version:
          description: this is the current version of the server.
          type: string
      required:
      - id
      - user
      - urls
      - status
      - project
      title: AllocationCloud
      type: object
    AllocationCloudStatus:
      properties:
        cloud:
          $ref: '#/components/schemas/AllocationStatusEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - cloud
      title: AllocationCloudStatus
      type: object
    AllocationCloudUpdate:
      description: 'version: "latest" or a specific version like "1.6.0".'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        version:
          description: this is the version that you want to update.
          type: string
      required:
      - version
      title: AllocationCloudUpdate
      type: object
    AllocationCloudUrl:
      description: This is one of the 3 possible urls that will route to your cloud
        :).
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/AllocationStatusEnum'
        url:
          description: this is the base url that is used to communicat with your vpc.
          type: string
      required:
      - status
      - url
      title: AllocationCloudUrl
      type: object
    AllocationCloudUrls:
      description: 'you will have at minimum 2 urls,


        base: is the default url of your cloud.


        id: is the branded url, uuid.pieces.cloud.


        (optional) vanity: is the custom branded url, mark.pieces.cloud'
      properties:
        base:
          $ref: '#/components/schemas/AllocationCloudUrl'
        id:
          $ref: '#/components/schemas/AllocationCloudUrl'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vanity:
          $ref: '#/components/schemas/AllocationCloudUrl'
      required:
      - base
      - id
      title: AllocationCloudUrls
      type: object
    AllocationRegister:
      description: Model for allocation register endpoint.
      properties:
        project:
          description: optionally pass through a project(only used a hint)
          type: string
        region:
          description: optionally pass through a region.(only used a hint)
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          description: global id for the user.
          type: string
      required:
      - user
      title: AllocationRegister
      type: object
    AllocationReturnable:
      description: This will describe the returnable of all of the endpoints on allocation
        server.
      properties:
        address:
          description: if our dns status is pending or failed this will be an empty
            string.
          type: string
        ip:
          description: if our dns status is pending or failed this will be an empty
            string.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/AllocationStatus'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        version:
          description: this is the current version of the pod.
          type: string
      required:
      - ip
      - address
      - status
      - updated
      - version
      title: AllocationReturnable
      type: object
    AllocationStatus:
      properties:
        dns:
          $ref: '#/components/schemas/AllocationStatusEnum'
        pod:
          $ref: '#/components/schemas/AllocationStatusEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - pod
      - dns
      title: AllocationStatus
      type: object
    AllocationStatusEnum:
      description: This is a Generic status enumeration that will be used for the
        status of dns and pod or cloud.
      enum:
      - PENDING
      - RUNNING
      - FAILED
      - SUCCEEDED
      - UNKNOWN
      title: AllocationStatusEnum
      type: string
    AllocationUpdate:
      description: 'Model for allocation update endpoint.


        cloud and urls are both optional, however you can pass either, both or neither.

        '
      properties:
        cloud:
          $ref: '#/components/schemas/AllocationCloudUpdate'
        project:
          description: This is the project that this is attached to.(this will be
            on the allocation Cloud.)
          type: string
        region:
          description: This is the region where this cloud is positioned.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        urls:
          $ref: '#/components/schemas/AllocationUrlsUpdate'
      required:
      - project
      title: AllocationUpdate
      type: object
    AllocationUrlUpdate:
      description: ''
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        url:
          description: this is the url we are updating to! this will be the entire
            baseURL ie "mark.pieces.cloud"
          type: string
      required:
      - url
      title: AllocationUrlUpdate
      type: object
    AllocationUrlsUpdate:
      description: This will encapsulate any url updates, currently old supporting
        updating your vanity domain.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vanity:
          $ref: '#/components/schemas/AllocationUrlUpdate'
      title: AllocationUrlsUpdate
      type: object
    AllocationVanityname:
      description: This is a Model for the incoming parameters on /dns/update/vanity.
      properties:
        id:
          description: This is the uuid that represents the user.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vanityname:
          description: This is the vanityname that the user is attempting to update
            their vanityname too. ie mark.pieces.cloud, where "mark" is the vanityname.
          type: string
      required:
      - id
      - vanityname
      title: AllocationVanityname
      type: object
    Allocations:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/AllocationCloud'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Allocations
      type: object
    Analyses:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Analysis'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Analyses
      type: object
    Analysis:
      description: 'This the the MlAnalysis Object, that will go on a format.


        this will hold all the different analysis models!


        ** keep format just a uuid for now **'
      properties:
        code:
          $ref: '#/components/schemas/CodeAnalysis'
        format:
          description: this is a reference to the format that it belongs too.
          type: string
        id:
          type: string
        image:
          $ref: '#/components/schemas/ImageAnalysis'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - format
      title: Analysis
      type: object
    Anchor:
      properties:
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        name:
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        points:
          $ref: '#/components/schemas/FlattenedAnchorPoints'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        type:
          $ref: '#/components/schemas/AnchorTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        watch:
          type: boolean
      required:
      - id
      - type
      - text
      - created
      - updated
      - points
      title: Anchor
      type: object
      x-stoplight:
        id: 7041aeacf0dbc
    AnchorPoint:
      properties:
        anchor:
          $ref: '#/components/schemas/ReferencedAnchor'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        fullpath:
          description: This is the text of the path.
          type: string
        id:
          type: string
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        verified:
          type: boolean
      required:
      - id
      - fullpath
      - created
      - updated
      - anchor
      title: AnchorPoint
      type: object
      x-stoplight:
        id: vimzic8ey5idb
    AnchorPoints:
      description: This is the plural of AnchorPoint.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an AnchorPoint
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/AnchorPoint'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: AnchorPoints
      type: object
      x-stoplight:
        id: jwtd6gizlkn4w
    AnchorTypeEnum:
      description: This is an enum used to differentiate the different between different
        anchors. Used in the Anchor data model.
      enum:
      - FILE
      - DIRECTORY
      title: AnchorTypeEnum
      type: string
      x-stoplight:
        id: 9b1a14e5046fe
    Anchors:
      description: This is the plural of Anchor.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an Anchor id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Anchor'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Anchors
      type: object
    Annotation:
      description: 'An Annotation is the replacement for descriptions, this will enable
        comments, description, summaries and many more.


        person on here is a reference to the description/comment/annotation about
        a person


        NOTE: person here is NOT the creator of the annotaion. but rather the descriptions
        of the person.

        NOTE****: if we want to add "who" wrote the annotation, we will want to add
        a new field on here called author && will need to also layer in behavior the
        enable an author(person) and an asset both being referenced(ensure you check
        the side effect in the AssetsFacade.delete)'
      properties:
        anchor:
          $ref: '#/components/schemas/ReferencedAnchor'
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        favorited:
          type: boolean
        id:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          $ref: '#/components/schemas/ReferencedModel'
        person:
          $ref: '#/components/schemas/ReferencedPerson'
        pseudo:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summary:
          $ref: '#/components/schemas/ReferencedWorkstreamSummary'
        text:
          description: This is the text of the annotation.
          type: string
        type:
          $ref: '#/components/schemas/AnnotationTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      - type
      - text
      title: Annotation
      type: object
      x-stoplight:
        id: 22bulerl8wanu
    AnnotationTypeEnum:
      description: This is used to describe a specific type of annotation. NOTE**
        This is linked to the annotation_type_filter in the parameters folder(if you
        change an enum here, please adjust the enum there.)
      enum:
      - DESCRIPTION
      - COMMENT
      - DOCUMENTATION
      - SUMMARY
      - EXPLANATION
      - GIT_COMMIT
      title: AnnotationTypeEnum
      type: string
      x-stoplight:
        id: nqbk5tmivuzju
    Annotations:
      description: This is the plural of Annotation
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an annotation
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Annotations
      type: object
      x-stoplight:
        id: rwmnz5n55qa6l
    AnonymousTemporalRange:
      description: 'if you want a range between you can use from && to.


        if you want anything before, use to and NO from.


        if you want anything after, use from and NO to.'
      properties:
        between:
          type: boolean
        continuous:
          type: boolean
        from:
          $ref: '#/components/schemas/GroupedTimestamp'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        to:
          $ref: '#/components/schemas/GroupedTimestamp'
      title: AnonymousTemporalRange
      type: object
    ApigeeAccess:
      properties:
        Get:
          $ref: '#/components/schemas/ApigeeAccessGet'
        Remove:
          $ref: '#/components/schemas/ApigeeAccessRemove'
        Set:
          $ref: '#/components/schemas/ApigeeAccessSet'
      title: ApigeeAccess
      type: object
    ApigeeAccessGet:
      description: 'Get action. For example, "Get" : { "name" : "target.name", "value"
        : "default" }'
      properties:
        name:
          type: string
        value:
          type: string
      title: ApigeeAccessGet
      type: object
    ApigeeAccessRemove:
      description: 'Remove action. For example, "Remove" : { "name" : "target.name",
        "success" : true }'
      properties:
        name:
          type: string
        success:
          type: boolean
      title: ApigeeAccessRemove
      type: object
    ApigeeAccessSet:
      description: 'Set action. For example, "Set" : { "name" : "target.name", "success"
        : true, "value" : "default" }'
      properties:
        name:
          type: string
        success:
          type: boolean
        value:
          type: string
      title: ApigeeAccessSet
      type: object
    ApigeeAllocationEngineClientData:
      description: This is all of the client data that the Apigee Allocation Server
        needs to reference.
      properties:
        applications:
          description: This will be an array of apps that the developer has registerd.
            The 0th index will always be the default app. You can get the credentials
            here if needed.
          items:
            $ref: '#/components/schemas/ApigeeDeveloperApp'
          type: array
        developer:
          $ref: '#/components/schemas/ApigeeDeveloper'
        products:
          description: The products that are available for this developer.
          items:
            $ref: '#/components/schemas/ApigeeProduct'
          type: array
      required:
      - applications
      - products
      title: ApigeeAllocationEngineClientData
      type: object
    ApigeeApp:
      properties:
        apiProducts:
          description: List of API products associated with the app.
          items:
            $ref: '#/components/schemas/ApigeeProductRef'
          type: array
        appId:
          description: ID of the app.
          type: string
        attributes:
          description: List of attributes.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        callbackUrl:
          description: Callback URL used by OAuth 2.0 authorization servers to communicate
            authorization codes back to apps.
          type: string
        companyName:
          description: Name of the company that owns the app.
          type: string
        createdAt:
          description: Output only. Unix time when the app was created.
          format: int64
          readOnly: true
          type: string
        credentials:
          description: Output only. Set of credentials for the app. Credentials are
            API key/secret pairs associated with API products.
          items:
            $ref: '#/components/schemas/ApigeeCredential'
          readOnly: true
          type: array
        developerId:
          description: ID of the developer.
          type: string
        keyExpiresIn:
          description: 'Duration, in milliseconds, of the consumer key that will be
            generated for the app. The default value, -1, indicates an infinite validity
            period. Once set, the expiration can''t be updated. json key: keyExpiresIn'
          format: int64
          type: string
        lastModifiedAt:
          description: Output only. Last modified time as milliseconds since epoch.
          format: int64
          readOnly: true
          type: string
        name:
          description: Name of the app.
          type: string
        scopes:
          description: Scopes to apply to the app. The specified scope names must
            already exist on the API product that you associate with the app.
          items:
            type: string
          type: array
        status:
          type: string
      title: ApigeeApp
      type: object
    ApigeeAttribute:
      description: Key-value pair to store extra metadata.
      properties:
        name:
          description: API key of the attribute.
          type: string
        value:
          description: Value of the attribute.
          type: string
      title: ApigeeAttribute
      type: object
    ApigeeAttributes:
      properties:
        attribute:
          description: List of attributes.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
      title: ApigeeAttributes
      type: object
    ApigeeCertInfo:
      description: X.509 certificate as defined in RFC 5280.
      properties:
        basicConstraints:
          description: X.509 basic constraints extension.
          type: string
        expiryDate:
          description: X.509 `notAfter` validity period in milliseconds since epoch.
          format: int64
          type: string
        isValid:
          description: Flag that specifies whether the certificate is valid. Flag
            is set to `Yes` if the certificate is valid, `No` if expired, or `Not
            yet` if not yet valid.
          type: string
        issuer:
          description: X.509 issuer.
          type: string
        publicKey:
          description: Public key component of the X.509 subject public key info.
          type: string
        serialNumber:
          description: X.509 serial number.
          type: string
        sigAlgName:
          description: X.509 signatureAlgorithm.
          type: string
        subject:
          description: X.509 subject.
          type: string
        subjectAlternativeNames:
          description: X.509 subject alternative names (SANs) extension.
          items:
            type: string
          type: array
        validFrom:
          description: X.509 `notBefore` validity period in milliseconds since epoch.
          format: int64
          type: string
        version:
          description: X.509 version.
          format: int32
          type: integer
      title: ApigeeCertInfo
      type: object
    ApigeeCertificate:
      properties:
        certInfo:
          description: Chain of certificates under this name.
          items:
            $ref: '#/components/schemas/ApigeeCertInfo'
          type: array
      title: ApigeeCertificate
      type: object
    ApigeeCredential:
      properties:
        apiProducts:
          description: List of API products this credential can be used for.
          items:
            $ref: '#/components/schemas/ApigeeProductRef'
          type: array
        attributes:
          description: List of attributes associated with this credential.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        consumerKey:
          description: Consumer key.
          type: string
        consumerSecret:
          description: Secret key.
          type: string
        expiresAt:
          description: Time the credential will expire in milliseconds since epoch.
          format: int64
          type: string
        issuedAt:
          description: Time the credential was issued in milliseconds since epoch.
          format: int64
          type: string
        scopes:
          description: List of scopes to apply to the app. Specified scopes must already
            exist on the API product that you associate with the app.
          items:
            type: string
          type: array
        status:
          description: Status of the credential. Valid values include `approved` or
            `revoked`.
          type: string
      title: ApigeeCredential
      type: object
    ApigeeDeveloper:
      description: ''
      properties:
        accessType:
          description: Access type.
          type: string
        appFamily:
          description: Developer app family.
          type: string
        apps:
          description: List of apps associated with the developer.
          items:
            type: string
          nullable: true
          type: array
        attributes:
          description: Optional. Developer attributes (name/value pairs). The custom
            attribute limit is 18.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          nullable: true
          type: array
        companies:
          description: List of companies associated with the developer.
          items:
            type: string
          nullable: true
          type: array
        createdAt:
          description: Output only. Time at which the developer was created in milliseconds
            since epoch.
          format: int64
          readOnly: true
          type: integer
        developerId:
          description: 'ID of the developer. **Note**: IDs are generated internally
            by Apigee and are not guaranteed to stay the same over time.'
          type: string
        email:
          description: Required. Email address of the developer. This value is used
            to uniquely identify the developer in Apigee hybrid. Note that the email
            address has to be in lowercase only.
          type: string
        firstName:
          description: Required. First name of the developer.
          type: string
        lastModifiedAt:
          description: Output only. Time at which the developer was last modified
            in milliseconds since epoch.
          format: int64
          readOnly: true
          type: integer
        lastName:
          description: Required. Last name of the developer.
          type: string
        organizationName:
          description: Output only. Name of the Apigee organization in which the developer
            resides.
          readOnly: true
          type: string
        status:
          description: Output only. Status of the developer. Valid values are `active`
            and `inactive`.
          readOnly: true
          type: string
        userName:
          description: Required. User name of the developer. Not used by Apigee hybrid.
          type: string
      required:
      - email
      - firstName
      - lastName
      - userName
      title: ApigeeDeveloper
      type: object
    ApigeeDeveloperApp:
      properties:
        apiProducts:
          description: List of API products associated with the developer app.
          items:
            type: string
          type: array
        appFamily:
          description: Developer app family.
          type: string
        appId:
          description: ID of the developer app.
          type: string
        attributes:
          description: List of attributes for the developer app.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        callbackUrl:
          description: Callback URL used by OAuth 2.0 authorization servers to communicate
            authorization codes back to developer apps.
          type: string
        createdAt:
          description: Output only. Time the developer app was created in milliseconds
            since epoch.
          format: int64
          readOnly: true
          type: string
        credentials:
          description: Output only. Set of credentials for the developer app consisting
            of the consumer key/secret pairs associated with the API products.
          items:
            $ref: '#/components/schemas/ApigeeCredential'
          readOnly: true
          type: array
        developerId:
          description: ID of the developer.
          type: string
        keyExpiresIn:
          description: Expiration time, in milliseconds, for the consumer key that
            is generated for the developer app. If not set or left to the default
            value of `-1`, the API key never expires. The expiration time can't be
            updated after it is set.
          format: int64
          type: string
        lastModifiedAt:
          description: Output only. Time the developer app was modified in milliseconds
            since epoch.
          format: int64
          readOnly: true
          type: string
        name:
          description: Name of the developer app.
          type: string
        scopes:
          description: Scopes to apply to the developer app. The specified scopes
            must already exist for the API product that you associate with the developer
            app.
          items:
            type: string
          type: array
        status:
          description: Status of the credential. Valid values include `approved` or
            `revoked`.
          type: string
      title: ApigeeDeveloperApp
      type: object
    ApigeeDeveloperAppKey:
      properties:
        apiProducts:
          description: 'List of API products for which the credential can be used.
            **Note**: Do not specify the list of API products when creating a consumer
            key and secret for a developer app. Instead, use the UpdateDeveloperAppKey
            API to make the association after the consumer key and secret are created.'
          items:
            type: string
          type: array
        attributes:
          description: List of attributes associated with the credential.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        consumerKey:
          description: Consumer key.
          type: string
        consumerSecret:
          description: Secret key.
          type: string
        expiresAt:
          description: Time the developer app expires in milliseconds since epoch.
          format: int64
          type: string
        expiresInSeconds:
          description: Input only. Expiration time, in seconds, for the consumer key.
            If not set or left to the default value of `-1`, the API key never expires.
            The expiration time can't be updated after it is set.
          format: int64
          type: string
        issuedAt:
          description: Time the developer app was created in milliseconds since epoch.
          format: int64
          type: string
        scopes:
          description: Scopes to apply to the app. The specified scope names must
            already be defined for the API product that you associate with the app.
          items:
            type: string
          type: array
        status:
          description: Status of the credential. Valid values include `approved` or
            `revoked`.
          type: string
      title: ApigeeDeveloperAppKey
      type: object
    ApigeeGraphQLOperation:
      description: Represents the pairing of GraphQL operation types and the GraphQL
        operation name.
      properties:
        operation:
          description: GraphQL operation name. The name and operation type will be
            used to apply quotas. If no name is specified, the quota will be applied
            to all GraphQL operations irrespective of their operation names in the
            payload.
          type: string
        operationTypes:
          description: 'Required. GraphQL operation types. Valid values include `query`
            or `mutation`. **Note**: Apigee does not currently support `subscription`
            types.'
          items:
            type: string
          type: array
      title: ApigeeGraphQLOperation
      type: object
    ApigeeGraphQLOperationConfig:
      description: Binds the resources in a proxy or remote service with the GraphQL
        operation and its associated quota enforcement.
      properties:
        apiSource:
          description: Required. Name of the API proxy endpoint or remote service
            with which the GraphQL operation and quota are associated.
          type: string
        attributes:
          description: Custom attributes associated with the operation.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        operations:
          description: 'Required. List of GraphQL name/operation type pairs for the
            proxy or remote service to which quota will be applied. If only operation
            types are specified, the quota will be applied to all GraphQL requests
            irrespective of the GraphQL name. **Note**: Currently, you can specify
            only a single GraphQLOperation. Specifying more than one will cause the
            operation to fail.'
          items:
            $ref: '#/components/schemas/ApigeeGraphQLOperation'
          type: array
        quota:
          $ref: '#/components/schemas/ApigeeQuota'
      title: ApigeeGraphQLOperationConfig
      type: object
    ApigeeGraphQLOperationGroup:
      description: List of graphQL operation configuration details associated with
        Apigee API proxies or remote services. Remote services are non-Apigee proxies,
        such as Istio-Envoy.
      properties:
        operationConfigType:
          description: Flag that specifies whether the configuration is for Apigee
            API proxy or a remote service. Valid values include `proxy` or `remoteservice`.
            Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated
            with the API product. Set to `remoteservice` when non-Apigee proxies like
            Istio-Envoy are associated with the API product.
          type: string
        operationConfigs:
          description: Required. List of operation configurations for either Apigee
            API proxies or other remote services that are associated with this API
            product.
          items:
            $ref: '#/components/schemas/ApigeeGraphQLOperationConfig'
          type: array
      title: ApigeeGraphQLOperationGroup
      type: object
    ApigeeKeyAliasReference:
      properties:
        aliasId:
          description: Alias ID. Must exist in the keystore referred to by the reference.
          type: string
        reference:
          description: 'Reference name in the following format: `organizations/{org}/environments/{env}/references/{reference}`'
          type: string
      title: ApigeeKeyAliasReference
      type: object
    ApigeeKeyValueMap:
      description: Collection of key/value string pairs.
      properties:
        encrypted:
          description: Optional. Flag that specifies whether entry values will be
            encrypted. Enable to encrypt entry values.
          type: boolean
        name:
          description: Required. ID of the key value map.
          type: string
      title: ApigeeKeyValueMap
      type: object
    ApigeeKeystore:
      description: Datastore for Certificates and Aliases.
      properties:
        aliases:
          description: Output only. Aliases in this keystore.
          items:
            type: string
          readOnly: true
          type: array
        name:
          description: Required. Resource ID for this keystore. Values must match
            the regular expression `[\w[:space:]-.]{1,255}`.
          type: string
      title: ApigeeKeystore
      type: object
    ApigeeListApiProductsResponse:
      properties:
        apiProduct:
          description: Lists all API product names defined for an organization.
          items:
            $ref: '#/components/schemas/ApigeeProduct'
          type: array
      title: ApigeeListApiProductsResponse
      type: object
    ApigeeListAppsResponse:
      properties:
        app:
          items:
            $ref: '#/components/schemas/ApigeeApp'
          type: array
      title: ApigeeListAppsResponse
      type: object
    ApigeeListDeveloperAppsResponse:
      properties:
        app:
          description: List of developer apps and their credentials.
          items:
            $ref: '#/components/schemas/ApigeeDeveloperApp'
          type: array
      title: ApigeeListDeveloperAppsResponse
      type: object
    ApigeeListOfDevelopersResponse:
      properties:
        developer:
          description: List of developers.
          items:
            $ref: '#/components/schemas/ApigeeDeveloper'
          type: array
      title: ApigeeListOfDevelopersResponse
      type: object
    ApigeeMetadata:
      description: Encapsulates additional information about query execution.
      properties:
        errors:
          description: List of error messages as strings.
          items:
            type: string
          type: array
        notices:
          description: 'List of additional information such as data source, if result
            was truncated. For example: ``` "notices": [ "Source:Postgres", "PG Host:uappg0rw.e2e.apigeeks.net",
            "query served by:4b64601e-40de-4eb1-bfb9-eeee7ac929ed", "Table used: edge.api.uapgroup2.agg_api"
            ]```'
          items:
            type: string
          type: array
      title: ApigeeMetadata
      type: object
    ApigeeOperation:
      description: Represents the pairing of REST resource path and the actions (verbs)
        allowed on the resource path.
      properties:
        methods:
          description: methods refers to the REST verbs as in https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html.
            When none specified, all verb types are allowed.
          items:
            type: string
          type: array
        resource:
          description: Required. REST resource path associated with the API proxy
            or remote service.
          type: string
      title: ApigeeOperation
      type: object
    ApigeeOperationConfig:
      description: Binds the resources in an API proxy or remote service with the
        allowed REST methods and associated quota enforcement.
      properties:
        apiSource:
          description: Required. Name of the API proxy or remote service with which
            the resources, methods, and quota are associated.
          type: string
        attributes:
          description: Custom attributes associated with the operation.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        operations:
          description: 'List of resource/method pairs for the API proxy or remote
            service to which quota will applied. **Note**: Currently, you can specify
            only a single resource/method pair. The call will fail if more than one
            resource/method pair is provided.'
          items:
            $ref: '#/components/schemas/ApigeeOperation'
          type: array
        quota:
          $ref: '#/components/schemas/ApigeeQuota'
      title: ApigeeOperationConfig
      type: object
    ApigeeOperationGroup:
      description: List of operation configuration details associated with Apigee
        API proxies or remote services. Remote services are non-Apigee proxies, such
        as Istio-Envoy.
      properties:
        operationConfigType:
          description: Flag that specifes whether the configuration is for Apigee
            API proxy or a remote service. Valid values include `proxy` or `remoteservice`.
            Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated
            with the API product. Set to `remoteservice` when non-Apigee proxies like
            Istio-Envoy are associated with the API product.
          type: string
        operationConfigs:
          description: Required. List of operation configurations for either Apigee
            API proxies or other remote services that are associated with this API
            product.
          items:
            $ref: '#/components/schemas/ApigeeOperationConfig'
          type: array
      title: ApigeeOperationGroup
      type: object
    ApigeeOrganizationProjectMapping:
      properties:
        organization:
          description: Name of the Apigee organization.
          type: string
        projectId:
          description: GCP project associated with the Apigee organization
          type: string
        projectIds:
          description: 'DEPRECATED: Use `project_id`. An Apigee Organization is mapped
            to a single project.'
          items:
            type: string
          type: array
      title: ApigeeOrganizationProjectMapping
      type: object
    ApigeeProduct:
      properties:
        apiResources:
          items:
            type: string
          type: array
        approvalType:
          description: Flag that specifies how API keys are approved to access the
            APIs defined by the API product. If set to `manual`, the consumer key
            is generated and returned in "pending" state. In this case, the API keys
            won't work until they have been explicitly approved. If set to `auto`,
            the consumer key is generated and returned in "approved" state and can
            be used immediately. **Note:** Typically, `auto` is used to provide access
            to free or trial API products that provide limited quota or capabilities.
          type: string
        attributes:
          description: Array of attributes that may be used to extend the default
            API product profile with customer-specific metadata. You can specify a
            maximum of 18 attributes. Use this property to specify the access level
            of the API product as either `public`, `private`, or `internal`. Only
            products marked `public` are available to developers in the Apigee developer
            portal. For example, you can set a product to `internal` while it is in
            development and then change access to `public` when it is ready to release
            on the portal. API products marked as `private` do not appear on the portal,
            but can be accessed by external developers.
          items:
            $ref: '#/components/schemas/ApigeeAttribute'
          type: array
        createdAt:
          description: Response only. Creation time of this environment as milliseconds
            since epoch.
          format: int64
          type: string
        description:
          description: 'Description of the API product. Include key information about
            the API product that is not captured by other fields. Comma-separated
            list of API resources to be bundled in the API product. By default, the
            resource paths are mapped from the `proxy.pathsuffix` variable. The proxy
            path suffix is defined as the URI fragment following the ProxyEndpoint
            base path. For example, if the `apiResources` element is defined to be
            `/forecastrss` and the base path defined for the API proxy is `/weather`,
            then only requests to `/weather/forecastrss` are permitted by the API
            product. You can select a specific path, or you can select all subpaths
            with the following wildcard: - `/**`: Indicates that all sub-URIs are
            included. - `/*` : Indicates that only URIs one level down are included.
            By default, / supports the same resources as /** as well as the base path
            defined by the API proxy. For example, if the base path of the API proxy
            is `/v1/weatherapikey`, then the API product supports requests to `/v1/weatherapikey`
            and to any sub-URIs, such as `/v1/weatherapikey/forecastrss`, `/v1/weatherapikey/region/CA`,
            and so on. For more information, see Managing API products.'
          type: string
        displayName:
          description: Name displayed in the UI or developer portal to developers
            registering for API access.
          type: string
        environments:
          description: Comma-separated list of environment names to which the API
            product is bound. Requests to environments that are not listed are rejected.
            By specifying one or more environments, you can bind the resources listed
            in the API product to a specific environment, preventing developers from
            accessing those resources through API proxies deployed in another environment.
            This setting is used, for example, to prevent resources associated with
            API proxies in `prod` from being accessed by API proxies deployed in `test`.
          items:
            type: string
          type: array
        graphqlOperationGroup:
          $ref: '#/components/schemas/ApigeeGraphQLOperationGroup'
        lastModifiedAt:
          description: Response only. Modified time of this environment as milliseconds
            since epoch.
          format: int64
          type: string
        name:
          description: 'Internal name of the API product. Characters you can use in
            the name are restricted to: `A-Z0-9._\-$ %`. **Note:** The internal name
            cannot be edited when updating the API product.'
          type: string
        operationGroup:
          $ref: '#/components/schemas/ApigeeOperationGroup'
        proxies:
          description: Comma-separated list of API proxy names to which this API product
            is bound. By specifying API proxies, you can associate resources in the
            API product with specific API proxies, preventing developers from accessing
            those resources through other API proxies. Apigee rejects requests to
            API proxies that are not listed. **Note:** The API proxy names must already
            exist in the specified environment as they will be validated upon creation.
          items:
            type: string
          type: array
        quota:
          description: Number of request messages permitted per app by this API product
            for the specified `quotaInterval` and `quotaTimeUnit`. For example, a
            `quota` of 50, for a `quotaInterval` of 12 and a `quotaTimeUnit` of hours
            means 50 requests are allowed every 12 hours.
          type: string
        quotaInterval:
          description: Time interval over which the number of request messages is
            calculated.
          type: string
        quotaTimeUnit:
          description: Time unit defined for the `quotaInterval`. Valid values include
            `minute`, `hour`, `day`, or `month`.
          type: string
        scopes:
          description: Comma-separated list of OAuth scopes that are validated at
            runtime. Apigee validates that the scopes in any access token presented
            match the scopes defined in the OAuth policy associated with the API product.
          items:
            type: string
          type: array
      title: ApigeeProduct
      type: object
    ApigeeProductRef:
      properties:
        apiproduct:
          description: Name of the API product.
          type: string
        status:
          type: string
      required:
      - apiproduct
      - status
      title: ApigeeProductRef
      type: object
    ApigeeQuery:
      properties:
        csvDelimiter:
          description: Delimiter used in the CSV file, if `outputFormat` is set to
            `csv`. Defaults to the `,` (comma) character. Supported delimiter characters
            include comma (`,`), pipe (`|`), and tab (`\t`).
          type: string
        dimensions:
          description: A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
          items:
            type: string
          type: array
        envgroupHostname:
          description: Hostname needs to be specified if query intends to run at host
            level. This field is only allowed when query is submitted by CreateHostAsyncQuery
            where analytics data will be grouped by organization and hostname.
          type: string
        filter:
          description: Boolean expression that can be used to filter data. Filter
            expressions can be combined using AND/OR terms and should be fully parenthesized
            to avoid ambiguity. See Analytics metrics, dimensions, and filters reference
            https://docs.apigee.com/api-platform/analytics/analytics-reference for
            more information on the fields available to filter on. For more information
            on the tokens that you use to build filter expressions, see Filter expression
            syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
          type: string
        groupByTimeUnit:
          description: 'Time unit used to group the result set. Valid values include:
            second, minute, hour, day, week, or month. If a query includes groupByTimeUnit,
            then the result is an aggregation based on the specified time unit and
            the resultant timestamp does not include milliseconds precision. If a
            query omits groupByTimeUnit, then the resultant timestamp includes milliseconds
            precision.'
          type: string
        limit:
          description: Maximum number of rows that can be returned in the result.
          format: int32
          type: integer
        metrics:
          description: A list of Metrics.
          items:
            $ref: '#/components/schemas/ApigeeQueryMetric'
          type: array
        name:
          description: Asynchronous Query Name.
          type: string
        outputFormat:
          description: 'Valid values include: `csv` or `json`. Defaults to `json`.
            Note: Configure the delimiter for CSV output using the csvDelimiter property.'
          type: string
        reportDefinitionId:
          description: Asynchronous Report ID.
          type: string
        timeRange:
          description: 'Required. Time range for the query. Can use the following
            predefined strings to specify the time range: `last60minutes` `last24hours`
            `last7days` Or, specify the timeRange as a structure describing start
            and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: "timeRange":
            { "start": "2018-07-29T00:13:00Z", "end": "2018-08-01T00:18:00Z" }'
          enum:
          - last24hours
          - last60minutes
          - last7days
          type: string
      title: ApigeeQuery
      type: object
    ApigeeQueryMetadata:
      properties:
        dimensions:
          description: Dimensions of the AsyncQuery.
          items:
            type: string
          type: array
        endTimestamp:
          description: End timestamp of the query range.
          type: string
        metrics:
          description: 'Metrics of the AsyncQuery. Example: ["name:message_count,func:sum,alias:sum_message_count"]'
          items:
            type: string
          type: array
        outputFormat:
          description: Output format.
          type: string
        startTimestamp:
          description: Start timestamp of the query range.
          type: string
        timeUnit:
          description: Query GroupBy time unit.
          type: string
      title: ApigeeQueryMetadata
      type: object
    ApigeeQueryMetric:
      description: 'More info about Metric: https://docs.apigee.com/api-platform/analytics/analytics-reference#metrics'
      properties:
        alias:
          description: Alias for the metric. Alias will be used to replace metric
            name in query results.
          type: string
        function:
          description: 'Aggregation function: avg, min, max, or sum.'
          type: string
        name:
          description: Required. Metric name.
          type: string
        operator:
          description: One of `+`, `-`, `/`, `%`, `*`.
          type: string
        value:
          description: Operand value should be provided when operator is set.
          type: string
      title: ApigeeQueryMetric
      type: object
    ApigeeQuota:
      description: Quota contains the essential parameters needed that can be applied
        on the resources, methods, API source combination associated with this API
        product. While Quota is optional, setting it prevents requests from exceeding
        the provisioned parameters.
      properties:
        interval:
          description: Required. Time interval over which the number of request messages
            is calculated.
          type: string
        limit:
          description: Required. Upper limit allowed for the time interval and time
            unit specified. Requests exceeding this limit will be rejected.
          type: string
        timeUnit:
          description: Time unit defined for the `interval`. Valid values include
            `minute`, `hour`, `day`, or `month`. If `limit` and `interval` are valid,
            the default value is `hour`; otherwise, the default is null.
          type: string
      title: ApigeeQuota
      type: object
    ApigeeReference:
      description: A Reference configuration. References must refer to a keystore
        that also exists in the parent environment.
      properties:
        description:
          description: Optional. A human-readable description of this reference.
          type: string
        name:
          description: Required. The resource id of this reference. Values must match
            the regular expression [\w\s\-.]+.
          type: string
        refers:
          description: Required. The id of the resource to which this reference refers.
            Must be the id of a resource that exists in the parent environment and
            is of the given resource_type.
          type: string
        resourceType:
          description: The type of resource referred to by this reference. Valid values
            are 'KeyStore' or 'TrustStore'.
          type: string
      title: ApigeeReference
      type: object
    ApigeeReferenceConfig:
      properties:
        name:
          description: 'Name of the reference in the following format: `organizations/{org}/environments/{env}/references/{reference}`'
          type: string
        resourceName:
          description: 'Name of the referenced resource in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}`
            Only references to keystore resources are supported.'
          type: string
      title: ApigeeReferenceConfig
      type: object
    ApigeeResponseWrapper:
      properties:
        errorCode:
          description: ID that can be used to find errors in the log files.
          type: string
        message:
          description: Description of the operation.
          type: string
        requestId:
          description: ID that can be used to find request details in the log files.
          type: string
        status:
          description: Status of the operation.
          type: string
      title: ApigeeResponseWrapper
      type: object
    ApigeeSyncAuthorization:
      properties:
        etag:
          description: 'Entity tag (ETag) used for optimistic concurrency control
            as a way to help prevent simultaneous updates from overwriting each other.
            For example, when you call [getSyncAuthorization](organizations/getSyncAuthorization)
            an ETag is returned in the response. Pass that ETag when calling the [setSyncAuthorization](organizations/setSyncAuthorization)
            to ensure that you are updating the correct version. If you don''t pass
            the ETag in the call to `setSyncAuthorization`, then the existing authorization
            is overwritten indiscriminately. **Note**: We strongly recommend that
            you use the ETag in the read-modify-write cycle to avoid race conditions.'
          format: byte
          type: string
        identities:
          description: 'Required. Array of service accounts to grant access to control
            plane resources, each specified using the following format: `serviceAccount:`
            service-account-name. The service-account-name is formatted like an email
            address. For example: `my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com`
            You might specify multiple service accounts, for example, if you have
            multiple environments and wish to assign a unique service account to each
            one. The service accounts must have **Apigee Synchronizer Manager** role.
            See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/latest/sa-about#create-the-service-accounts).'
          items:
            type: string
          type: array
      title: ApigeeSyncAuthorization
      type: object
    Application:
      description: ''
      properties:
        automaticUnload:
          description: This is a proper that will let us know if we will proactivity
            unload all of your machine learning models.by default this is false.
          type: boolean
        capabilities:
          $ref: '#/components/schemas/CapabilitiesEnum'
        id:
          description: The ID of the application at the device level
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        name:
          $ref: '#/components/schemas/ApplicationNameEnum'
        onboarded:
          type: boolean
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        privacy:
          $ref: '#/components/schemas/PrivacyEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        version:
          description: This is the specific version number 0.0.0
          type: string
      required:
      - id
      - name
      - version
      - platform
      - onboarded
      - privacy
      title: Application
      type: object
    ApplicationNameEnum:
      description: This is a running enumeration for the Names of all the Applications
        that can be Registered
      enum:
      - SUBLIME
      - VS_CODE
      - JETBRAINS
      - FIREFOX_ADDON_MV2
      - FIREFOX_ADDON_MV3
      - SAFARI_EXTENSION_MV2
      - SAFARI_EXTENSION_MV3
      - PIECES_FOR_DEVELOPERS
      - PIECES_FOR_DEVELOPERS_CLI
      - OS_SERVER
      - GOOGLE_CHROME_EXTENSION_MV2
      - GOOGLE_CHROME_EXTENSION_MV3
      - ULTRA_EDIT
      - ATOM_PACKAGE
      - ADOBE_ILLUSTRATOR_PIECES_COLOR_SHARE
      - MICROSOFT_TEAMS
      - CHAT_GPT
      - OBSIDIAN
      - JUPYTER_HUB
      - VISUAL_STUDIO
      - MICROSOFT_EDGE
      - BRAVE
      - GOOGLE_CHAT
      - SLACK
      - AZURE_DATA_STUDIO
      - OPEN_SOURCE
      - R_STUDIO
      - VIM
      - NOTION
      - GITHUB_DESKTOP
      - RAYCAST
      - REPLIT
      - ALFRED
      - FIGMA
      - SKETCH
      - ADOBE_ILLUSTRATOR
      - NOTEPAD_PLUS_PLUS
      - EMBEETLE
      - ECLIPSE
      - X_CODE
      - NETBEANS
      - UNKNOWN
      title: ApplicationNameEnum
      type: string
    Applications:
      description: A list of all the applications
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Application'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Applications
      type: object
    Asset:
      description: 'An Asset Model representing data extracted from an Application
        connecting a group of data containing one or more Formats.


        Below formats, preview, and original CAN to be pollinated (DAG Unsafe) because
        it is a root node and it''s child leaf nodes will prevent cycles agressively.'
      properties:
        activities:
          $ref: '#/components/schemas/Activities'
        anchors:
          $ref: '#/components/schemas/Anchors'
        annotations:
          $ref: '#/components/schemas/Annotations'
        conversations:
          $ref: '#/components/schemas/Conversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        creator:
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: string
        curated:
          description: This is an optional boolean that will flag that this asset
            came from a currated collection.
          type: boolean
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        demo:
          description: This will let us know if this asset was generated as a 'demo'
            snippet
          type: boolean
        discovered:
          type: boolean
        favorited:
          type: boolean
        formats:
          $ref: '#/components/schemas/Formats'
        hints:
          $ref: '#/components/schemas/Hints'
        id:
          description: The globally available UID representing the asset in the Database,
            both locally and in the cloud.
          example: 2254f2c8-5797-40e8-ac56-41166dc0e159
          type: string
        interacted:
          $ref: '#/components/schemas/GroupedTimestamp'
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        name:
          type: string
        original:
          $ref: '#/components/schemas/ReferencedFormat'
        persons:
          $ref: '#/components/schemas/Persons'
        preview:
          $ref: '#/components/schemas/Preview'
        pseudo:
          description: This will determine if this is a asset that the user did not
            explicitly save.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        sensitives:
          $ref: '#/components/schemas/Sensitives'
        shares:
          $ref: '#/components/schemas/Shares'
        summaries:
          $ref: '#/components/schemas/WorkstreamSummaries'
        synced:
          $ref: '#/components/schemas/GroupedTimestamp'
        tags:
          $ref: '#/components/schemas/Tags'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/Websites'
      required:
      - id
      - creator
      - created
      - updated
      - formats
      - preview
      - original
      - mechanism
      title: Asset
      type: object
    AssetFilter:
      description: '** in the future, consider adding an optional bool''s called nextAnd,
        nextOr which will say that the next filter will be  AND behavor or OR behavior.


        "operations": here is is an optional property to allow or behavior,(we will
        only allow 1 level deep of or''s), if or is not passed in then it is just
        simply ignored. If or is passed in then we will be or''d together with the
        top level filter and considered extras. default behavior for operations is
        and, however yoour can specifiy OR operations as well.'
      properties:
        classification:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        created:
          $ref: '#/components/schemas/AssetFilterTimestamp'
        operations:
          $ref: '#/components/schemas/AssetFilters'
        persons:
          items:
            type: string
          type: array
        phrase:
          $ref: '#/components/schemas/AssetFilterPhrase'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tags:
          items:
            type: string
          type: array
        updated:
          $ref: '#/components/schemas/AssetFilterTimestamp'
        websites:
          items:
            type: string
          type: array
      title: AssetFilter
      type: object
    AssetFilterPhrase:
      properties:
        annotation:
          type: boolean
        content:
          type: boolean
        options:
          $ref: '#/components/schemas/AssetFilterPhraseOptions'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        title:
          type: boolean
        value:
          type: string
      title: AssetFilterPhrase
      type: object
    AssetFilterPhraseOptions:
      properties:
        annotation:
          $ref: '#/components/schemas/AnnotationTypeEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: AssetFilterPhrase
      type: object
    AssetFilterTimestamp:
      description: 'if you want a range between you can use from && to.


        if you want anything before, use to and NO from.


        if you want anything after, use from and NO to.'
      properties:
        between:
          type: boolean
        from:
          $ref: '#/components/schemas/GroupedTimestamp'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        to:
          $ref: '#/components/schemas/GroupedTimestamp'
      title: AssetFilterTimestamp
      type: object
    AssetFilters:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/AssetFilter'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/FilterOperationTypeEnum'
      required:
      - iterable
      title: AssetFilters
      type: object
    AssetReclassification:
      description: This is a model that will represent the miminum properties required
        to update the classification of this asset.
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - ext
      - asset
      title: AssetReclassification
      type: object
    AssetSearchSpace:
      description: This is provided search spaces, This is a provided assets, TODO
        in the future we might want to add seeds.
      properties:
        identifers:
          $ref: '#/components/schemas/FlattenedAssets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - identifers
      title: AssetSearchSpace
      type: object
    Assets:
      description: A base class for a collection of assets and some additional meta
        properties. Fully Populated with Formats internally (not just uuid's).
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an asset id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Assets
      type: object
    AssetsSearchWithFiltersInput:
      properties:
        casing:
          description: This is an optional bool that will let us know, if we want
            to ignore case or not.(default is to allow casing)ie casing:true.
          type: boolean
        filters:
          $ref: '#/components/schemas/AssetFilters'
        query:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        space:
          $ref: '#/components/schemas/AssetSearchSpace'
      title: AssetsSearchWithFiltersInput
      type: object
    AssetsSearchWithFiltersOutput:
      description: 'output for the /assets/search [POST] '
      properties:
        results:
          $ref: '#/components/schemas/SearchedAssets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - results
      title: AssetsSearchWithFiltersOutput
      type: object
    Auth0:
      description: An object representing all of the properties that are available
        within a Auth0 PKCE Flow
      properties:
        audience:
          description: The Server Audience of your Auth0 Service
          type: string
        client:
          description: The Client ID for your Auth0 Service
          type: string
        domain:
          description: The domain of your Auth 0 Service
          type: string
        identity:
          $ref: '#/components/schemas/Auth0Identity'
        metadata:
          $ref: '#/components/schemas/Auth0UserMetadata'
        namespace:
          description: An optional namespace parameter to add an additional namespace
          type: string
        oAuth:
          $ref: '#/components/schemas/OAuthGroup'
        redirects:
          description: The redirect URI for you Auth 0 Service
          properties:
            authenticated:
              description: Where the Auth0 redirects after the user is authorized
              type: string
            unauthenticated:
              description: The redirect where a user returns once unauthenticated
              type: string
          type: object
        user:
          $ref: '#/components/schemas/Auth0User'
      required:
      - domain
      - client
      - audience
      - redirects
      - oAuth
      title: Auth0
      type: object
    Auth0Identity:
      description: 'Contains info retrieved from the identity provider with which
        the user originally authenticates. Users may also link their profile to multiple
        identity providers; those identities will then also appear in this array.
        The contents of an individual identity provider object varies by provider,
        but it will typically include the following.

        Link: [https://auth0.com/docs/rules/user-object-in-rules]


        Currently left out:

        - profile_data: (Object) User information associated with the connection.
        When profiles are linked, it is populated with the associated user info for
        secondary accounts.'
      properties:
        access_token:
          type: string
        connection:
          description: 'Name of the Auth0 connection used to authenticate the user.

            '
          type: string
        expires_in:
          type: integer
        isSocial:
          description: 'Indicates whether the connection is a social one.

            '
          type: boolean
        provider:
          description: mapped from user_id  -> id
          type: string
        user_id:
          description: User's unique identifier for this connection/provider.
          type: string
      title: Auth0Identity
      type: object
    Auth0OpenAIUserMetadata:
      description: Only supporting a single api key per user.
      properties:
        api_key:
          type: string
          x-stoplight:
            id: ew99i9jxq2hb9
        api_key_name:
          type: string
          x-stoplight:
            id: fkso7ljifncw5
        organization_key:
          type: string
          x-stoplight:
            id: fq428udraruae
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: Auth0OpenAIUserMetadata
      type: object
      x-stoplight:
        id: mbwdpqf5zq1sl
    Auth0Token:
      description: m2m access token information meant for cloud server to authenticate
        with Auth0
      properties:
        access_token:
          minLength: 1
          type: string
        expires_in:
          type: number
        scope:
          minLength: 1
          type: string
        token_type:
          enum:
          - Bearer
          type: string
      required:
      - access_token
      - scope
      - token_type
      title: Auth0Token
      type: object
    Auth0User:
      description: ''
      properties:
        blocked_for:
          items:
            type: string
          type: array
        created_at:
          format: date-time
          type: string
        email:
          example: user@pieces.app
          format: email
          type: string
        email_verified:
          description: Indicates whether the user has verified their email address.
            Mapped from email_verified -> emailVerified.
          type: boolean
        family_name:
          description: User's family name.
          type: string
        given_name:
          description: 'User''s given name.

            '
          type: string
        guardian_authenticators:
          items:
            type: string
          type: array
        identities:
          description: Contains info retrieved from the identity provider with which
            the user originally authenticates.
          items:
            $ref: '#/components/schemas/Auth0Identity'
          type: array
        last_ip:
          type: string
        last_login:
          format: date-time
          type: string
        locale:
          type: string
        logins_count:
          type: integer
        name:
          description: "\tUser's full name."
          example: Tsavo Knott
          type: string
        nickname:
          description: 'User''s nickname.

            '
          type: string
        picture:
          description: 'mapped from picture.URL pointing to the user''s profile picture. '
          example: https://picsum.photos/200
          format: uri
          type: string
        updated_at:
          format: date-time
          type: string
        user_id:
          type: string
        user_metadata:
          $ref: '#/components/schemas/Auth0UserMetadata'
        username:
          description: "\t(unique) User's username.\n\t"
          type: string
      title: Auth0User
      type: object
    Auth0UserAllocationMetadata:
      description: This is specifically for our allocation server metadata.
      properties:
        project:
          type: string
        region:
          type: string
      required:
      - project
      - region
      title: Auth0UserAllocationMetadata
      type: object
      x-stoplight:
        id: ewimmjf8x5tog
    Auth0UserBetaStatus:
      description: 'Note: continuous: this means that from this moment in time, the
        user is continuously opted into beta


        otherwise we will use the from/to values provided.


        Note: in order to opt out of vision, you will just end their beta w/ the updated
        with a to property that is effectively right now in time.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vision:
          $ref: '#/components/schemas/AnonymousTemporalRange'
      title: Auth0UserBetaStatus
      type: object
    Auth0UserMetadata:
      description: User Metadata from Auth0
      properties:
        allocation:
          $ref: '#/components/schemas/Auth0UserAllocationMetadata'
        beta:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        cloud_key:
          type: string
        global_id:
          format: uuid
          type: string
        open_AI:
          $ref: '#/components/schemas/Auth0OpenAIUserMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        stripe_customer_id:
          description: A customer ID that is added to the user in the case of payments
          type: string
        vanityname:
          description: this is the vanityname of the user.(set from their custom CNAME
            dns record.) ie mark.pieces.cloud where "mark" is the vanityname.
          type: string
      required:
      - global_id
      title: Auth0UserMetadata
      type: object
    AvailableFormats:
      description: This is a specific model here used within the SeededAsset that
        enables us to return all the available formats on a specific seed that was
        passed as an input within the '/assets/draft' endpoint
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Classification'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: AvailableFormats
      type: object
      x-stoplight:
        id: g6tes2ded0ns1
    Backup:
      description: This is a cloud Backup. This is specific metadata needed inorder
        to retrieve a Backup.
      properties:
        bytes:
          type: number
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        device_name:
          type: string
        id:
          type: string
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        timestamp:
          type: string
        version:
          type: string
      required:
      - id
      - version
      - timestamp
      - bytes
      - created
      - device_name
      - platform
      title: Backup
      type: object
      x-stoplight:
        id: 6c7mucsmqku7w
    BackupStatus:
      description: 'TODO add more description to this.


        can eventually add a number that display the percent downloaded an so on.(this
        is called percent 0-100)'
      properties:
        backup:
          $ref: '#/components/schemas/Backup'
        percentage:
          description: Optionally if the download is in progress you will receive
            a download percent(from 0-100).
          nullable: true
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          $ref: '#/components/schemas/BackupStatusEnum'
      required:
      - backup
      - status
      title: BackupStatus
      type: object
    BackupStatusEnum:
      description: Enum used for the status of creating a backup or restoring a backup.
      enum:
      - INITIALIZED
      - IN-PROGRESS
      - COMPLETED
      - FAILED
      - UNKNOWN
      - CANCELED
      - RESET
      title: BackupStatusEnum
      type: string
    BackupStreamedProgress:
      description: This is a specific model to the /backups/create/streamed.
      properties:
        backup:
          $ref: '#/components/schemas/Backup'
        percentage:
          description: Optionally if the download is in progress you will recieve
            a download percent(from 0-100).
          nullable: true
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/ModelDownloadProgressStatusEnum'
      title: BackupStreamedProgress
      type: object
    Backups:
      description: This is a plural model of many Cloud Backups.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an website
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Backup'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Backups
      type: object
      x-stoplight:
        id: n8ir9eh7deh6z
    BackupsStreamedProgress:
      description: This is used in the backups plural stream to stream the changes
        to all the restorations and backups in progress.
      properties:
        backups:
          items:
            $ref: '#/components/schemas/BackupStreamedProgress'
          type: array
        restorations:
          items:
            $ref: '#/components/schemas/BackupStreamedProgress'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: BackupsStreamedProgress
      type: object
    BrowserSelection:
      description: This is a given bit of text/code that is selected in the browser,
        this can be a copy/paste/selection
      properties:
        classification:
          $ref: '#/components/schemas/Classification'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          $ref: '#/components/schemas/TransferableString'
      required:
      - value
      - classification
      title: BrowserSelection
      type: object
    BrowserTab:
      description: 'a tab can have many values because you might want to pass in a
        value that represents the code_blocks(snippets) or a md represenet

        note: please only pass 1 representation, I will clean on POS side tho (txt
        || md || html)


        anchor: can be defined in the browser if view a local file


        website: this is the given url of the tab


        range: this is the amount of time this user is current on this given tab


        current: means that this is the current tab that is open


        contributors: these are all the extracted people from this given tab'
      properties:
        anchor:
          $ref: '#/components/schemas/SeededAnchor'
        contributors:
          $ref: '#/components/schemas/DocumentContributors'
        current:
          type: boolean
        range:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        values:
          $ref: '#/components/schemas/BrowserTabValues'
        website:
          $ref: '#/components/schemas/SeededWebsite'
      title: BrowserTab
      type: object
    BrowserTabValue:
      description: 'snippet: these are extracted code blocks

        selection: here is a copy/paste/selection


        note: recommended that you pass in the md version of the webpage


        note: please dont pass in all three html,md,text, just pass in 1.'
      properties:
        html:
          $ref: '#/components/schemas/TransferableString'
        md:
          $ref: '#/components/schemas/TransferableString'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        selection:
          $ref: '#/components/schemas/BrowserSelection'
        snippet:
          $ref: '#/components/schemas/BrowserSelection'
        text:
          $ref: '#/components/schemas/TransferableString'
      title: BrowserTabValue
      type: object
    BrowserTabValues:
      description: Plural model that represent many tabs
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/BrowserTabValue'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: BrowserTabValues
      type: object
    BrowserTabs:
      description: This is a plural representation of the BrowserTab
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/BrowserTab'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: BrowserTabs
      type: object
    BuildPackages:
      properties:
        hash:
          type: string
        latest:
          type: string
        object:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        size:
          type: number
        updated:
          type: string
        url:
          type: string
      title: BuildPackages
      type: object
    Builds:
      properties:
        changelog:
          type: string
        channel:
          type: string
        item:
          type: string
        number:
          type: string
        packages:
          $ref: '#/components/schemas/ReleasePackages'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tag:
          type: string
      title: Builds
      type: object
    ByteDescriptor:
      description: This is a nice microclass to help with managing the size of a File
        or Fragment in a readable way for UI's
      properties:
        readable:
          example: 33.6 KB
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          example: 33600
          format: int64
          type: integer
      required:
      - value
      - readable
      title: ByteDescriptor
      type: object
    CapabilitiesEnum:
      description: This lets us know what capabilites in relation to ml/ cloud infrastructure
        you are opting into.
      enum:
      - LOCAL
      - CLOUD
      - BLENDED
      title: CapabilitiesEnum
      type: string
      x-stoplight:
        id: ac00y4704q0i5
    ChallengedPKCE:
      description: A model that Generates A PKCE Challenge Object with the needed
        requirements.
      properties:
        challenge:
          description: Generated challenge from the code_verifier.
          type: string
        method:
          description: Method used to generate the challenge. The PKCE spec defines
            two methods, S256 and plain, however, Auth0 supports only S256 since the
            latter is discouraged.
          enum:
          - S256
          type: string
        nonce:
          description: A local key that is held as the comparator to state, thus they
            should be the same.
          format: uuid
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        state:
          description: An opaque value the clients adds to the initial request that
            Auth0 includes when redirecting the back to the client. This value must
            be used by the client to prevent CSRF attacks.
          format: uuid
          type: string
        verifier:
          description: Cryptographically random key that was used to generate the
            code_challenge passed to /authorize.
          type: string
      required:
      - state
      - nonce
      - challenge
      - method
      - verifier
      title: ChallengedPKCE
      type: object
    Classification:
      description: This is the specific classification of an Asset's Format.(This
        is on a per format basis b/c an asset could have different formats that are
        different format representations of the Asset.)
      properties:
        generic:
          $ref: '#/components/schemas/ClassificationGenericEnum'
        rendering:
          $ref: '#/components/schemas/ClassificationRenderingEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        specific:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
      required:
      - generic
      - specific
      title: Classification
      type: object
    ClassificationGenericEnum:
      description: EXTERNAL_RESOURCE_REFERENCE can be thought of as anything such
        as URL, URI, UNIX PATH, etc
      enum:
      - CODE
      - TEXT
      - IMAGE
      - VIDEO
      - EXTERNAL_RESOURCE_REFERENCE
      - UNKNOWN
      - FILE
      title: ClassificationGenericEnum
      type: string
    ClassificationRenderingEnum:
      description: Specifically supported renderings...usually between generic types
      enum:
      - HTML
      - TWENTY_FOUR_BIT_ANSI_ESCAPED_SEQUENCES
      - HIGHLIGHT_JS_HTML
      title: ClassificationRenderingEnum
      type: string
    ClassificationSpecificEnum:
      description: ''
      enum:
      - csx
      - cs
      - html
      - htm
      - shtml
      - xhtml
      - hs
      - hs-boot
      - hsig
      - cpp
      - cc
      - cp
      - cxx
      - c
      - h
      - hh
      - hpp
      - hxx
      - inl
      - ipp
      - ixx
      - cppm
      - csv
      - doc
      - docm
      - docx
      - exe
      - gif
      - ico
      - jpe
      - jpeg
      - jpg
      - jpgm
      - jpgv
      - log
      - mp2
      - mp2a
      - mp3
      - mp4
      - mp4a
      - oga
      - ogg
      - ogv
      - ogx
      - ppt
      - pptx
      - pptm
      - qt
      - text
      - tif
      - tiff
      - txt
      - wav
      - weba
      - webm
      - webp
      - xla
      - xlam
      - xlc
      - xlm
      - xls
      - xlsb
      - xlsm
      - xlsx
      - xlt
      - xltm
      - xltx
      - pdf
      - png
      - rpm
      - zip
      - woff
      - woff2
      - svgz
      - bin
      - bmp
      - eot
      - gz
      - jar
      - mpkg
      - ai
      - eps
      - dmg
      - list
      - rtx
      - uri
      - uris
      - urls
      - css
      - dart
      - java
      - bsh
      - js
      - jsx
      - mjs
      - htc
      - json
      - ipynb
      - gltf
      - jsonml
      - ps
      - ssml
      - wasm
      - rtf
      - cco
      - pl
      - pc
      - pm
      - pmc
      - pod
      - t
      - xml
      - tld
      - dtml
      - rng
      - rss
      - opml
      - svg
      - xaml
      - sublime-snippet
      - tmLanguage
      - tmPreferences
      - tmSnippet
      - tmTheme
      - csproj
      - fsproj
      - sqlproj
      - vbproj
      - vcproj
      - vcxproj
      - dae
      - props
      - targets
      - xsd
      - xsl
      - xslt
      - ecma
      - node
      - php
      - php3
      - php4
      - php5
      - php7
      - php8
      - phps
      - phpt
      - phtml
      - py
      - py3
      - pyw
      - pyi
      - pyx
      - pyx.in
      - pxd
      - pxd.in
      - pxi
      - pxi.in
      - rpy
      - cpy
      - gyp
      - gypi
      - vpy
      - smk
      - wscript
      - bazel
      - bzl
      - pyc
      - class
      - p
      - pas
      - curl
      - mcurl
      - go
      - swift
      - rs
      - ts
      - tsx
      - rb
      - rbi
      - rbx
      - rjs
      - rabl
      - rake
      - capfile
      - jbuilder
      - gemspec
      - podspec
      - irbrc
      - pryrc
      - prawn
      - thor
      - Appfile
      - Appraisals
      - Berksfile
      - Brewfile
      - Cheffile
      - Deliverfile
      - Fastfile
      - Gemfile
      - Guardfile
      - Podfile
      - Rakefile
      - Rantfile
      - Scanfile
      - simplecov
      - Snapfile
      - Thorfile
      - Vagrantfile
      - scala
      - sbt
      - sc
      - cmd
      - bat
      - coffee
      - erl
      - hrl
      - escript
      - lua
      - md
      - mdown
      - mdwn
      - markdown
      - markdn
      - matlab
      - m
      - ps1
      - sh
      - bash
      - bashrc
      - ash
      - zsh
      - .bash_aliases
      - .bash_completions
      - .bash_functions
      - .bash_login
      - .bash_logout
      - .bash_profile
      - .bash_variables
      - .profile
      - .textmate_init
      - .zlogin
      - .zlogout
      - .zprofile
      - .zshenv
      - .zshrc
      - PKGBUILD
      - ebuild
      - eclass
      - r
      - sql
      - ddl
      - dml
      - tex
      - ltx
      - sty
      - cls
      - UNKNOWN
      - yaml
      - yml
      - toml
      - tml
      - Cargo.lock
      - Gopkg.lock
      - Pipfile
      - poetry.lock
      - uniform_resource_locator
      - custom_url_scheme
      - unix_file_path
      - windows_file_path
      - uniform_resource_identifier
      - hljs-1c
      - hljs-abnf
      - hljs-accesslog
      - hljs-actionscript
      - hljs-ada
      - hljs-angelscript
      - hljs-apache
      - hljs-applescript
      - hljs-arcade
      - hljs-arduino
      - hljs-armasm
      - hljs-asciidoc
      - hljs-aspectj
      - hljs-autohotkey
      - hljs-autoit
      - hljs-avrasm
      - hljs-awk
      - hljs-axapta
      - hljs-bash
      - hljs-basic
      - hljs-bnf
      - hljs-brainfuck
      - hljs-cal
      - hljs-capnproto
      - hljs-ceylon
      - hljs-clean
      - hljs-clojure-repl
      - hljs-clojure
      - hljs-cmake
      - hljs-coffeescript
      - hljs-coq
      - hljs-cos
      - hljs-cpp
      - hljs-crmsh
      - hljs-crystal
      - hljs-c
      - hljs-cs
      - hljs-csp
      - hljs-css
      - hljs-d
      - hljs-dart
      - hljs-delphi
      - hljs-diff
      - hljs-django
      - hljs-dns
      - hljs-dockerfile
      - hljs-dos
      - hljs-dsconfig
      - hljs-dts
      - hljs-dust
      - hljs-ebnf
      - hljs-elixir
      - hljs-elm
      - hljs-erb
      - hljs-erlang-repl
      - hljs-erlang
      - hljs-excel
      - hljs-fix
      - hljs-flix
      - hljs-fortran
      - hljs-fsharp
      - hljs-gams
      - hljs-gauss
      - hljs-gcode
      - hljs-gherkin
      - hljs-glsl
      - hljs-gml
      - hljs-go
      - hljs-golo
      - hljs-gradle
      - hljs-groovy
      - hljs-haml
      - hljs-handlebars
      - hljs-haskell
      - hljs-haxe
      - hljs-hsp
      - hljs-htmlbars
      - hljs-http
      - hljs-hy
      - hljs-inform7
      - hljs-ini
      - hljs-irpf90
      - hljs-isbl
      - hljs-java
      - hljs-javascript
      - hljs-jboss-cli
      - hljs-json
      - hljs-julia-repl
      - hljs-julia
      - hljs-kotlin
      - hljs-lasso
      - hljs-ldif
      - hljs-leaf
      - hljs-less
      - hljs-lisp
      - hljs-livecodeserver
      - hljs-livescript
      - hljs-llvm
      - hljs-lsl
      - hljs-lua
      - hljs-makefile
      - hljs-markdown
      - hljs-mathematica
      - hljs-matlab
      - hljs-maxima
      - hljs-mel
      - hljs-mercury
      - hljs-mipsasm
      - hljs-mizar
      - hljs-mojolicious
      - hljs-monkey
      - hljs-moonscript
      - hljs-n1ql
      - hljs-nginx
      - hljs-nimrod
      - hljs-nix
      - hljs-nsis
      - hljs-objectivec
      - hljs-ocaml
      - hljs-openscad
      - hljs-oxygene
      - hljs-parser3
      - hljs-perl
      - hljs-pf
      - hljs-pgsql
      - hljs-php
      - hljs-plaintext
      - hljs-pony
      - hljs-powershell
      - hljs-processing
      - hljs-profile
      - hljs-prolog
      - hljs-properties
      - hljs-protobuf
      - hljs-puppet
      - hljs-purebasic
      - hljs-python
      - hljs-q
      - hljs-qml
      - hljs-r
      - hljs-reasonml
      - hljs-rib
      - hljs-roboconf
      - hljs-routeros
      - hljs-rsl
      - hljs-ruby
      - hljs-ruleslanguage
      - hljs-rust
      - hljs-sas
      - hljs-scala
      - hljs-scheme
      - hljs-scilab
      - hljs-scss
      - hljs-shell
      - hljs-smali
      - hljs-smalltalk
      - hljs-sml
      - hljs-sqf
      - hljs-sql
      - hljs-stan
      - hljs-stata
      - hljs-step21
      - hljs-stylus
      - hljs-subunit
      - hljs-swift
      - hljs-taggerscript
      - hljs-tap
      - hljs-tcl
      - hljs-tex
      - hljs-thrift
      - hljs-tp
      - hljs-twig
      - hljs-typescript
      - hljs-vala
      - hljs-vbnet
      - hljs-vbscript-html
      - hljs-vbscript
      - hljs-verilog
      - hljs-vhdl
      - hljs-vim
      - hljs-x86asm
      - hljs-xl
      - hljs-xml
      - hljs-xquery
      - hljs-yaml
      - hljs-toml
      - hljs-zephir
      - hljs-html
      - groovy
      - kt
      - el
      - clj
      - ex
      - adb
      - ads
      - agda
      - elm
      - exs
      - glsl
      - ml
      - lean
      - lisp
      - rkt
      - sparql
      - vhdl
      - zig
      - dockerfile
      - f03
      - f08
      - f18
      - f90
      - f95
      - jl
      - mm
      - scm
      - sol
      - sv
      - asp
      - cfm
      - fs
      - fsi
      - fsx
      - tf
      - vba
      - svelte
      - vue
      - scss
      - feature
      - ini
      - ftl
      - hcl
      - abap
      title: ClassificationSpecificEnum
      type: string
    Classifications:
      description: This is a plural representation of a Classification
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Classification'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Classifications
      type: object
    Cloud:
      description: 'connected: This is the last time that we connected to our cloud.

        updated: This is the last time that this pod was updated.


        ** This is the Allocation

        '
      properties:
        address:
          description: this is the url to the specific users pod. ie userUUID.pieces.cloud
          type: string
        connected:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          description: 'This is the identification of '
          type: string
        ip:
          description: 'This is the specific ip that we can ping of our specific pod
            ie. 12.34.1234 '
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/AllocationStatus'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        user:
          description: This is a reference to a UserUuid
          type: string
        version:
          type: string
      required:
      - id
      - user
      - status
      - address
      - ip
      - connected
      - updated
      - version
      title: Cloud
      type: object
    Clouds:
      description: 'This is a model that will return all of the clouds available '
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Cloud'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Clouds
      type: object
    CodeAnalyses:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/CodeAnalysis'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: CodeAnalyses
      type: object
    CodeAnalysis:
      description: 'This is the ML Analysis object Specific to code.


        prediction and similarity are custom types. ** please dont not modify **'
      properties:
        analysis:
          description: this is just a reference to the analysis parent object.
          type: string
        id:
          type: string
        language:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        prediction:
          additionalProperties:
            type: number
          type: object
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          additionalProperties:
            type: number
          type: object
        tokenized:
          items:
            type: string
          type: array
        top5Colors:
          items:
            type: integer
          type: array
        top5Sorted:
          items:
            type: string
          type: array
        type:
          $ref: '#/components/schemas/ClassificationGenericEnum'
      required:
      - type
      - id
      - analysis
      - model
      title: CodeAnalysis
      type: object
    ConnectorSnapshot:
      description: 'This will be the model that is return from the connectorApi''s
        Snapshot endpoint.

        '
      properties:
        assets:
          $ref: '#/components/schemas/Assets'
        context:
          $ref: '#/components/schemas/Context'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - context
      - assets
      title: ConnectorSnapshot
      type: object
    Context:
      description: A Context that is returned from almost all calls to the ContextAPI
      properties:
        application:
          $ref: '#/components/schemas/Application'
        health:
          $ref: '#/components/schemas/Health'
        os:
          description: This is th UUID of the OS that this context is currently connected
            to. This attempts to be the same as Segment's anonmyousId feild. It is
            attempted to be set at initial installation at Pieces/.identity/.os
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          $ref: '#/components/schemas/UserProfile'
      required:
      - os
      - application
      - health
      title: Context
      type: object
    Conversation:
      description: 'This is a fully referenced Conversation.


        This will hold together a conversation. Ie allthe message within a conversation.


        All the additional properties on here used on here like(anchors/assets) are
        used for context that will seed the conversation.


        model is a calculated property, and will be the model of the last message
        sent if applicable.'
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        application:
          $ref: '#/components/schemas/Application'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        demo:
          description: This will let us know if this conversation was generated as
            a 'demo' conversation
          type: boolean
        favorited:
          type: boolean
        grounding:
          $ref: '#/components/schemas/ConversationGrounding'
        id:
          type: string
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          $ref: '#/components/schemas/ReferencedModel'
        name:
          description: This is a name that is customized.
          type: string
        pipeline:
          $ref: '#/components/schemas/QGPTPromptPipeline'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        type:
          $ref: '#/components/schemas/ConversationTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - messages
      - type
      title: Conversation
      type: object
      x-stoplight:
        id: typnu965gdvtw
    ConversationGrounding:
      description: This is the context used for grounding the ml models with reguard
        to a conversation.
      properties:
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        temporal:
          $ref: '#/components/schemas/TemporalRangeGrounding'
      title: ConversationGrounding
      type: object
      x-stoplight:
        id: tenq29tfv8ijo
    ConversationMessage:
      description: 'This is a fully referenced ConversationMessage.


        This has the minimum amount of properties to keep this light weight


        (will consider additional properties in the future like people/tags/links
        xyz)'
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        fragment:
          $ref: '#/components/schemas/FragmentFormat'
        id:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        role:
          $ref: '#/components/schemas/QGPTConversationMessageRoleEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        sentiment:
          $ref: '#/components/schemas/ConversationMessageSentimentEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - conversation
      - role
      title: ConversationMessage
      type: object
      x-stoplight:
        id: 90b602c96e5bc
    ConversationMessageSentimentEnum:
      description: This will describe the sentiment of a specific message ie if the
        message was liked/disliked/reported
      enum:
      - LIKE
      - DISLIKE
      - REPORT
      title: ConversationMessageSentimentEnum
      type: string
      x-stoplight:
        id: 27cc27c23cb89
    ConversationMessages:
      description: This is a plural version of ConversationMessage.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an ConversationMessage
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ConversationMessage'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: ConversationMessages
      type: object
      x-stoplight:
        id: deb6bc4791079
    ConversationSummarizeInput:
      description: Optionally you may pass in a list of conversation message that
        you would like to use for the summary.
      properties:
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: ConversationSummarizeInput
      type: object
      x-stoplight:
        id: ye5egjeq0kmgx
    ConversationSummarizeOutput:
      description: This is the output model for "/conversation/{conversation}/summarize
      properties:
        annotation:
          $ref: '#/components/schemas/ReferencedAnnotation'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - conversation
      - annotation
      title: ConversationSummarizeOutput
      type: object
      x-stoplight:
        id: 646b30ca76de5
    ConversationTypeEnum:
      description: This is a type of conversation, for now just COPILOT.
      enum:
      - COPILOT
      title: ConversationTypeEnum
      type: string
      x-stoplight:
        id: w4bv8os834nte
    Conversations:
      description: This is a plural version of a Conversation.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an Conversation
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Conversation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Conversations
      type: object
      x-stoplight:
        id: e6wn8svszg6ow
    ConversationsCreateFromAssetOutput:
      description: This is the model for the output for the "/conversations/create/from_asset/{asset}"
        endpoints.
      properties:
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - conversation
      title: ConversationsCreateFromAssetOutput
      type: object
      x-stoplight:
        id: a7tga1zlzdyd0
    CreatedExternalProviderApiKey:
      description: This is the outputmodel for /external_provider/api_key/create
      properties:
        metadata:
          $ref: '#/components/schemas/Auth0UserMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - metadata
      title: CreatedExternalProviderApiKey
      type: object
      x-stoplight:
        id: qq9zkoulwoxt8
    DeletedExternalProviderApiKey:
      description: This is the returnable for the ""/external_provider/api_key/delete"
        endpoint
      properties:
        metadata:
          $ref: '#/components/schemas/Auth0UserMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - metadata
      title: DeletedExternalProviderApiKey
      type: object
      x-stoplight:
        id: 56fh57manaq0a
    DetectedExternalApplication:
      description: This is a detected External Application that comes from our endpoint
        that will get a snapshot of the installed applications on your machine.
      properties:
        name:
          description: this is the name of the application
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        version:
          type: string
      required:
      - name
      title: DetectedExternalApplication
      type: object
      x-stoplight:
        id: u9u6eiz1ypp7o
    DetectedExternalApplications:
      description: 'This is used as the returnable for the /applications/external
        && /applications/external/related endpoints.


        This will return an iterable of Deteched Application a detected Application
        is an application that is currently installed on your machine.


        the /applications/external/related endpoint, will return a subset of the applications
        returned mainly applications that we detect are Pieces Applications that you
        have yet to install + names of applications where Pieces is coming soon.'
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/DetectedExternalApplication'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: DetectedExternalApplications
      type: object
      x-stoplight:
        id: ih1edhocc74q7
    DiscoveredAsset:
      description: ''
      properties:
        directory:
          type: string
        file:
          $ref: '#/components/schemas/SeededFile'
        filters:
          $ref: '#/components/schemas/TLPDirectedDiscoveryFilters'
        fragment:
          $ref: '#/components/schemas/SeededFragment'
        metadata:
          $ref: '#/components/schemas/SeededAssetMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: DiscoveredAsset
      type: object
    DiscoveredAssets:
      description: This is a plural Model that is used within the bulk upload flow
        in both cases of a file(&& needing snippitization) as well as if the fragments
        are passed in and they only need to be clustered.
      properties:
        application:
          description: application id.
          type: string
        iterable:
          description: This is an iterable of already snippitized snippets that have
            been clustered.(These are assets that are going to be uploaded or at minimum
            the assets that we reccommend to upload)
          items:
            $ref: '#/components/schemas/DiscoveredAsset'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      - iterable
      title: DiscoveredAssets
      type: object
    DiscoveredHtmlWebpage:
      description: This will return assets that were extracted from the html webpage.
        This will contain the original url so you can double check the results wtih
        the results you passed in, but it will remain in the same order that it was
        passed in if used within the /discover/discover/html/webpage endpoint.
      properties:
        assets:
          $ref: '#/components/schemas/DiscoveredAssets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        url:
          type: string
      required:
      - assets
      - url
      title: DiscoveredHtmlWebpage
      type: object
    DiscoveredHtmlWebpages:
      description: 'Assumption: The iterable will be in the exact same order as it
        was passed in within the seededDiscoveredHtmlWebpages'
      properties:
        application:
          type: string
        iterable:
          items:
            $ref: '#/components/schemas/DiscoveredHtmlWebpage'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      - application
      title: DiscoveredHtmlWebpages
      type: object
    DiscoveredRelatedTag:
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/SeededTag'
      required:
      - seed
      title: DiscoveredRelatedTag
      type: object
    DiscoveredRelatedTags:
      properties:
        application:
          type: string
        iterable:
          items:
            $ref: '#/components/schemas/DiscoveredRelatedTag'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      - iterable
      title: DiscoveredRelatedTags
      type: object
    DiscoveredSensitive:
      description: This will return a discoveredSensitive, with a seed that can be
        used to create if automatic is set to false. and will provide the original
        text provided.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/SeededSensitive'
        text:
          type: string
      required:
      - seed
      - text
      title: DiscoveredSensitive
      type: object
    DiscoveredSensitives:
      description: ''
      properties:
        application:
          type: string
        iterable:
          items:
            $ref: '#/components/schemas/DiscoveredSensitive'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      - application
      title: DiscoveredSensitives
      type: object
    Distribution:
      description: 'This is a fully referenced version of a Distribution.

        TODO add additional distributions such as slack, google_chat, ...etc'
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        github:
          $ref: '#/components/schemas/GitHubDistribution'
        id:
          type: string
        mailgun:
          $ref: '#/components/schemas/MailgunDistribution'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        share:
          $ref: '#/components/schemas/FlattenedShare'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - share
      - created
      - updated
      title: Distribution
      type: object
      x-stoplight:
        id: caq7q8ojyajs0
    Distributions:
      description: This is the plural Model of a Distribution.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Distribution'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Distributions
      type: object
      x-stoplight:
        id: 4agjstjbuf6ep
    DocumentContributor:
      description: 'A DocumentContributor is a preseeded representation of a Person


        This can be used in the case of the browser, or in the IDE


        If they are apart of an IDE, we can in the future provide git information
        (IE add a Git object for their commits)


        person: this is most important part which is the email/name xyz'
      properties:
        classification:
          $ref: '#/components/schemas/Classification'
        person:
          $ref: '#/components/schemas/PersonBasicType'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        value:
          $ref: '#/components/schemas/TransferableString'
      required:
      - person
      title: DocumentContributor
      type: object
    DocumentContributors:
      description: This is a plural representation of the DocumentContributor
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/DocumentContributor'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: DocumentContributors
      type: object
    Edges:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Node'
          type: array
      required:
      - iterable
      title: Edges
      type: object
      x-stoplight:
        id: 704ijnbanupva
    EmbeddedModelSchema:
      description: This is a model that will keep track of all of our version related
        to our models. ie (1) the database migration and (2) the global semantic version
        of the api.
      properties:
        migration:
          description: this is the current database version that this model was used
            for.
          type: integer
        semantic:
          $ref: '#/components/schemas/EmbeddedModelSchemaSemanticVersionEnum'
      required:
      - migration
      - semantic
      title: EmbeddedModelSchema
      type: object
    EmbeddedModelSchemaSemanticVersionEnum:
      default: MAJOR_0_MINOR_0_PATCH_1
      description: This is a Semantic Version Enum that will reflect the Semantic
        version of the api.
      enum:
      - MAJOR_0_MINOR_0_PATCH_1
      readOnly: true
      title: EmbeddedModelSchemaSemanticVersionEnum
      type: string
    Embedding:
      description: ''
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        model:
          $ref: '#/components/schemas/Model'
        raw:
          description: this is the raw value of the embedding
          items:
            type: number
          type: array
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - raw
      - model
      - created
      - updated
      title: Embedding
      type: object
      x-stoplight:
        id: f3l28697sxs9f
    Embeddings:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
      required:
      - iterable
      title: Embeddings
      type: object
      x-stoplight:
        id: 30spxesy2yt3n
    EmbeddingsSearchOptions:
      description: 'similarity: this is optional from 0 - 1, (where 1 is exact and
        0 is everything)


        TODO consider a plural of types for running many embedding search scopes'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        type:
          $ref: '#/components/schemas/EmbeddingsSearchOptionsEmbeddingTypeEnum'
      required:
      - type
      title: FullTextSearchOptions
      type: object
    EmbeddingsSearchOptionsEmbeddingTypeEnum:
      description: TODO
      enum:
      - JINA
      - NCS
      title: EmbeddingsSearchOptionsTypeEnum
      type: string
    ExistentMetadata:
      description: 'This is a shared output model for all the exists endpoints:

        /tags/exists : value here is the tag that you want to see if it exists.

        /websites/exists: value here is the url you want to see if it exists'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          type: string
      required:
      - value
      title: ExistentMetadata
      type: object
      x-stoplight:
        id: jfgc4ry6zmlb4
    ExistingMetadata:
      description: 'This is a shared input model for all the exists endpoints:

        /tags/exists : if the tag exists you will have a defined tag:ReferencedTag,
        if not then it doesnt exist.

        /websites/exists: if the url exists you will have a defined website:ReferencedWebsite,
        if not then it doesnt exist.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tag:
          $ref: '#/components/schemas/ReferencedTag'
        website:
          $ref: '#/components/schemas/ReferencedWebsite'
      title: ExistingMetadata
      type: object
      x-stoplight:
        id: kp1smsnacffow
    ExportTypeEnum:
      description: This is the export type enum, that is the query param representation.
        That is linked to export_type.
      enum:
      - MD
      - HTML
      title: ExportTypeEnum
      type: string
      x-stoplight:
        id: e3vloq64xf0bx
    ExportedAsset:
      description: This is a model for a minimum exported version of an asset.
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        description:
          description: this is the description of the asset
          type: string
        name:
          description: 'this is the title of the asset

            '
          type: string
        raw:
          $ref: '#/components/schemas/FileFormat'
      required:
      - name
      - description
      - created
      - raw
      title: ExportedAsset
      type: object
      x-stoplight:
        id: ejp7e4pjtsw5j
    ExportedDatabase:
      properties:
        activities:
          items:
            type: integer
          type: array
        analyses:
          items:
            type: integer
          type: array
        anchorPoints:
          items:
            type: integer
          type: array
        anchors:
          items:
            type: integer
          type: array
        annotations:
          items:
            type: integer
          type: array
        applications:
          items:
            type: integer
          type: array
        assets:
          items:
            type: integer
          type: array
        codeAnalyses:
          items:
            type: integer
          type: array
        conversationMessages:
          items:
            type: integer
          type: array
        conversations:
          items:
            type: integer
          type: array
        files:
          items:
            type: integer
          type: array
        formatMetrics:
          items:
            type: integer
          type: array
        formats:
          items:
            type: integer
          type: array
        fragments:
          items:
            type: integer
          type: array
        hints:
          items:
            type: integer
          type: array
        imageAnalyses:
          items:
            type: integer
          type: array
        messageValues:
          $ref: '#/components/schemas/ExportedDatabaseFormats'
        models:
          items:
            type: integer
          type: array
        ocrAnalyses:
          items:
            type: integer
          type: array
        persons:
          items:
            type: integer
          type: array
        ranges:
          items:
            type: integer
          type: array
        relationships:
          items:
            type: integer
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sensitives:
          items:
            type: integer
          type: array
        tags:
          items:
            type: integer
          type: array
        values:
          $ref: '#/components/schemas/ExportedDatabaseFormats'
        version:
          description: This is the version of your os_server or cloud_server that
            we we exporting from.
          type: string
        websites:
          items:
            type: integer
          type: array
        workstreamEventValues:
          $ref: '#/components/schemas/ExportedDatabaseFormats'
        workstreamEvents:
          items:
            type: integer
          type: array
        workstreamSummaries:
          items:
            type: integer
          type: array
      required:
      - analyses
      - applications
      - assets
      - codeAnalyses
      - files
      - formatMetrics
      - formats
      - fragments
      - imageAnalyses
      - models
      - ocrAnalyses
      - persons
      - sensitives
      - tags
      - websites
      - values
      - version
      title: ExportedDatabase
      type: object
    ExportedDatabaseFormat:
      properties:
        id:
          description: this is the id of the format
          type: string
        raw:
          description: these are bytes.
          items:
            type: integer
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - raw
      title: ExportedDatabaseFormat
      type: object
    ExportedDatabaseFormats:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ExportedDatabaseFormat'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: ExportedDatabaseFormats
      type: object
    ExternalMLProviderEnum:
      description: This is a Model used for the Model class. This will be used to
        describe the provider in which this Mode lcam from IE meta, google, apple,
        ...etc
      enum:
      - APPLE
      - AMAZON
      - GOOGLE
      - META
      - OPENAI
      - LMSYS
      - SALESFORCE
      - HUGGING_FACE
      - UNIVERSITY_OF_WASHINGTON
      - OPEN_LM_RESEARCH
      - MICROSOFT
      - UC_BERKLEY
      - PEKING_UNIVERSITY
      - RENMIN_UNIVERSITY_OF_CHINA
      - TOGETHER_AI
      - DATABRICKS
      - ELEUTHER_AI
      - FUDAN_UNIVERSITY
      - BLICKDL
      - HONG_KONG_BAPTIST_UNIVERSITY
      - BIGCODE
      - JINA
      - PIECES
      - ANTHROPIC
      - IBM
      - SNOWFLAKE
      - PERPLEXITY
      title: ExternalMLProviderEnum
      type: string
    ExternalProvider:
      description: I know that profileData and user_id have differeing casing but
        they are done because they map to Auth0's projeecties.
      properties:
        access_token:
          description: This is optional here, but will be present for BB, Github,
            and google.
          type: string
        connection:
          description: This is an optional field that will be provided onentreprise
            connections. ie is type == waad then connection might be PiecesApp. However
            is other cases,you my find your provider and connection is the exact same
            string. To decifer between the two, you can use the isSocial bool.
          type: string
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        expires_in:
          description: Some providers have an expiration on their access token. IE
            BB, Google, NOT Github.
          type: integer
        isSocial:
          type: boolean
        profileData:
          $ref: '#/components/schemas/ExternalProviderProfileData'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/ExternalProviderTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        user_id:
          description: This is the user_id within the provider.
          type: string
      required:
      - type
      - user_id
      - created
      - updated
      title: ExternalProvider
      type: object
      x-stoplight:
        id: nn8vtdsit4kpg
    ExternalProviderProfileData:
      description: 'All of these will be optional.


        Will support ProfileData from all our social providers.'
      properties:
        anchor:
          type: string
        bio:
          type: string
        blog:
          type: string
        collaborators:
          type: integer
        company:
          type: string
        created_at:
          type: string
        disk_usage:
          type: integer
        email:
          type: string
        email_verified:
          type: boolean
        events_url:
          type: string
        followers:
          type: integer
        followers_url:
          type: string
        following:
          type: integer
        following_url:
          type: string
        gists_url:
          type: string
        gravatar_id:
          type: string
        hireable:
          type: boolean
        html_url:
          type: string
        name:
          type: string
        nickname:
          type: string
        node_id:
          type: string
        organizations_url:
          type: string
        owned_private_repos:
          type: integer
        picture:
          type: string
        private_gists:
          type: integer
        public_gists:
          type: integer
        public_repos:
          type: integer
        received_events_url:
          type: string
        repos_url:
          type: string
        site_admin:
          type: boolean
        starred_url:
          type: string
        subscriptions_url:
          type: string
        total_private_repos:
          type: integer
        twitter_username:
          type: string
        two_factor_authentication:
          type: boolean
        type:
          type: string
        updated_at:
          type: string
        url:
          type: string
      title: ExternalProviderProfileData
      type: object
      x-stoplight:
        id: tcbvq2kcc81aw
    ExternalProviderTypeEnum:
      description: 'This is an enum to describe the provider used to authenticate
        a user.


        IMPORTANT NOT to modify tha values here unless they are explicitly mapped
        with auth0''s provider values(example within cloud server)


        ''waad'': (windows azure active directory)'
      enum:
      - github
      - auth0
      - google-oauth2
      - bitbucket
      - linkedin
      - twitter
      - facebook
      - waad
      title: ExternalProviderTypeEnum
      type: string
      x-stoplight:
        id: 8f8qns992xodh
    ExternalProviders:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ExternalProvider'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: ExternalProviders
      type: object
      x-stoplight:
        id: p3i8qgeqjc725
    ExternallySourcedEnum:
      description: This is an enum that will highlight something that is externally
        sourced.
      enum:
      - TWITTER
      - MEDIUM
      - LINKED_IN
      - INSTAGRAM
      - FACEBOOK
      - REDDIT
      - DISCORD
      - BIT_BUCKET
      - GIT_LAB
      - GIT_HUB
      - SLACK
      - MAILGUN
      title: ExternallySourcedEnum
      type: string
    FileFormat:
      description: This describes a FileFormat. If you need meta data you can get
        all of that from your format wrapper.
      properties:
        bytes:
          $ref: '#/components/schemas/TransferableBytes'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        string:
          $ref: '#/components/schemas/TransferableString'
      title: FileFormat
      type: object
    FileMetadata:
      description: This is a model for metadata of a file!
      properties:
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        name:
          description: This is the name of your file.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        size:
          description: This is the size(in bytes)
          type: integer
      title: FileMetadata
      type: object
    FilePickerInput:
      description: This is the input model for the FilePicker
      properties:
        allowMultiple:
          description: default behavior is set to true
          type: boolean
        allowedExtensions:
          items:
            type: string
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: FilePickerInput
      type: object
    FilterOperationTypeEnum:
      enum:
      - AND
      - OR
      title: FilterOperationTypeEnum
      type: string
    FlattenedActivities:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedActivity'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: FlattenedActivities
      type: object
      x-stoplight:
        id: q92gb162zwy4b
    FlattenedActivity:
      description: 'Note:

        - if mechanism == internal we will not display to the user.'
      properties:
        application:
          $ref: '#/components/schemas/Application'
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        event:
          $ref: '#/components/schemas/SeededConnectorTracking'
        format:
          $ref: '#/components/schemas/ReferencedFormat'
        id:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        rank:
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        user:
          $ref: '#/components/schemas/FlattenedUserProfile'
      required:
      - id
      - created
      - updated
      - event
      - application
      - mechanism
      title: FlattenedActivity
      type: object
      x-stoplight:
        id: dqv65k45a0c41
    FlattenedAnalysis:
      properties:
        code:
          $ref: '#/components/schemas/CodeAnalysis'
        format:
          description: this is a reference to the format that it belongs too.
          type: string
        id:
          type: string
        image:
          $ref: '#/components/schemas/FlattenedImageAnalysis'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - format
      title: FlattenedAnalysis
      type: object
    FlattenedAnchor:
      properties:
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        name:
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        points:
          $ref: '#/components/schemas/FlattenedAnchorPoints'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        type:
          $ref: '#/components/schemas/AnchorTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        watch:
          type: boolean
      required:
      - id
      - type
      - text
      - created
      - updated
      - points
      title: FlattenedAnchor
      type: object
      x-stoplight:
        id: 4367412a54ecf
    FlattenedAnchorPoint:
      properties:
        anchor:
          $ref: '#/components/schemas/ReferencedAnchor'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        fullpath:
          description: This is the text of the path.
          type: string
        id:
          type: string
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        verified:
          type: boolean
      required:
      - id
      - fullpath
      - created
      - updated
      - anchor
      title: FlattenedAnchorPoint
      type: object
      x-stoplight:
        id: pknq786r5d1xd
    FlattenedAnchorPoints:
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an AnchorPoint
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedAnchorPoint'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedAnchorPoints
      type: object
      x-stoplight:
        id: 5pm9cxk2bywwe
    FlattenedAnchors:
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an Anchor id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedAnchor'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedAnchors
      type: object
    FlattenedAnnotation:
      description: 'This is the flattened Version of the annotation, IMPORTANT: when
        referencing these, ONLY Take the UUID, do NOT polinate(ie w/ asset/person/model)
        the FlattenedAnnotation as it can create an infinite loop.'
      properties:
        anchor:
          $ref: '#/components/schemas/ReferencedAnchor'
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        favorited:
          type: boolean
        id:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          $ref: '#/components/schemas/ReferencedModel'
        person:
          $ref: '#/components/schemas/ReferencedPerson'
        pseudo:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summary:
          $ref: '#/components/schemas/ReferencedWorkstreamSummary'
        text:
          description: This is the text of the annotation.
          type: string
        type:
          $ref: '#/components/schemas/AnnotationTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      - type
      - text
      title: FlattenedAnnotation
      type: object
      x-stoplight:
        id: 32nrkjic26cqi
    FlattenedAnnotations:
      description: This is a flattened plural of Annotation, typically this will just
        be a list of uuids.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an annotation
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedAnnotation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedAnnotations
      type: object
      x-stoplight:
        id: 5mqga30ecdyra
    FlattenedAsset:
      description: 'An Asset Model representing data extracted from an Application
        connecting a group of data containing one or more Formats. [DAG Compatible
        - Directed Acyclic Graph Data Structure]


        FlattenedAsset prevent Cycles in Reference because all outbound references
        are strings as opposed to crosspollinated objects.


        i.e. FlattenedFormat.preview is Type String, and

        FlattenedFormat.original is Type String'
      properties:
        activities:
          $ref: '#/components/schemas/FlattenedActivities'
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        creator:
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: string
        curated:
          description: This is an optional boolean that will flag that this asset
            came from a currated collection.
          type: boolean
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        demo:
          description: This will let us know if this asset was generated as a 'demo'
            snippet
          type: boolean
        discovered:
          type: boolean
        favorited:
          type: boolean
        formats:
          $ref: '#/components/schemas/FlattenedFormats'
        hints:
          $ref: '#/components/schemas/FlattenedHints'
        id:
          description: The globally available UID representing the asset in the Database,
            both locally and in the cloud.
          example: 2254f2c8-5797-40e8-ac56-41166dc0e159
          type: string
        interacted:
          $ref: '#/components/schemas/GroupedTimestamp'
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        name:
          type: string
        original:
          description: An identifier of the format that is a reference to the original.
          example: 0872ccbf-1d8f-4f46-9028-469794d72761
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        preview:
          $ref: '#/components/schemas/FlattenedPreview'
        pseudo:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        sensitives:
          $ref: '#/components/schemas/FlattenedSensitives'
        shares:
          $ref: '#/components/schemas/FlattenedShares'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        synced:
          $ref: '#/components/schemas/GroupedTimestamp'
        tags:
          $ref: '#/components/schemas/FlattenedTags'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - creator
      - created
      - updated
      - formats
      - preview
      - original
      - mechanism
      title: FlattenedAsset [DAG Safety]
      type: object
    FlattenedAssetReferencedFormats:
      description: 'A collection of Formats specific to a Asset instance. [DAG Compatible
        - Directed Acyclic Graph Data Structure]


        FlattenedFormats prevent Cycles in Reference because all outbound references
        are strings as opposed to crosspollinated objects.


        i.e. ReferencedFormat format = FlattenedFormats.iterable[0] => FlattenedAsset
        asset = format.reference => String id = asset.format => String id


        i.e. ReferencedAsset asset = FlattenedFormats.asset => FlattenedAsset asset
        = asset.reference => String id = asset.formats[0] => String id


        i.e. ReferencedAsset asset = FlattenedFormats.asset => FlattenedAsset asset
        = asset.reference => String id = asset.preview => String id


        i.e. ReferencedAsset asset = FlattenedFormats.asset => FlattenedAsset asset
        = asset.reference => String id = asset.original => String id'
      properties:
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedFormat'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - asset
      title: FlattenedAssetReferencedFormats [DAG Saftey]
      type: object
    FlattenedAssets:
      description: 'A collection of Assets specific to the authenticated user. [DAG
        Compatible - Directed Acyclic Graph Data Structure]


        FlattenedAssets prevent Cycles in Reference because all outbound references
        are strings as opposed to crosspollinated objects.


        i.e. Asset asset = FlattenedAssets.iterable[0] => Format format = asset.preview
        => String id = format.asset => String id'
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an asset id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedAsset'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      title: FlattenedAssets [DAG Safety]
      type: object
    FlattenedConversation:
      description: 'This is a flattened version of the Convsersation for DAG-Safety.


        This will hold together a conversation. Ie all the message within a conversation.


        All the additional properties on here used on here like(anchors/assets) are
        used for context that will seed the conversation.


        model is a calculated property, and will be the model of the last message
        sent if applicable.


        summaries: on the top level here will simply be used to associate a conversation
        and a summary(this is not used for grounding), grounding.summaries will be
        used for this.(TODO)'
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        application:
          $ref: '#/components/schemas/Application'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        demo:
          description: This will let us know if this conversation was generated as
            a 'demo' conversation
          type: boolean
        favorited:
          type: boolean
        grounding:
          $ref: '#/components/schemas/ConversationGrounding'
        id:
          type: string
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          $ref: '#/components/schemas/ReferencedModel'
        name:
          description: This is a name that is customized.
          type: string
        pipeline:
          $ref: '#/components/schemas/QGPTPromptPipeline'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        type:
          $ref: '#/components/schemas/ConversationTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - messages
      - type
      title: FlattenedConversation
      type: object
      x-stoplight:
        id: w3ufda6vw6bms
    FlattenedConversationMessage:
      description: This is a flattened DAG safe version of a ConversationMessage.
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        fragment:
          $ref: '#/components/schemas/FragmentFormat'
        id:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        role:
          $ref: '#/components/schemas/QGPTConversationMessageRoleEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        sentiment:
          $ref: '#/components/schemas/ConversationMessageSentimentEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - conversation
      - role
      title: FlattenedConversationMessage
      type: object
    FlattenedConversationMessages:
      description: This is a flattened plural version of ConversationMessages
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an ConversationMessage
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedConversationMessage'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedConversationMessages
      type: object
      x-stoplight:
        id: 977f9dafbb69d
    FlattenedConversations:
      description: Flattened version of conversations.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an Conversation
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedConversation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedConversations
      type: object
      x-stoplight:
        id: 5i042z6tvzgdt
    FlattenedDistribution:
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        github:
          $ref: '#/components/schemas/GitHubDistribution'
        id:
          type: string
        mailgun:
          $ref: '#/components/schemas/MailgunDistribution'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        share:
          description: This is the UUId of the share.
          type: string
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - share
      - created
      - updated
      title: FlattenedDistribution
      type: object
      x-stoplight:
        id: 6y3ky3aquxues
    FlattenedDistributions:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedDistribution'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: FlattenedDistributions
      type: object
      x-stoplight:
        id: v6milr4lyc2m5
    FlattenedFormat:
      description: 'A representation of Data for a particular Form Factor of an Asset.[DAG
        Compatible - Directed Acyclic Graph Data Structure]


        FlattenedFormats prevent Cycles in Reference because all outbound references
        are strings as opposed to crosspollinated objects.


        i.e. FlattenedFormat.asset is Type String


        fragment or file will always be defined. Even thought they are both optional.'
      properties:
        activities:
          $ref: '#/components/schemas/FlattenedActivities'
        analysis:
          $ref: '#/components/schemas/FlattenedAnalysis'
        application:
          $ref: '#/components/schemas/Application'
        asset:
          $ref: '#/components/schemas/UniversalUniqueIdentifier'
        bytes:
          $ref: '#/components/schemas/ByteDescriptor'
        classification:
          $ref: '#/components/schemas/Classification'
        cloud:
          description: This is a path used to determine what path this format lives
            at within the cloud.
          type: string
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        creator:
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: string
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        file:
          $ref: '#/components/schemas/FileFormat'
        fragment:
          $ref: '#/components/schemas/FragmentFormat'
        icon:
          type: string
        id:
          example: 102ff265-fdfb-4142-8d94-4932d400199c
          type: string
        relationship:
          $ref: '#/components/schemas/Relationship'
        role:
          $ref: '#/components/schemas/Role'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        synced:
          $ref: '#/components/schemas/GroupedTimestamp'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - creator
      - classification
      - role
      - application
      - asset
      - bytes
      - created
      - updated
      title: FlattenedFormat [DAG Safety]
      type: object
    FlattenedFormats:
      description: 'A collection of Formats specific to the authenticated user. [DAG
        Compatible - Directed Acyclic Graph Data Structure]


        FlattenedFormats prevent Cycles in Reference because all outbound references
        are strings as opposed to crosspollinated objects.

        '
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedFormat'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: FlattenedFormats
      type: object
    FlattenedHint:
      description: This is the flattened version of a hint. Ensure that you DO NOT
        reference the Asset here as you can create an infinite loop within the packaging.
      properties:
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        model:
          $ref: '#/components/schemas/ReferencedModel'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        text:
          description: This is the text of the hint.
          type: string
        type:
          $ref: '#/components/schemas/HintTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      - type
      - text
      title: FlattenedHint
      type: object
    FlattenedHints:
      description: This is the flattened Version of plural hints.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an hint id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedHint'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedHints
      type: object
      x-stoplight:
        id: dyq0bxmzbqrt0
    FlattenedImageAnalysis:
      properties:
        analysis:
          description: this is a reference to our (parent)analysis
          type: string
        id:
          type: string
        ocr:
          $ref: '#/components/schemas/FlattenedOCRAnalysis'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - analysis
      title: FlattenedImageAnalysis
      type: object
    FlattenedOCRAnalysis:
      description: '[DAG Safe] Ocr Analysis that will reference FlattenedFormats.'
      properties:
        hocr:
          $ref: '#/components/schemas/ReferencedFormat'
        id:
          type: string
        image:
          description: this is a refernece to the image analysis.
          type: string
        model:
          $ref: '#/components/schemas/Model'
        raw:
          $ref: '#/components/schemas/ReferencedFormat'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - raw
      - hocr
      - model
      - image
      title: FlattenedOCRAnalysis
      type: object
    FlattenedPerson:
      description: 'if expiration is add then, after the alloted expiration date the
        user will only have view && comment only permissions. Only present in the
        case there is a scope such as a defined collection/asset...


        if asset is passed then that means this person belongs to a scoped asset.'
      properties:
        access:
          additionalProperties:
            $ref: '#/components/schemas/PersonAccess'
          description: This is a Map<String, PersonAccess> where the the key is an
            asset id.
          type: object
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        models:
          additionalProperties:
            $ref: '#/components/schemas/PersonModel'
          description: This is a Map<String, PersonModel>, where the the key is an
            asset id.
          type: object
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        tags:
          $ref: '#/components/schemas/FlattenedTags'
        type:
          $ref: '#/components/schemas/PersonType'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - type
      title: FlattenedPerson
      type: object
    FlattenedPersons:
      description: This is the plural of Person. will have top level meta about the
        person including an iterable of all the person.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an person id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedPerson'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedPersons
      type: object
    FlattenedPreview:
      description: These are the references of the formats **Only UUIDS**
      properties:
        base:
          description: this is a reference(uuid) to the base format
          type: string
        overlay:
          description: this is a reference(uuid) to the overlay format
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - base
      title: FlattenedPreview
      type: object
    FlattenedRange:
      description: This is a DAG-Safe minimal representation of a Range.
      properties:
        between:
          type: boolean
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        from:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        to:
          $ref: '#/components/schemas/GroupedTimestamp'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      title: FlattenedRange
      type: object
    FlattenedRanges:
      description: This is a DAG-Safe minimal representation of many Ranges.
      properties:
        continuous:
          type: boolean
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an range id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedRange'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedRanges
      type: object
    FlattenedReferences:
      description: This is the plural of given arbitrary material. (used in flattenedMaterials)
        to keep references shallow
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an Reference
            id.
          type: object
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedReferences
      type: object
    FlattenedSensitive:
      description: This is a dereferenced representation of a sensitive pieces of
        data.
      properties:
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        category:
          $ref: '#/components/schemas/SensitiveCategoryEnum'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        description:
          type: string
        id:
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        metadata:
          $ref: '#/components/schemas/SensitiveMetadata'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        severity:
          $ref: '#/components/schemas/SensitiveSeverityEnum'
        text:
          type: string
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      - asset
      - text
      - mechanism
      - category
      - severity
      - name
      - description
      title: FlattenedSensitive
      type: object
    FlattenedSensitives:
      description: This is a flattened representation of multiple sensitive pieces
        of data.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedSensitive'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedSensitives
      type: object
    FlattenedShare:
      description: 'This is a dag safe version of the Share.


        if user is undefined && access is public then we have an asset that is publicly
        available.'
      properties:
        access:
          $ref: '#/components/schemas/AccessEnum'
        accessors:
          $ref: '#/components/schemas/Accessors'
        asset:
          description: this is the asset id on the flattened share.
          type: string
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        distributions:
          $ref: '#/components/schemas/FlattenedDistributions'
        id:
          description: This references the share it self.
          type: string
        link:
          description: this is the prebuilt link.
          type: string
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        short:
          description: This is a shortened version of our uuid.
          type: string
        user:
          description: this is the uuid of the user that the share is created for.
          type: string
      required:
      - id
      - link
      - access
      - accessors
      - created
      - short
      title: FlattenedShare [DAG SAFE]
      type: object
    FlattenedShares:
      description: This is just an iterable of our individual share models.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/FlattenedShare'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedShares [DAG Safe]
      type: object
    FlattenedTag:
      description: This is a Flattened Version of a Tag.
      properties:
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        category:
          $ref: '#/components/schemas/TagCategoryEnum'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        relationship:
          $ref: '#/components/schemas/Relationship'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        text:
          type: string
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - text
      - created
      - updated
      - category
      title: FlattenedTag
      type: object
    FlattenedTags:
      description: This is multiple ReferencedTags(which includes an optional FlattenedTag
        Model within the reference model).
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an tag id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedTag'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedTags
      type: object
    FlattenedUserProfile:
      description: This is a FlattenedUserProfile that includes information that is
        not sensative in relation to a user.
      properties:
        email:
          type: string
        id:
          description: this is the uuid that identifies a user.
          type: string
        name:
          type: string
        picture:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        username:
          type: string
        vanityname:
          type: string
      required:
      - id
      title: FlattenedUserProfile
      type: object
    FlattenedWebsite:
      description: This is a specific model for related websites to an asset.[DAG
        SAFE]
      properties:
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          description: this is aspecific uuid that represents
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        name:
          description: A customizable name.
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        url:
          description: The true url or the website.
          type: string
      required:
      - id
      - name
      - url
      - created
      - updated
      title: FlattenedWebsite
      type: object
    FlattenedWebsites:
      description: This is a specific model for related websites to an asset.[DAG
        SAFE]
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an website
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedWebsite'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedWebsites
      type: object
    FlattenedWorkstreamEvent:
      description: This is a singular (DAG Safe) version of a WorkstreamEvent.
      properties:
        application:
          $ref: '#/components/schemas/Application'
        context:
          $ref: '#/components/schemas/WorkstreamEventContext'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        trigger:
          $ref: '#/components/schemas/WorkstreamEventTrigger'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - application
      - created
      - updated
      - trigger
      title: FlattenedWorkstreamEvent
      type: object
      x-stoplight:
        id: g8wpws7lz5lv2
    FlattenedWorkstreamEvents:
      description: This is a plural (DAG Safe) version of a WorkstreamEvents.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an activity
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedWorkstreamEvent'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedWorkstreamEvents
      type: object
      x-stoplight:
        id: buujg5xpzxgcs
    FlattenedWorkstreamPatternEngineVisionEvent:
      description: 'This is a flattened version of the WorkstreamPatternEngineVisionEvent,
        where the referenced to other materials are also flattened(DAG Safe)


        Note: TODO later add textual and need to correspond w/ both transferables
        as well as the FlattenedMaterial'
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - created
      title: FlattenedWorkstreamPatternEngineVisionEvent
      type: object
    FlattenedWorkstreamPatternEngineVisionEvents:
      description: This is a plural snapshot of all of the events within WPE qdrant(Referenced)
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedWorkstreamPatternEngineVisionEvent'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: FlattenedWorkstreamPatternEngineVisionEvents
      type: object
    FlattenedWorkstreamSummaries:
      description: This is a DAG-Safe plural model of workstreamsummaries
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an summary
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/ReferencedWorkstreamSummary'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: FlattenedWorkstreamSummaries
      type: object
      x-stoplight:
        id: xxx1hpsbv6w3y
    FlattenedWorkstreamSummary:
      description: This is a DAG-Safe minimal representation of a workstream summary
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        applications:
          $ref: '#/components/schemas/Applications'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        events:
          $ref: '#/components/schemas/FlattenedWorkstreamEvents'
        id:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        ranges:
          $ref: '#/components/schemas/FlattenedRanges'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - name
      - range
      - model
      title: FlattenedWorkstreamSummary
      type: object
      x-stoplight:
        id: y01qg0gqojy6q
    Font:
      description: This will describe the font that the user sees.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        size:
          type: integer
      required:
      - size
      title: Font
      type: object
    Format:
      description: 'A representation of Data for a particular Form Factor of an Asset.


        Below asset HAS to be Flattened because it is a leaf node and must prevent
        cycles agressively.'
      properties:
        activities:
          $ref: '#/components/schemas/Activities'
        analysis:
          $ref: '#/components/schemas/Analysis'
        application:
          $ref: '#/components/schemas/Application'
        asset:
          $ref: '#/components/schemas/FlattenedAsset'
        bytes:
          $ref: '#/components/schemas/ByteDescriptor'
        classification:
          $ref: '#/components/schemas/Classification'
        cloud:
          description: This is a path used to determine what path this format lives
            at within the cloud.
          type: string
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        creator:
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: string
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        file:
          $ref: '#/components/schemas/FileFormat'
        fragment:
          $ref: '#/components/schemas/FragmentFormat'
        icon:
          type: string
        id:
          example: 102ff265-fdfb-4142-8d94-4932d400199c
          type: string
        relationship:
          $ref: '#/components/schemas/Relationship'
        role:
          $ref: '#/components/schemas/Role'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        synced:
          $ref: '#/components/schemas/GroupedTimestamp'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - creator
      - classification
      - role
      - application
      - asset
      - bytes
      - created
      - updated
      title: Format
      type: object
    FormatMetric:
      description: 'FormatMetric


        This is a model that will represent the about of specific formats. ie Generic:
        ''CODE'' specific: ''DART'' identifiers: [''FormatUID1, ''FormatUID2'']'
      properties:
        generic:
          $ref: '#/components/schemas/ClassificationGenericEnum'
        identifiers:
          description: this is a list of format ids
          items:
            type: string
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        specific:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
      required:
      - generic
      - specific
      - identifiers
      title: FormatMetric
      type: object
    FormatReclassification:
      description: This is a model that will represent the miminum properties required
        to update the classification of this format.
      properties:
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        format:
          $ref: '#/components/schemas/Format'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - ext
      - format
      title: FormatReclassification
      type: object
    Formats:
      description: A base class for a collection of formats and some additional meta
        properties.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Format'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Formats
      type: object
    FormatsMetrics:
      description: ''
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/FormatMetric'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: FormatsMetrics
      type: object
    FragmentFormat:
      description: This will be either a TransferableString or TransferableBytes that
        represent your fragment. ONLY Pass one or the other DONT pass both or neither.
      properties:
        bytes:
          $ref: '#/components/schemas/TransferableBytes'
        metadata:
          $ref: '#/components/schemas/FragmentMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        string:
          $ref: '#/components/schemas/TransferableString'
      title: FragmentFormat
      type: object
    FragmentMetadata:
      description: This is a model for metadata of a file!
      properties:
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: FragmentMetadata
      type: object
    FullTextSearchOptions:
      description: 'similarity: you will want to pass in a value from 0-1. (where
        1 is exact and 0 is everything)


        exact: (optional) this will default to false, which will run a fuzzy search,
        unless set to true.'
      properties:
        exact:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          nullable: true
          type: number
      title: FullTextSearchOptions
      type: object
    GitHubDistribution:
      properties:
        gist:
          $ref: '#/components/schemas/GitHubGistDistribution'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: GitHubDistribution
      type: object
      x-stoplight:
        id: z75okvxt8sfwq
    GitHubGistDistribution:
      description: This is a published Github Gist.
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        description:
          description: This is the description of the Gist Distribution
          type: string
        github_id:
          description: This is the id that github uses to represent the gist.
          type: string
        name:
          description: This is the name of the gist you will add.
          type: string
        public:
          description: This will let us know if the gist is public or private.
          type: boolean
        recipients:
          $ref: '#/components/schemas/Recipients'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        url:
          description: This is the url where the gist is.
          type: string
      required:
      - recipients
      - public
      - name
      - created
      - updated
      - github_id
      - url
      title: GitHubGistDistribution
      type: object
      x-stoplight:
        id: 472670b33d47b
    GoogleRpcPreconditionFailure:
      description: Describes what preconditions have failed. For example, if an RPC
        failed because it required the Terms of Service to be acknowledged, it could
        list the terms of service violation in the PreconditionFailure message.
      properties:
        violations:
          description: Describes all precondition violations.
          items:
            $ref: '#/components/schemas/GoogleRpcPreconditionFailureViolation'
          type: array
      type: object
    GoogleRpcPreconditionFailureViolation:
      description: A message type used to describe a single precondition failure.
      properties:
        description:
          description: 'A description of how the precondition failed. Developers can
            use this description to understand how to fix the failure. For example:
            "Terms of service not accepted".'
          type: string
        subject:
          description: The subject, relative to the type, that failed. For example,
            "google.com/cloud" relative to the "TOS" type would indicate which terms
            of service is being referenced.
          type: string
        type:
          description: The type of PreconditionFailure. We recommend using a service-specific
            enum type to define the supported precondition violation subjects. For
            example, "TOS" for "Terms of Service violation".
          type: string
      type: object
    GraphicalImageDescriptiveStatistics:
      description: Model for collecting descriptive statistics of images uploaded
        to Pieces
      properties:
        asset:
          type: string
        channels:
          type: string
        created:
          type: string
        height:
          type: string
        os:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          type: string
        width:
          type: string
      required:
      - width
      - height
      - channels
      - asset
      - created
      - os
      title: GraphicalImageDescriptiveStatistics
      type: object
    GraphicalImageProcessing:
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        statistics:
          $ref: '#/components/schemas/GraphicalImageStatistics'
      title: GraphicalImageProcessing
      type: object
    GraphicalImageStatistics:
      properties:
        descriptive:
          $ref: '#/components/schemas/GraphicalImageDescriptiveStatistics'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: GraphicalImageStatistics
      type: object
    GraphicalMachineLearningProcessingEvent:
      properties:
        image:
          $ref: '#/components/schemas/GraphicalImageProcessing'
        ocr:
          $ref: '#/components/schemas/GraphicalOCRProcessing'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        svg:
          $ref: '#/components/schemas/GraphicalSVGStatistics'
      title: GraphicalMachineLearningProcessingEvent
      type: object
    GraphicalOCRDescriptiveStatistics:
      description: Model for monitoring and evaluating the OCR feature
      properties:
        asset:
          type: string
        confidence:
          properties:
            mean:
              type: string
          required:
          - mean
          type: object
        created:
          type: string
        duration:
          type: string
        model:
          type: string
        os:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          type: string
      required:
      - asset
      - user
      - model
      - created
      - os
      - confidence
      - duration
      title: GraphicalOCRDescriptiveStatistics
      type: object
    GraphicalOCRProcessing:
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        statistics:
          $ref: '#/components/schemas/GraphicalOCRStatistics'
      title: GraphicalOCRProcessing
      type: object
    GraphicalOCRStatistics:
      properties:
        descriptive:
          $ref: '#/components/schemas/GraphicalOCRDescriptiveStatistics'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: GraphicalOCRStatistics
      type: object
    GraphicalSVGStatistics:
      properties:
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: GraphicalSVGStatistics
      type: object
    GroupedTimestamp:
      description: A helper classs to wrap Date-Time Values with Useful Helper Properties
      properties:
        readable:
          example: Last week - June 3rd, 3:33 a.m.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          format: date-time
          type: string
      required:
      - value
      title: GroupedTimestamp
      type: object
    Health:
      description: This is a health model used to determine the "health" of the os
        server and cloud server(Coming Soon). READONLY Model.
      properties:
        os:
          $ref: '#/components/schemas/OSHealth'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      readOnly: true
      required:
      - os
      title: Health
      type: object
    Hint:
      description: This is a hint that is attached to an asset, used for suggested_queries,
        and hints given via the qgpt flow.
      properties:
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        model:
          $ref: '#/components/schemas/ReferencedModel'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        text:
          description: This is the text of the hint.
          type: string
        type:
          $ref: '#/components/schemas/HintTypeEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      - type
      - text
      title: Hint
      type: object
    HintTypeEnum:
      description: This is the hint enum used to describe a type of hint.
      enum:
      - SUGGESTED_QUERY
      - QGPT_HINT
      title: HintTypeEnum
      type: string
      x-stoplight:
        id: w0w3hcnkp097y
    Hints:
      description: This is the plural of a Hint.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an hint id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Hint'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Hints
      type: object
      x-stoplight:
        id: wfmw2qozhwlhv
    IDESelection:
      description: 'This is a given bit of text/code that is selected in the IDE,
        this can be a copy/paste/selection


        location: this is the given location provided by the LSP(might need to be
        a different object we will see)'
      properties:
        classification:
          $ref: '#/components/schemas/Classification'
        location:
          $ref: '#/components/schemas/LanguageServerProtocolLocation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          $ref: '#/components/schemas/TransferableString'
      title: IDESelection
      type: object
    IDESelections:
      description: Plural model that represent many selections in the browser
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/IDESelection'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: IDESelections
      type: object
    IDETab:
      description: 'This is a representation of an IDE Tab


        value: is the value of the entire file(that being said we do not recomment
        passing this over as we can read this file on PieceOS side of things)

        classification: this is the classifcation of this file


        selection: this is a represention of a copy/paste/selection of a bit of code


        anchor: this is the file path


        range: this is the duration that this user has been on this Tab


        current: is a boolean that will let us know if this is the current active
        tab


        contributors: is the people that are extracted via git


        lsp: this is the languageserverprotocol this is used for may things such as
        error,stackstrces, mainly information extracted from the lang server'
      properties:
        anchor:
          $ref: '#/components/schemas/SeededAnchor'
        classification:
          $ref: '#/components/schemas/Classification'
        contributors:
          $ref: '#/components/schemas/DocumentContributors'
        current:
          type: boolean
        lsp:
          $ref: '#/components/schemas/LanguageServerProtocol'
        range:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        selections:
          $ref: '#/components/schemas/IDESelections'
        value:
          $ref: '#/components/schemas/TransferableString'
      required:
      - anchor
      title: IDETab
      type: object
    IDETabs:
      description: This is a plural representation of a IDETab
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/IDETab'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: IDETabs
      type: object
    ImageAnalyses:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ImageAnalysis'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: ImageAnalyses
      type: object
    ImageAnalysis:
      description: This is a model that represents all the information collected during
        the processing of an image.
      properties:
        analysis:
          description: this is a reference to the analysis.
          type: string
        id:
          description: this is a uuid that represents a imageAnalysis.
          type: string
        ocr:
          $ref: '#/components/schemas/OCRAnalysis'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - analysis
      title: ImageAnalysis
      type: object
    InactiveOSServerApplet:
      description: 'Note: parent is optional here in the case that (parent here is
        the integration that wants the module launched(VSCode))'
      properties:
        parent:
          $ref: '#/components/schemas/Application'
        port:
          description: This is the port number in which we want to serve the copilot
            at.
          nullable: true
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/OSAppletEnum'
      required:
      - type
      title: InactiveOSServerApplet
      type: object
    InteractedAsset:
      description: 'A model that represents an asset that has been interacted with. '
      properties:
        asset:
          $ref: '#/components/schemas/UniversalUniqueIdentifier'
        interactions:
          properties:
            scrolled:
              default: false
              description: If the user scrolled over the asset.
              type: boolean
            touched:
              default: false
              description: If the user touched or panned over the asset.
              type: boolean
            viewed:
              description: https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
              format: duration
              pattern: P[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss]
              type: string
          required:
          - viewed
          type: object
      title: InteractedAsset
      type: object
    InteractedAssets:
      description: A model which contains a list of InteractedAssets with potentially
        additional properties.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/InteractedAsset'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: InteractedAssets
      type: object
    InvalidatedPKCE:
      description: 'A model to support https://auth0.com/docs/api/authentication#logout

        '
      properties:
        client_id:
          description: The client_id of your application.
          type: string
        federated:
          default: true
          description: 'Add this query string parameter to the logout URL, to log
            the user out of their identity provider, as well: https://pieces.us.auth0.com/v2/logout?federated.'
          type: boolean
        returnTo:
          description: URL to redirect the user after the logout. If you want to navigate
            the user to a specific URL after the logout, set that URL at the returnTo
            parameter. The URL should be included in any the appropriate Allowed Logout
            URLs list.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: InvalidatedPKCE
      type: object
    IsCode:
      description: If something is code
      properties:
        asset:
          description: ''
          properties:
            reference:
              $ref: '#/components/schemas/ReferencedAsset'
            seed:
              $ref: '#/components/schemas/SeededAsset'
          required:
          - seed
          - reference
          type: object
        code:
          default: true
          description: If is Code.
          type: boolean
        confidence:
          example: 0.98
          format: double
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - asset
      - code
      - confidence
      title: IsCode
      type: object
    IsCodeReturnable:
      description: Strongly typed returnable class from the IsCode text classifier.
      properties:
        is_code:
          type: boolean
        normalized:
          description: this is the string right before tokenization.
          type: string
        probability:
          type: number
        tokens:
          description: this is the tokenized representation of the string.
          items:
            type: number
          type: array
      required:
      - is_code
      - probability
      - normalized
      - tokens
      title: IsCodeReturnable
      type: object
    LanguageClassifierDistribution:
      description: Probability distribution model for the LanguageClassifierReturnable
        model.
      properties:
        asp:
          type: number
        bat:
          type: number
        c:
          type: number
        cfm:
          type: number
        clj:
          type: number
        coffee:
          type: number
        cpp:
          type: number
        cs:
          type: number
        css:
          type: number
        dart:
          type: number
        el:
          type: number
        erl:
          type: number
        ex:
          type: number
        go:
          type: number
        groovy:
          type: number
        hs:
          type: number
        html:
          type: number
        java:
          type: number
        js:
          type: number
        json:
          type: number
        kt:
          type: number
        lua:
          type: number
        m:
          type: number
        matlab:
          type: number
        md:
          type: number
        php:
          type: number
        pl:
          type: number
        ps1:
          type: number
        py:
          type: number
        r:
          type: number
        rb:
          type: number
        rs:
          type: number
        scala:
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sh:
          type: number
        sol:
          type: number
        sql:
          type: number
        sv:
          type: number
        swift:
          type: number
        tex:
          type: number
        toml:
          type: number
        ts:
          type: number
        xml:
          type: number
        yaml:
          type: number
      title: LanguageClassifierDistribution
      type: object
    LanguageClassifierPriorReturnable:
      description: Strongly-typed returnable object for the language classifer with
        prior.
      properties:
        duration:
          description: This is the time it takes to run this function.
          type: integer
        prediction:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        top5Colours:
          items:
            type: integer
          type: array
        top5SortedDesc:
          items:
            type: string
          type: array
      required:
      - top5SortedDesc
      - top5Colours
      - prediction
      - duration
      title: LanguageClassifierPriorReturnable
      type: object
    LanguageClassifierReturnable:
      description: Strongly-typed returnable class for the programming language ML
        classifier.
      properties:
        distribution:
          $ref: '#/components/schemas/LanguageClassifierDistribution'
        language:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        normalized:
          description: this is the string right before tokenization.
          type: string
        tokens:
          description: this is the tokenized representation of the string.
          items:
            type: number
          type: array
      required:
      - language
      - distribution
      - normalized
      - tokens
      title: LanguageClassifierReturnable
      type: object
    LanguageServerProtocol:
      description: TODO
      properties:
        diagnostics:
          $ref: '#/components/schemas/LanguageServerProtocolDiagnostics'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: LanguageServerProtocol
      type: object
    LanguageServerProtocolCode:
      description: 'NOTE: this can me a union type here.. (integer | string;) so we
        need to get a bit creative'
      properties:
        code_integer:
          type: integer
        code_string:
          type: string
        raw_json:
          additionalProperties:
            type: string
          description: This is a Map<String, String>, basically just a json object
            for additional data if int/string will not work
          type: object
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: LanguageServerProtocolCode
      type: object
    LanguageServerProtocolCodeDescription:
      description: modeled off of (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeDescription)
      properties:
        href:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - href
      title: LanguageServerProtocolCodeDescription
      type: object
    LanguageServerProtocolDiagnostic:
      description: TODO
      properties:
        code:
          $ref: '#/components/schemas/LanguageServerProtocolCode'
        codeDescription:
          $ref: '#/components/schemas/LanguageServerProtocolCodeDescription'
        message:
          type: string
        range:
          $ref: '#/components/schemas/LanguageServerProtocolLocationRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        severity:
          $ref: '#/components/schemas/LanguageServerProtocolSeverityEnum'
        source:
          type: string
      required:
      - range
      - message
      title: LanguageServerProtocolDiagnostic
      type: object
    LanguageServerProtocolDiagnostics:
      description: TODO
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/LanguageServerProtocolDiagnostic'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: LanguageServerProtocolDiagnostics
      type: object
    LanguageServerProtocolLocation:
      description: 'modeled after this (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#location)


        uri: is jsut a file path


        range: here is the location of where this item is within the file.'
      properties:
        range:
          $ref: '#/components/schemas/LanguageServerProtocolLocationRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        uri:
          type: string
      required:
      - uri
      - range
      title: LanguageServerProtocolLocation
      type: object
    LanguageServerProtocolLocationRange:
      description: modeled after this (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#range)
      properties:
        end:
          $ref: '#/components/schemas/LanguageServerProtocolLocationRangePosition'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        start:
          $ref: '#/components/schemas/LanguageServerProtocolLocationRangePosition'
      required:
      - start
      - end
      title: LanguageServerProtocolLocationRange
      type: object
    LanguageServerProtocolLocationRangePosition:
      description: modeled after this (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#position)
      properties:
        character:
          type: integer
        line:
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - line
      - character
      title: LanguageServerProtocolLocationRangePosition
      type: object
    LanguageServerProtocolSeverityEnum:
      description: modeled of of https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticSeverity
      enum:
      - ERROR
      - WARNING
      - INFORMATION
      - HINT
      title: LanguageServerProtocolSeverityEnum
      type: string
    LatestBuilds:
      properties:
        builds:
          items:
            $ref: '#/components/schemas/Builds'
          type: array
        item:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - item
      title: LatestBuilds
      type: object
    LinkExtractionReturnable:
      description: Strongly-typed returnable class for link extraction from a text
        asset.
      properties:
        emails:
          items:
            type: string
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        urls:
          items:
            type: string
          type: array
        users:
          items:
            type: string
          type: array
      required:
      - urls
      - emails
      - users
      title: LinkExtractionReturnable
      type: object
    Linkify:
      description: 'This is the incoming linkify model.


        if access is PRIVATE then please provide and array of users to enable the
        link for.

        '
      properties:
        access:
          $ref: '#/components/schemas/AccessEnum'
        asset:
          $ref: '#/components/schemas/Asset'
        distributions:
          $ref: '#/components/schemas/SeededDistributions'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/Seed'
        users:
          description: this is an array of users.
          items:
            $ref: '#/components/schemas/SeededUser'
          type: array
      required:
      - access
      title: Linkify
      type: object
    LinkifyMultiple:
      description: 'This is the incoming linkify model.


        if access is PRIVATE then please provide and array of users to enable the
        link for.


        Assumption, all assets are already backed up to the cloud.

        '
      properties:
        access:
          $ref: '#/components/schemas/AccessEnum'
        assets:
          description: This is an array or string that represents an already backed
            up asset. That will be added to a collection.
          items:
            type: string
          type: array
        name:
          description: optionally can give the collection a name if you want.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        users:
          description: this is an array of users.
          items:
            $ref: '#/components/schemas/SeededUser'
          type: array
      required:
      - assets
      - access
      title: LinkifyMultiple
      type: object
    MailgunDistribution:
      description: This is a specific Distribution for mailgun specific information.
      properties:
        recipients:
          $ref: '#/components/schemas/Recipients'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - recipients
      title: MailgunDistribution
      type: object
      x-stoplight:
        id: trfkkeucgeodb
    MailgunMetadata:
      description: 'TODO add additional properties.

        TODO eventually modify this model to look like the response from Mailgun.'
      properties:
        messageId:
          description: This is the id given to us from mailgun when the email was
            sent successfully.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - messageId
      title: MailgunMetadata
      type: object
      x-stoplight:
        id: 4hf13p2cn4zsv
    MechanismEnum:
      description: 'This will let us know how an asset was uploaded.


        MANUAL: this is an event such as a user driven send to pieces, or a paste
        to pieces.


        RECOMMENDED: This is an event that was initiall recommended via the suggestion
        flow, and a user decided totake the recommendation.


        AUTOMATIC: This is not user driven at all and the asset was automatically
        uploaded via the suggestion flow. or other methods.


        INTERNAL: This is an undelete able enum used for internal use only.'
      enum:
      - MANUAL
      - RECOMMENDED
      - AUTOMATIC
      - INTERNAL
      - DELETED
      title: MechanismEnum
      type: string
    Mime:
      enum:
      - text/css
      - text/x-dart
      - text/html
      - text/x-java-source
      - application/javascript
      - application/json
      - application/postscript
      - application/wasm
      - application/rtf
      - application/x-cocoa
      - application/x-perl
      - application/xhtml-xml
      - text/xml
      - text/plain
      - application/ecmascript
      - application/node
      - application/x-httpd-php
      - text/x-script.python
      - application/x-bytecode.python
      - application/java
      - text/c-x
      - text/x-c
      - text/x-pascal
      - text/cnd.curl
      - text/vnd.curl.mcurl
      - text/csv
      - application/msword
      - application/vnd.ms-word.document.macroenabled.12
      - application/vnd.openxmlformats-officedocument.wordprocessingml.document
      - application/x-msdownload
      - image/gif
      - image/x-icon
      - image/jpeg
      - video/jpm
      - audio/mpeg
      - video/mp4
      - audio/mp4
      - audio/ogg
      - video/ogg
      - application/ogg
      - application/vnd.ms-powerpoint
      - application/vnd.openxmlformats-officedocument.presentationml.presentation
      - application/vnd.ms-powerpoint.presentation.macroenabled.12
      - video/quicktime
      - image/tiff
      - audio/x-wav
      - audio/webm
      - video/webm
      - image/webp
      - application/vnd.ms-excel
      - application/vnd.ms-excel.addin.macroenabled.12
      - application/vnd.ms-excel.sheet.binary.macroenabled.12
      - application/vnd.ms-excel.sheet.macroenabled.12
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      - application/vnd.ms-excel.template.macroenabled.12
      - application/vnd.openxmlformats-officedocument.spreadsheetml.template
      - application/pdf
      - image/png
      - application/x-redhat-package-manager
      - application/zip
      - font/woff
      - font/woff2
      - application/octet-stream
      - application/mac-binary
      - application/x-binary
      - application/x-macbinary
      - image/bmp
      - application/vnd.ms-fontobject
      - application/gzip
      - application/java-archive
      - application/vnd.apple.installer_xml
      - text/x-script.zsh
      - application/x-apple-diskimage
      - text/richtext
      - text/uri-list
      - application/jsonml_json
      - application/ssml_xml
      - application/xaml_xml
      - application/rss_xml
      readOnly: true
      title: Mime
      type: string
    Model:
      description: This is a Machine Learning Model, that will give readable information
        about the Machine Learning Model Used.
      properties:
        bytes:
          $ref: '#/components/schemas/ByteDescriptor'
        capabilities:
          $ref: '#/components/schemas/ModelCapabilities'
        cloud:
          description: This will inform the user if this was a model that is hosted
            in the cloud
          type: boolean
        cpu:
          description: This is an optional bool that is optimized for CPU usage.
          type: boolean
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        custom:
          description: This will let us know if this is a custom, or fine tuned model
            imported by the user.
          type: boolean
        description:
          description: An Optional Description of the model itself.
          type: string
        downloaded:
          description: This is an optional bool to let us know if this model has been
            downloaded locally.
          type: boolean
        downloading:
          description: This is a calculated property, that will say if this is currently
            downloading.
          type: boolean
        foundation:
          $ref: '#/components/schemas/ModelFoundationEnum'
        id:
          description: 'uuid

            '
          type: string
        loaded:
          description: This is a boolean that represents if the model is loaded into
            memory.(this is not persisted, and is calculated on the fly.)
          type: boolean
        maxTokens:
          $ref: '#/components/schemas/ModelMaxTokens'
        name:
          description: This is an Optional Name of the Model.
          type: string
        parameters:
          description: This is the number of parameters in terms of billions.
          nullable: true
          type: number
        provider:
          $ref: '#/components/schemas/ExternalMLProviderEnum'
        quantization:
          description: 'quantization is a string like: q8f16_0,  q4f16_1, etc...'
          type: string
        ram:
          $ref: '#/components/schemas/ByteDescriptor'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/ModelTypeEnum'
        unique:
          description: This is the unique model name used to load the model.
          type: string
        usage:
          $ref: '#/components/schemas/ModelUsageEnum'
        version:
          description: this is a version of the model.
          type: string
      required:
      - id
      - version
      - created
      - name
      - cloud
      - type
      - usage
      title: Model
      type: object
    ModelCapabilities:
      description: This will let us know what capabilities the model is aloud to be
        used for.
      properties:
        assets:
          description: True if the model can leverage saved assets & their metadata
            in its context window.
          type: boolean
        codebases:
          description: True if the model can leverage entire code bases/snippetized
            code bases in its context window
          type: boolean
        documents:
          description: True if the model can leverage code/text/other files in it's
            context window
          type: boolean
        images:
          description: True if the model can leverage images and graphical material
            files in it's context window
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        temporal:
          description: True if model is able to support live context and any other
            temporally powered RAG Capabilities i.e. "What did I do yesterday?"
          type: boolean
        videos:
          description: True if the model can leverage videos files in it's context
            window
          type: boolean
        websites:
          description: True if the model can leverage websites in its context window.
          type: boolean
      title: ModelCapabilities
      type: object
    ModelDeleteCacheInput:
      description: This is the input model for '/model/{model}/delete/cache'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: ModelDeleteCacheInput
      type: object
      x-stoplight:
        id: l6kdrw8rndb3q
    ModelDeleteCacheOutput:
      description: This is the output model for '/model/{model}/delete/cache'
      properties:
        model:
          $ref: '#/components/schemas/ReferencedModel'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - model
      title: ModelDeleteCacheOutput
      type: object
      x-stoplight:
        id: hqip1vwjnczth
    ModelDownloadProgress:
      description: 'This is the model that is sent over our ws for streaming the progress
        of a model that is being downloaded.


        can eventually add a number that display the percent downloaded an so on.(this
        is called percent 0-100)'
      properties:
        percentage:
          description: Optionally if the download is in progress you will recieve
            a download percent(from 0-100).
          nullable: true
          type: number
          x-stoplight:
            id: zi6lc4jex1t7f
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/ModelDownloadProgressStatusEnum'
      title: ModelDownloadProgress
      type: object
      x-stoplight:
        id: h3fdsqho1l2ch
    ModelDownloadProgressStatusEnum:
      description: Enum used for the status of the progress in downloading a model.
      enum:
      - INITIALIZED
      - IN-PROGRESS
      - COMPLETED
      - FAILED
      - UNKNOWN
      - CANCELED
      - RESET
      title: ModelDownloadProgressStatusEnum
      type: string
      x-stoplight:
        id: bab1a8291c5bf
    ModelFoundationEnum:
      description: "This is used to describe the foundational models used within POS.\n\
        \nNote: LATEST models could be used as the latests of these and then could\
        \ use a system to either(check a file) or\n      we could add and endpoint\
        \ to click out to the cloud to get the latest models and update these locally\
        \ so that our users\n      can always have the latest without having to update\
        \ the application.(not used for now)"
      enum:
      - GPT_3.5
      - GPT_4
      - T5
      - LLAMA_2_7B
      - LLAMA_2_13B
      - LLAMA_2_70B
      - LLAMA_3_2B
      - LLAMA_3_13B
      - LLAMA_3_70B
      - CODE_LLAMA_2_7B
      - CODE_LLAMA_2_13B
      - CODE_LLAMA_2_70B
      - BARD
      - ALPACA_7B
      - ALPACA_13B
      - ALPACA_33B
      - ALPACA_65B
      - VICUNA_7B
      - VICUNA_13B
      - VICUNA_33B
      - VICUNA_65B
      - GUANACO_7B
      - GUANACO_13B
      - GUANACO_33B
      - GUANACO_65B
      - OPENLLAMA_7B
      - OPENLLAMA_13B
      - GORILLA_7B
      - GORILLA_13B
      - GORILLA_33B
      - GORILLA_65B
      - WIZARDLM_7B
      - WIZARDLM_13B
      - WIZARDLM_30B
      - YULANCHAT_13B
      - YULANCHAT_65B
      - REDPAJAMA_3B
      - REDPAJAMA_7B
      - REDPAJAMA_13B
      - REDPAJAMA_33B
      - REDPAJAMA_65B
      - DOLLY_70M
      - DOLLY_160M
      - DOLLY_410M
      - DOLLY_1B
      - DOLLY_1.4B
      - DOLLY_2.8B
      - DOLLY_6.9B
      - DOLLY_12B
      - PYTHIA_70M
      - PYTHIA_160M
      - PYTHIA_410M
      - PYTHIA_1B
      - PYTHIA_1.4B
      - PYTHIA_2.8B
      - PYTHIA_6.9B
      - PYTHIA_12B
      - MOSS_7B
      - MOSS_13B
      - RMKV_LM_100M
      - RMKV_LM_400M
      - RMKV_LM_1.5B
      - RMKV_LM_3B
      - RMKV_LM_7B
      - RMKV_LM_14B
      - STARCODER_15.5B
      - WIZARDCODER_15B
      - SANTACODER_1.1B
      - TEXT_BISON
      - TEXTEMBEDDING_GECKO
      - CHAT_BISON
      - CODE_BISON
      - CODECHAT_BISON
      - CODE_GECKO
      - DISTILROBERTA
      - MISTRAL_7B
      - GEMINI
      - GEMINI_1.5
      - FAST_TEXT
      - UNIXCODER
      - PHI_1.5
      - PHI_2
      - MIXTRAL_8_x_7B
      - MIXTRAL_8_x_22B
      - GEMMA_7B
      - GEMMA_2B
      - CODE_GEMMA_7B
      - CODE_GEMMA_2B
      - RECURRENT_GEMMA_2B
      - GROK_1
      - GROK_1.5
      - CLAUDE_2
      - CLAUDE_3
      - STARLING_7B
      - DBRX
      - COMMAND_R+
      - GEMMA_1.1_2B
      - GEMMA_1.1_7B
      - GEMMA_2_9B
      - PHI_3_MINI
      - PHI_3_SMALL
      - GRANITE_3B
      - GRANITE_8B
      - LLAMA_3_8B
      - CLAUDE_3.5
      - CLAUDE_LATEST
      - GRANITE_LATEST
      - LLAMA_LATEST
      - PHI_LATEST
      - GEMMA_LATEST
      - GEMINI_LATEST
      - GPT_LATEST
      - AZURE_LATEST
      - AZURE_FAST
      - AZURE_BEST
      - AZURE_DEFAULT
      - AZURE_CUSTOM
      - PERPLEXITY_LATEST
      - PERPLEXITY_FAST
      - PERPLEXITY_BEST
      - PERPLEXITY_DEFAULT
      - PERPLEXITY_CUSTOM
      title: ModelFoundationEnum
      type: string
      x-stoplight:
        id: 51q7qb9yot5bc
    ModelMaxTokens:
      description: 'This will describe the MaxTokens for an MLModel


        total is required.


        iff there is a differentiator with inputs/outputs, then we can also provide
        those as well.'
      properties:
        input:
          nullable: true
          type: number
          x-stoplight:
            id: t4qdo8kyzlm69
        output:
          nullable: true
          type: number
          x-stoplight:
            id: osszglwsd1say
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        total:
          nullable: true
          type: number
          x-stoplight:
            id: nual0ol3dah5t
      required:
      - total
      title: ModelMaxTokens
      type: object
      x-stoplight:
        id: xu4zqt6eq8i9x
    ModelTypeEnum:
      description: This will describe the type of Model balanced, speed, accuracy...
      enum:
      - BALANCED
      - SPEED
      - ACCURACY
      title: ModelTypeEnum
      type: string
    ModelUsageEnum:
      description: These are all the possible uses for a model, i.e. code classification,
        OCR, text vs code,  tagify code, tag-based code search, neural code search,
        tagify color and code description.
      enum:
      - OCR
      - CODE_CLASSIFICATION
      - TEXT_VS_CODE
      - TAGIFY_CODE
      - TLP_TAG_SEARCH
      - TLP_NEURAL_CODE_SEARCH
      - TAGIFY_COLOR_FROM_CODE
      - CODE_DESCRIPTION
      - CODE_TITLE
      - CODE_SEARCH_QUERIES
      - CODE_EXTRACTIVE_TAGS
      - CODE_EXTRACTIVE_LINKS
      - CODE_CONVERSATION
      - CODE_GENERATION
      - CODE_SEARCH
      - CODE_DISCOVERY
      - CODE_RELATED_PEOPLE
      - CODE_FRAMEWORK
      - VIDEO_OCR
      - TEXT_VS_CODE_SEGMENTATION
      - TEXT_EMBEDDING
      - TECHNICAL_ERROR
      title: ModelUsageEnum
      type: string
    Models:
      description: This is a List of MachineLearning Models
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Model'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Models
      type: object
    Node:
      description: 'This describes a node within a relationship graph used to related
        like types. ie asset to asset, tag to tag, ...etc


        created: is here to let us know when the node was attached.


        id: this is the the id of the type ie, if the type is Asset the id here points
        to the asset that this node represents.'
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        root:
          description: This is a boolean to let us know if this node is the root or
            origin of the relationship graph.
          type: boolean
        type:
          $ref: '#/components/schemas/NodeTypeEnum'
      required:
      - id
      - type
      - root
      - created
      title: Node
      type: object
      x-stoplight:
        id: 62qufuid3hpoq
    NodeTypeEnum:
      description: This describes the type of a node ie an asset, tag, website, format...
        ETC
      enum:
      - TAG
      - WEBSITE
      - FORMAT
      - ASSET
      title: NodeTypeEnum
      type: string
      x-stoplight:
        id: cdukkwwhd2yv0
    Notification:
      description: config model for notification invoking
      properties:
        id:
          type: integer
        message:
          type: string
        payload:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        title:
          type: string
      required:
      - id
      title: Notification
      type: object
    OAuth:
      description: A model to group all of the properties associated with OAuth
      properties:
        account:
          $ref: '#/components/schemas/OAuthAccount'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        token:
          $ref: '#/components/schemas/OAuthToken'
      title: OAuth
      type: object
    OAuthAccount:
      description: A Model to support account creation to Auth0's Database.
      properties:
        client_id:
          description: The client_id of your client.
          minLength: 1
          type: string
        connection:
          description: The name of the database configured to your client.
          minLength: 1
          type: string
        email:
          description: The user's email address.
          minLength: 1
          type: string
        family_name:
          description: The user's family name(s).
          minLength: 1
          type: string
        given_name:
          description: The user's given name(s).
          minLength: 1
          type: string
        name:
          description: The user's full name.
          minLength: 1
          type: string
        nickname:
          description: The user's nickname.
          minLength: 1
          type: string
        picture:
          description: A URI pointing to the user's picture.
          minLength: 1
          type: string
        username:
          description: The user's username. Only valid if the connection requires
            a username.
          minLength: 1
          type: string
      required:
      - client_id
      - email
      - connection
      - username
      - given_name
      - family_name
      - name
      - picture
      - nickname
      title: OAuthAccount
      type: object
    OAuthGroup:
      description: A model to group all of the properties associated with OAuthGroup
      properties:
        account:
          $ref: '#/components/schemas/OAuthAccount'
        token:
          $ref: '#/components/schemas/OAuthToken'
      title: OAuthGroup
      type: object
    OAuthToken:
      description: A model representing a returnable response for a OAuthGroup Token
      properties:
        access_token:
          description: The Access Token
          type: string
        expires_in:
          example: 86400
          type: integer
        id_token:
          type: string
        refresh_token:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        scope:
          type: string
        token_type:
          enum:
          - Bearer
          type: string
      required:
      - access_token
      - token_type
      - expires_in
      - scope
      title: OAuthToken
      type: object
    OCRAnalyses:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/OCRAnalysis'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: OCRAnalyses
      type: object
    OCRAnalysis:
      description: This is the data collected during the ocr analysis of an image.
      properties:
        hocr:
          $ref: '#/components/schemas/Format'
        id:
          type: string
        image:
          description: this is a reference the the imageAnalysis.
          type: string
        model:
          $ref: '#/components/schemas/Model'
        raw:
          $ref: '#/components/schemas/Format'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      - raw
      - hocr
      - image
      - model
      title: OCRAnalysis
      type: object
    OCRConfidence:
      properties:
        mean:
          description: this is the mean confidence returned by tesseract
          type: integer
      required:
      - mean
      title: OCRConfidence
      type: object
    OCRHOCR:
      properties:
        text:
          description: this is the OCR hOCR text output
          type: string
      required:
      - text
      title: OCRHOCR
      type: object
    OCRReturnable:
      properties:
        channels:
          description: Channels is the number of channels in the image
          type: integer
        confidence:
          $ref: '#/components/schemas/OCRConfidence'
        dark:
          description: this is the light mode that was detected (0=dark, 1=light)
          type: boolean
        duration:
          description: this is the time (in milliseconds) it takes to process the
            image via ocr
          type: integer
        height:
          description: this is the height (number of rows) of the image
          type: integer
        hocr:
          $ref: '#/components/schemas/OCRHOCR'
        scale:
          description: this is the scaling factor the image was scaled by
          type: integer
        text:
          description: this is the OCR text output
          type: string
        width:
          description: this is the width (number of columns) of the image
          type: integer
      required:
      - text
      - hocr
      - confidence
      - duration
      - width
      - height
      - channels
      - scale
      - dark
      title: OCRReturnable
      type: object
    OSAppletEnum:
      description: 'This is an enum specifically for the different types of micro_applications/experiences/feature
        module


        NOTE: TODO copilot_wasm or copilot_minimal

        NOTE: WORKSTREAM_ACTIVITY and WORKFLOW_ACTIVITY might be diff in the future(workflow
        is what we have today, workstream will be a v2)

        NOTE: PLACEHOLDERS here are here to buy some additional changes for enums
        that dont yet exist(JIC) if not used, then not used.'
      enum:
      - COPILOT
      - PIECES_OS_TOOLBAR
      - WORKSTREAM_SUGGESTIONS
      - SAVED_MATERIALS
      - WORKFLOW_ACTIVITY
      - WORKSTREAM_ACTIVITY
      - GLOBAL_SEARCH
      - PIECES_SUITE_SETTINGS_AND_INTEGRATIONS_MANAGER
      - CAPTURED_CONTEXT
      - UPDATES_AND_UPCOMING
      - NOTIFICATIONS_MANAGER
      - SHAREBLE_LINK_VIEWER
      - FUTURE_APPLET_MODULE_PLACEHOLDER_A
      - FUTURE_APPLET_MODULE_PLACEHOLDER_B
      - FUTURE_APPLET_MODULE_PLACEHOLDER_C
      - UNKNOWN_APPLET_MODULE
      title: OSAppletEnum
      type: string
    OSDeviceCPUHardwareInformation:
      description: This will let us know specific hardware information related to
        the CPU.
      properties:
        memory:
          type: number
          x-stoplight:
            id: d3pe3wopc2aqk
        name:
          type: string
          x-stoplight:
            id: w0zahi24snyop
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: OSDeviceCPUHardwareInformation
      type: object
      x-stoplight:
        id: suurluq51yrdi
    OSDeviceDependenciesInformation:
      description: This will lets us know about specific dependencies that we are
        looking for on the device that are needed for specific tasks.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vulkan:
          description: This will let us know if vulkan is present = true or not there
            ==false
          type: boolean
          x-stoplight:
            id: was7yq4ohai5q
      required:
      - vulkan
      title: OSDeviceDependenciesInformation
      type: object
      x-stoplight:
        id: 9pvbv5hpj4mag
    OSDeviceGPUHardwareCapabilitiesInformation:
      description: This will give specific information on task specific capibilites
        for GPU.
      properties:
        llm:
          description: This will let us know if in the case we have a gpu and our
            gpu has the capabilities to use llms
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: OSDeviceGPUHardwareCapabilitiesInformation
      type: object
      x-stoplight:
        id: nfmixcaeh824h
    OSDeviceGPUHardwareInformation:
      description: This will let us know specific hardware information related to
        the GPU.
      properties:
        capabilities:
          $ref: '#/components/schemas/OSDeviceGPUHardwareCapabilitiesInformation'
        memory:
          type: number
          x-stoplight:
            id: ofmprglierm3b
        name:
          type: string
          x-stoplight:
            id: d52m7zor8xm4t
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: OSDeviceGPUHardwareInformation
      type: object
      x-stoplight:
        id: av8lq2nip9xnv
    OSDeviceHardwareInformation:
      description: this will let us know specific hardware information
      properties:
        cpu:
          $ref: '#/components/schemas/OSDeviceCPUHardwareInformation'
        gpu:
          $ref: '#/components/schemas/OSDeviceGPUHardwareInformation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - name
      - version
      title: OSDeviceHardwareInformation
      type: object
      x-stoplight:
        id: 2pjazn214qxj9
    OSDeviceInformationReturnable:
      description: This is the returnable model for the /os/device/information.
      properties:
        dependencies:
          $ref: '#/components/schemas/OSDeviceDependenciesInformation'
        hardware:
          $ref: '#/components/schemas/OSDeviceHardwareInformation'
        name:
          description: this is the name of the device
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        version:
          description: this is the version of the device
          type: string
      title: OSDeviceInformationReturnable
      type: object
      x-stoplight:
        id: udz1qeh6bmuh7
    OSFileStreamingRead:
      description: This is a model to return stream progress for a file read.
      properties:
        bytes:
          $ref: '#/components/schemas/TransferableBytes'
        id:
          description: This is a generated UUID that represents this current stream
            in progress(can be used to cancel this in the future)
          type: string
        path:
          type: string
        percentage:
          description: Optionally if the download is in progress you will receive
            a download percent(from 0-100).
          nullable: true
          type: number
        progress:
          $ref: '#/components/schemas/OSFileStreamingReadProgress'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/ModelDownloadProgressStatusEnum'
      required:
      - path
      - status
      - id
      title: OSFileStreamingRead
      type: object
    OSFileStreamingReadAttempt:
      properties:
        path:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - path
      title: OSFileStreamingReadAttempt
      type: object
    OSFileStreamingReadProgress:
      description: This is the progress for the OSFileStreamingRead
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        total:
          $ref: '#/components/schemas/ByteDescriptor'
        transferred:
          $ref: '#/components/schemas/ByteDescriptor'
      required:
      - transferred
      - total
      title: OSFileStreamingReadProgress
      type: object
    OSHealth:
      description: This is a specific model for the health of our OS Server.
      properties:
        id:
          description: id of your OS
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        version:
          description: this is the current OS version
          type: string
      required:
      - id
      - version
      title: OSHealth
      type: object
    OSPermissions:
      description: This will return the permission of this specific operating system
        w/ relation to given features.
      properties:
        processing:
          $ref: '#/components/schemas/OSProcessingPermissions'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: OSPermissions
      type: object
    OSProcessingPermissions:
      description: These are the permissions relating to the vision models.
      properties:
        accessibility:
          description: if true it is granted, if not then it is not granted.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vision:
          description: if true it is granted, if not then it is not granted.
          type: boolean
      title: GrantedOSProcessingPermissions
      type: object
    OSServerSettings:
      description: 'This is the model for the PiecesOS specific settings.


        autoboot: refers to both the bootup of POS on the system login, default is
        false'
      properties:
        autoboot:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: OSServerSettings
      type: object
    OSServerUpdateStatus:
      description: 'This is the model for the progress of the current update of Pieces
        os.


        /os/update/check/stream && /os/update/check/


        we will emit on a progress update


        updated: is an optional property that will let us know when the update was
        checked last.


        NOTE: it is reccommended to use the stream instead of pulling.

        NOTE: lets think about if we want to have a closing(as well as how we want
        to handle restarts)'
      properties:
        percentage:
          description: Optionally if the update is in progress you will recieve a
            download percent(from 0-100).
          nullable: true
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        status:
          $ref: '#/components/schemas/UpdatingStatusEnum'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - status
      title: OSServerUpdateStatus
      type: object
    OnboardedPersonaDetails:
      description: 'This is an out body for the /machine_learning/text/technical_processing/generators/personification
        endpoint.


        This will have accepted some of the personal details (in the input body) ie
        languages/personas && will transform this in to onbaording snippets that we
        will return with this model'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seeds:
          $ref: '#/components/schemas/Seeds'
      required:
      - seeds
      title: OnboardedPersonaDetails
      type: object
      x-stoplight:
        id: msvgtp6n9u4r2
    OpenAIModelsListInput:
      description: This is the input model for the /open_ai/models/list endpoint.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          type: string
      required:
      - user
      title: OpenAIModelsListInput
      type: object
      x-stoplight:
        id: v682bponu66r6
    OpenAIModelsListOutput:
      description: This is the output model for the /open_ai/models/list endpoint.
      properties:
        models:
          $ref: '#/components/schemas/SeededModels'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - models
      title: OpenAIModelsListOutput
      type: object
      x-stoplight:
        id: z2koynz8495uz
    OrderedMetrics:
      description: This is a returnable for the metrics/formats/ordered
      properties:
        ordered:
          items:
            type: string
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - ordered
      title: OrderedMetrics
      type: object
    PKCE:
      description: An object representing all of the properties involved in a PKCE
        Authentication Flow
      properties:
        auth0:
          $ref: '#/components/schemas/Auth0'
        challenge:
          $ref: '#/components/schemas/ChallengedPKCE'
        result:
          $ref: '#/components/schemas/ResultedPKCE'
        revocation:
          $ref: '#/components/schemas/RevokedPKCE'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/SeededPKCE'
        token:
          $ref: '#/components/schemas/TokenizedPKCE'
      title: PKCE
      type: object
    Person:
      description: 'if expiration is add then, after the alloted expiration date the
        user will only have view && comment only permissions. Only present in the
        case there is a scope such as a defined collection/asset...


        if asset is passed then that means this person belongs to a scoped asset.


        NOTE****: annotations here are annotations to describe the person!!! if in
        the future we want to add who wrote an annotation on and asset or soemthing
        like that, we will want to add a new field on here called authorships.'
      properties:
        access:
          additionalProperties:
            $ref: '#/components/schemas/PersonAccess'
          description: This is a Map<String, PersonAccess> where the the key is an
            asset id.
          type: object
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        models:
          additionalProperties:
            $ref: '#/components/schemas/PersonModel'
          description: This is a Map<String, PersonModel>, where the the key is an
            asset id.
          type: object
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        tags:
          $ref: '#/components/schemas/FlattenedTags'
        type:
          $ref: '#/components/schemas/PersonType'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - type
      title: Person
      type: object
    PersonAccess:
      description: 'if scoped is provided will let us know what level of permission(access)
        this specific person has in relation to what scope.(collection, asset,...etc)


        in the future will expand to global (with its own enumeration for a global
        entire project/cloud scope)'
      properties:
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        scoped:
          $ref: '#/components/schemas/PersonAccessScopedEnum'
      title: PersonAccess
      type: object
    PersonAccessScopedEnum:
      description: This is an enum that will help provide information around what
        permission this person has in relate to their scope.
      enum:
      - OWNER
      - EDITOR
      - COMMENTER
      - VIEWER
      title: PersonAccessScopedEnum
      type: string
    PersonBasicType:
      description: 'This is all optional properties around the most basic information
        around a non-pieces user.


        A Basic type will NOT have a scope as it is not an actual pieces user.'
      properties:
        email:
          description: an email that was extracted.
          type: string
        mailgun:
          $ref: '#/components/schemas/MailgunMetadata'
        name:
          description: This is the name of the basic user.
          type: string
        picture:
          description: this is a url picture representation of a user.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sourced:
          $ref: '#/components/schemas/ExternallySourcedEnum'
        url:
          description: This is a specific url that this basic user came from.
          type: string
        username:
          description: username or twitter handle...etc
          type: string
      title: PersonBasicType
      type: object
    PersonModel:
      description: 'This is a PersonSpecific Model. and will let us know for all the
        assets that get attached to the person if, this person was attached via a
        model or just attached automatically.


        explanation here are the reason why a Person was attached to an asset.'
      properties:
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        explanation:
          $ref: '#/components/schemas/ReferencedAnnotation'
        model:
          $ref: '#/components/schemas/ReferencedModel'
      title: PersonModel
      type: object
      x-stoplight:
        id: u3434z4l9nkgz
    PersonType:
      description: 'basic or platform is absolutely required here.

        basic: if provided is just information that has been either extracted from
        the piece or other wise added here.

        platform: is a real Pieces User.(this user will also exist within the user''s
        users collection. && if not then we will just use the data we have.)'
      properties:
        basic:
          $ref: '#/components/schemas/PersonBasicType'
        platform:
          $ref: '#/components/schemas/UserProfile'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: PersonType
      type: object
    Persons:
      description: This is the plural of Person. will have top level meta about the
        person including an iterable of all the person.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an person id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Person'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Persons
      type: object
    PlatformEnum:
      description: This is an Enumeration for a Platform ie, WEB, MACOS, LINUX, WINDOWS
      enum:
      - WEB
      - MACOS
      - LINUX
      - WINDOWS
      - FUCHSIA
      - IOS
      - ANDROID
      - UNKNOWN
      readOnly: true
      title: PlatformEnum
      type: string
    PrecreatedExternalProviderApiKey:
      description: This is the input model for /external_provider/api_key/create
      properties:
        open_AI:
          $ref: '#/components/schemas/Auth0OpenAIUserMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          description: This is the ID of the User.
          type: string
          x-stoplight:
            id: 94zuquy1wawfv
      required:
      - user
      title: PrecreatedExternalProviderApiKey
      type: object
      x-stoplight:
        id: bjbzrtzi2lvof
    PredeletedExternalProviderApiKey:
      description: 'This is a predeleted version relating to the /external_provider/api_key/delete
        endpoint.


        This will ensure we remove this specific provider.(anything that is set to
        true we will reset to null within the database.)'
      properties:
        open_AI:
          type: boolean
          x-stoplight:
            id: v03axmb7neqdv
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          type: string
          x-stoplight:
            id: 9alylu1k5jd9i
      required:
      - user
      title: PredeletedExternalProviderApiKey
      type: object
      x-stoplight:
        id: cw4zp80shlxlj
    PreonboardedPersonaDetails:
      description: 'This is an input body for the /machine_learning/text/technical_processing/generators/personification
        endpoint.


        This will accept some of the personal details ie languages/personas && will
        transform this in to onbaording snippets'
      properties:
        languages:
          items:
            type: string
            x-stoplight:
              id: 4rj8y3y3hgofi
          type: array
          x-stoplight:
            id: wreolag2qmpjm
        personas:
          items:
            type: string
            x-stoplight:
              id: 7qaadb5semw8m
          type: array
          x-stoplight:
            id: 96q5gbm46hrk7
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: PreonboardedPersonaDetails
      type: object
      x-stoplight:
        id: qm5xis2mngb02
    PreupdatedExternalProviderApiKey:
      description: This is the endput model for "/external_provider/api_key/update".
        everything but the uder will be optional, anything that is defined will get
        an update.
      properties:
        open_AI:
          $ref: '#/components/schemas/Auth0OpenAIUserMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          type: string
      required:
      - user
      title: PreupdatedExternalProviderApiKey
      type: object
      x-stoplight:
        id: xii8fz4jquoam
    Preview:
      description: This is a preview Model that will hold references to at minimum
        the base preview. which can be potentiall a base image, or also base text/code
        and then the oveylay is another format(image/text/code) that is 'overlayed'
        ontop of the base format.
      properties:
        base:
          $ref: '#/components/schemas/ReferencedFormat'
        overlay:
          $ref: '#/components/schemas/ReferencedFormat'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - base
      title: Preview
      type: object
    PrivacyEnum:
      description: 'OPEN: Means that privacy is fully open

        CLOSED: Means that privacy is fully locked down, and private

        ANONYMOUS: Means that we are allowed to collect information but it cannot
        get attached to me as the user.'
      enum:
      - OPEN
      - CLOSED
      - ANONYMOUS
      title: PrivacyEnum
      type: string
    ProjectModule:
      description: 'This is a representation of a Module or a Project


        anchor: is the folder path of this repo/module


        contributors: is a nice to have is all the contributors of this repo/module


        range: is the amount of time this user has been working on this repo


        classifications: if all the languages that are used within this repo/module'
      properties:
        anchor:
          $ref: '#/components/schemas/SeededAnchor'
        classifications:
          $ref: '#/components/schemas/Classifications'
        contributors:
          $ref: '#/components/schemas/DocumentContributors'
        range:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - anchor
      title: ProjectModule
      type: object
    ProjectModules:
      description: This is a plural representation of the ProjectModule
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/ProjectModule'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: ProjectModules
      type: object
    PseudoAssets:
      description: This is a model of all optional properties, that will get returned
        from /assets/pseudo.
      properties:
        identifiers:
          $ref: '#/components/schemas/FlattenedAssets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: PseudoAssets
      type: object
      x-stoplight:
        id: kj3dwc96u3cuk
    QGPTAgentRelatedRoutes:
      description: This is specific for all the related materials, like people, tags,
        websites... xyz
      properties:
        people:
          description: optional bool, that will say if we reccomend to run related.people
            on this conversation, IFF set to TRUE.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTAgentRelatedRoutes
      type: object
      x-stoplight:
        id: eo6dnkk43ujxj
    QGPTAgentRoutes:
      description: 'This is apart of the Output and will let the plugin developer
        know if we reccomend to run specific agent functionality/routes.

        for instance, related.people, code classification...xyz, for now we start
        with relatedPeople.'
      properties:
        related:
          $ref: '#/components/schemas/QGPTAgentRelatedRoutes'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTAgentRoutes
      type: object
      x-stoplight:
        id: x7o6yjn7iaiik
    QGPTConversation:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/QGPTConversationMessage'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTConversation
      type: object
      x-stoplight:
        id: 84so7ozod8gby
    QGPTConversationMessage:
      description: This will take a single message, and a role.
      properties:
        role:
          $ref: '#/components/schemas/QGPTConversationMessageRoleEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          type: string
        timestamp:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - text
      - role
      - timestamp
      title: QGPTConversationMessage
      type: object
      x-stoplight:
        id: 80vxvy8vshzf3
    QGPTConversationMessageRoleEnum:
      description: This is the role enum used for a QGPT conversation
      enum:
      - USER
      - SYSTEM
      - ASSISTANT
      title: QGPTConversationMessageRoleEnum
      type: string
      x-stoplight:
        id: g0ycs15g8jhww
    QGPTConversationPipeline:
      description: 'This model is specifically for QGPT Conversation pipelines, the
        model is used to group conversational prompts for instance a conversation
        around generating code.


        here are some use cases-

        1. contextualized_code_generation- This is for users that want to have conversations
        around generating code, when there is provided context.

        2. generalized_code- This is for users that want to have conversations without
        context around code.

        3. contextualized_code- This is for users that want to have conversation around
        code with Context.

        4. contextualized_code_workstream: this is for the users that want to use
        context as well as WPE information in their chat (we wiil prioritize WPE infomration,
        but also support other info as well)'
      properties:
        contextualized_code_dialog:
          $ref: '#/components/schemas/QGPTConversationPipelineForContextualizedCodeDialog'
        contextualized_code_generation:
          $ref: '#/components/schemas/QGPTConversationPipelineForContextualizedCodeGeneration'
        contextualized_code_workstream_dialog:
          $ref: '#/components/schemas/QGPTConversationPipelineForContextualizedCodeWorkstreamDialog'
        generalized_code_dialog:
          $ref: '#/components/schemas/QGPTConversationPipelineForGeneralizedCodeDialog'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTConversationPipeline
      type: object
    QGPTConversationPipelineForContextualizedCodeDialog:
      description: 'This is for the users that wants to have contextualized code conversations,
        meaning conversations around code with Context provided.


        This is a class so that we can add optional properties in the future.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTConversationPipelineForContextualizedCodeDialog
      type: object
    QGPTConversationPipelineForContextualizedCodeGeneration:
      description: 'This type of conversation is reccomended to be provided when a
        user want generate code w/ context provided.


        This is a class so that we can add optional properties in the future.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTConversationPipelineForContextualizedCodeGeneration
      type: object
    QGPTConversationPipelineForContextualizedCodeWorkstreamDialog:
      description: 'This is for the users that wants to have contextualized code conversations
        around their workstream materials, meaning conversations around code with
        Context provided,

        as well as workstream information ie information gathered from the WPE.


        This is a class so that we can add optional properties in the future.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTConversationPipelineForContextualizedCodeWorkstreamDialog
      type: object
    QGPTConversationPipelineForGeneralizedCodeDialog:
      description: 'This is for the users that wants to have generalized code conversations
        without any context.


        This is a class so that we can add optional properties in the future.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTConversationPipelineForGeneralizedCodeDialog
      type: object
    QGPTHintsInput:
      description: 'Query is your hints question.

        Relevant is the relevant snippets.

        Answer is the previous answer.(that we are asking a hint up for.)


        Query and Answer are both optional here because, you may pass over relevant
        snippets over ahead of hand if you already have them to answer your questions.'
      properties:
        answer:
          $ref: '#/components/schemas/QGPTQuestionAnswer'
        application:
          description: optional application id
          type: string
        model:
          description: optional model id
          type: string
        query:
          type: string
        relevant:
          $ref: '#/components/schemas/RelevantQGPTSeeds'
      required:
      - relevant
      title: QGPTHintsInput
      type: object
      x-stoplight:
        id: 9e8856e303ceb
    QGPTPersonsRelatedInput:
      description: 'This is used for /qgpt/persons/related.


        will accept a seed, or conversation all optionally.

        '
      properties:
        application:
          description: optional application id
          type: string
        conversation:
          $ref: '#/components/schemas/QGPTConversation'
        model:
          description: optional model id
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/Seed'
      title: DiscoverPersonsRelatedInput
      type: object
      x-stoplight:
        id: 844aebe042dea
    QGPTPersonsRelatedOutput:
      description: 'This model is used for the output of the /qgpt/related/persons
        endpoint.


        Explanations here is a custom object with key value pairs,

        when the key is the personUUId and the value is an explanation as to why this
        person was reccommended.'
      properties:
        explanations:
          additionalProperties:
            type: string
          description: This is a Map<String, String> where the the key is a person
            id. and the value is the explanation.
          type: object
        persons:
          $ref: '#/components/schemas/Persons'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - persons
      title: QGPTPersonsRelatedOutput
      type: object
      x-stoplight:
        id: 13125eiiqbyo3
    QGPTPromptPipeline:
      description: "This is a model related to switching between different prompts\
        \ based on if we are dealing with \nvarious tasks or if we are attempting\
        \ to converse with LLMs via conversation.\n\nYou will have 2 options-\n\n\
        1) task- This is specifically for 1 off task operations for instance explaning\
        \ a bit of code\n2) conversation- This is specifically for conversing with\
        \ our LLMs, will provide better results && high fedility \n              responses\
        \ for instance contextualize code conversations."
      properties:
        conversation:
          $ref: '#/components/schemas/QGPTConversationPipeline'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        task:
          $ref: '#/components/schemas/QGPTTaskPipeline'
      title: QGPTPromptPipeline
      type: object
    QGPTQuestionAnswer:
      description: This will be a simple model with a score and a text value that
        will represent the value returned for this answer.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          description: This is the score from 0-1 on how good this answer is.
          type: number
        text:
          type: string
      required:
      - score
      - text
      title: QGPTQuestionAnswer
      type: object
      x-stoplight:
        id: wa50dlos0rg4x
    QGPTQuestionAnswers:
      description: This is the plural of QGPTQuestionAnswer
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/QGPTQuestionAnswer'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: QGPTQuestionAnswers
      type: object
      x-stoplight:
        id: dhjcc129jydfs
    QGPTQuestionInput:
      description: 'This is the body input for the /code_gpt/question.


        Note:

        - each relevant seed, must require at minimum a Seed or an id used from the
        /code_gpt/relevance endpoint or we will throw an error.'
      properties:
        application:
          description: optional application id
          type: string
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          description: optional model id
          type: string
        pipeline:
          $ref: '#/components/schemas/QGPTPromptPipeline'
        query:
          description: This is the user asked question.
          type: string
        relevant:
          $ref: '#/components/schemas/RelevantQGPTSeeds'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        temporal:
          $ref: '#/components/schemas/TemporalRangeGrounding'
      required:
      - relevant
      - query
      title: QGPTQuestionInput
      type: object
      x-stoplight:
        id: o1tykym55pm57
    QGPTQuestionOutput:
      description: 'This is the output/returned value from the /qgpt/question endpoint.
        && /qgpt/followup


        This will just have a single required property. the possible answers to the
        question, with a score.'
      properties:
        answers:
          $ref: '#/components/schemas/QGPTQuestionAnswers'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - answers
      title: QGPTQuestionOutput
      type: object
      x-stoplight:
        id: 7muxnoz171nwz
    QGPTRelevanceInput:
      description: 'This is the input body for the /code_gpt/relevance endpoint.


        There are a couple different options that you may take with this Model.


        First we will talk about the space in which you will compare your query too.

        These are the following cases for the space.

        1. provide an absolute path on the users machine that we can use locally.

        2. provide Seeds that you want to compare to, which will be ONLY fragment/string
        values(all other values will be ignored)

        3. provide assets, here you can provide an iterable of the asset id, and we
        will do the rest

        4. you can set your database boolean to true which will tell us to use your
        entire DB as the query space.


        Note:

        - for ease of use, we have an additional boolean called ''question'', which
        will also ask your question to gpt3.5, and compare to the relevant snippets
        that we found. That way you dont need to call /code_gpt/question. Otherwise
        the next step would be is to take the results and feed them into /code_gpt/question.
        to get your question answered.'
      properties:
        application:
          description: optional application id
          type: string
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          description: optional model id
          type: string
        options:
          $ref: '#/components/schemas/QGPTRelevanceInputOptions'
        paths:
          description: This is an optional list of file || folder paths.
          items:
            type: string
          type: array
        query:
          description: This is the question that the user is asking.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seeds:
          $ref: '#/components/schemas/Seeds'
        temporal:
          $ref: '#/components/schemas/TemporalRangeGrounding'
      required:
      - query
      title: QGPTRelevanceInput
      type: object
      x-stoplight:
        id: 6czu6lxgtdcgq
    QGPTRelevanceInputOptions:
      properties:
        database:
          description: This is an optional boolen that will tell us to use our entire
            snippet database as the sample.
          type: boolean
        pipeline:
          $ref: '#/components/schemas/QGPTPromptPipeline'
        question:
          description: This is an optional boolean, that will let the serve know if
            you want to combine the 2 endpointsboth relevance && the Question endpoint
            to return the final results.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTRelevanceInputOptions
      type: object
      x-stoplight:
        id: 75kzz8ibcz0iv
    QGPTRelevanceOutput:
      description: 'This is the returned value from /code_gpt/relevance.


        This will return the snippets that we found are relevant to the query you
        provided.


        (optional) answer: in the case you provided question: true, then we will also
        return to you the answer to your question.


        Note:

        - relevant: this is required property and will represent the relevant snippets,
        to your specific query.(NOTE: these snippet will all have respective id''s
        and seed defined. even though id and seed are optional)'
      properties:
        answer:
          $ref: '#/components/schemas/QGPTQuestionOutput'
        relevant:
          $ref: '#/components/schemas/RelevantQGPTSeeds'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - relevant
      title: QGPTRelevanceOutput
      type: object
      x-stoplight:
        id: 6dul91gm19azz
    QGPTRepromptInput:
      description: 'Query is your followup question.


        Conversation is a list of the back and fourth with the qgpt bot.

        where the first entry in the array was the last message sent.'
      properties:
        application:
          description: optional application id
          type: string
        conversation:
          $ref: '#/components/schemas/QGPTConversation'
        model:
          description: optional model id
          type: string
        pipeline:
          $ref: '#/components/schemas/QGPTPromptPipeline'
        query:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - query
      - conversation
      title: QGPTRepromptInput
      type: object
      x-stoplight:
        id: 310a3d0ee5b64
    QGPTRepromptOutput:
      properties:
        query:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - query
      title: QGPTRepromptOutput
      type: object
      x-stoplight:
        id: qcsspo3jdmrus
    QGPTStreamEnum:
      description: This is a specific Enum used for the QGPT Stream.
      enum:
      - CANCELED
      - INITIALIZED
      - IN-PROGRESS
      - COMPLETED
      - FAILED
      - UNKNOWN
      - STOPPED
      - RESET
      title: QGPTStreamEnum
      type: string
      x-stoplight:
        id: lmsxm2ekq27dv
    QGPTStreamInput:
      description: This is the input for the /qgpt/stream endpoint.
      properties:
        agent:
          description: This will let us know if we want to run the agent routing as
            well, this is default to true. However if set to false you will save on
            processing and you will recieve null for the agentRoutes class on the
            QGPTStreamOutput.
          type: boolean
        conversation:
          description: This is the ID of a predefined persisted conversation, if this
            is not present we will create a new conversation for the input/output.(in
            the case of a question)
          type: string
        question:
          $ref: '#/components/schemas/QGPTQuestionInput'
        relevance:
          $ref: '#/components/schemas/QGPTRelevanceInput'
        request:
          description: This is an optional Id you can use to identify the result from
            your request.
          type: string
        reset:
          description: This will fully reset all current Activity within the QGPT
            stream Flows.
          type: boolean
        stop:
          description: This will stop the output of the current LLM
          type: boolean
      title: QGPTStreamInput
      type: object
      x-stoplight:
        id: 306s89hr9pmri
    QGPTStreamOutput:
      description: 'This is the out for the /qgpt/stream endpoint.


        200: success

        401: invalid authentication/api key

        429: Rate limit/Quota exceeded

        500: server had an error

        503: the engine is currently overloaded'
      properties:
        agentRoutes:
          $ref: '#/components/schemas/QGPTAgentRoutes'
        conversation:
          description: This is the ID of a predefined persisted conversation, if this
            is not present we will create a new conversation for the input/output.(in
            the case of a question)
          type: string
        errorMessage:
          description: optional error message is the status code is NOT 200
          type: string
          x-stoplight:
            id: z09vb2bdlqgz8
        extracted:
          $ref: '#/components/schemas/QGPTStreamedOutputExtractedMaterials'
        question:
          $ref: '#/components/schemas/QGPTQuestionOutput'
        relevance:
          $ref: '#/components/schemas/QGPTRelevanceOutput'
        request:
          description: This is the id used to represent the stream of response. this
            will always be present. We will use the value passed inby the client,
            or we will generate one.
          type: string
        status:
          $ref: '#/components/schemas/QGPTStreamEnum'
        statusCode:
          description: This will be provided
          nullable: true
          type: number
          x-stoplight:
            id: nuye00uj41lpw
      required:
      - conversation
      title: QGPTStreamOutput
      type: object
      x-stoplight:
        id: afts2s8dco91i
    QGPTStreamedOutputExtractedMaterials:
      description: 'This is used as an object that will return some of the extracted
        materials from both

        the message w/ compeleted/ or stopped


        as well as the context(if using WorkstreamContext)'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        textual:
          $ref: '#/components/schemas/QGPTStreamedOutputExtractedTextualMaterials'
      title: QGPTStreamedOutputExtractedMaterials
      type: object
    QGPTStreamedOutputExtractedTextualMaterials:
      description: This is all the textually extracted materials from the QGPT stream
      properties:
        message:
          $ref: '#/components/schemas/TextuallyExtractedMaterials'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        workstream:
          $ref: '#/components/schemas/TextuallyExtractedMaterials'
      title: QGPTStreamedOutputExtractedTextualMaterials
      type: object
    QGPTTaskPipeline:
      description: 'This model is specifically for QGPT Task pipelines, the model
        is used to group one off tasks for instance fix/explaining/commenting

        that dont necessarily require a conversation form factor.'
      properties:
        code_commentation:
          $ref: '#/components/schemas/QGPTTaskPipelineForCodeCommentation'
        code_completion:
          $ref: '#/components/schemas/QGPTTaskPipelineForCodeCompletion'
        code_explanation:
          $ref: '#/components/schemas/QGPTTaskPipelineForCodeExplanation'
        code_fix:
          $ref: '#/components/schemas/QGPTTaskPipelineForCodeFix'
        code_modification:
          $ref: '#/components/schemas/QGPTTaskPipelineForCodeModification'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTTaskPipeline
      type: object
    QGPTTaskPipelineForCodeCommentation:
      description: 'This task is for commenting a bit of code.


        This is a class so that we can add optional properties in the future.


        Note: the snippet && language that needs to be commented should be within
        the QGPTQuestionInput.relevant'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTTaskPipelineForCodeCommentation
      type: object
    QGPTTaskPipelineForCodeCompletion:
      description: 'This task is for code_completion ie auto-complete.


        This is a class so that we can add optional properties in the future.


        context: This is additional snippet context within the file that will be useful
        for the autocompletion.(PLEASE ONLY pass in Seed.asset.format.fragment.string.raw
        for the context snippet values, and for the classificaiton pass in Seed.asset.format.classification)


        Note: the snippet && language that needs to be Actually AutoCompleted should
        be within the QGPTQuestionInput.relevant.'
      properties:
        context:
          items:
            type: string
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTTaskPipelineForCodeCompletion
      type: object
      x-stoplight:
        id: f5f9cac4ae0e7
    QGPTTaskPipelineForCodeExplanation:
      description: 'This task is for explaining a bit of code.


        This is a class so that we can add optional properties in the future.


        Note: the snippet && language that needs to be explaned should be within the
        QGPTQuestionInput.relevant'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTTaskPipelineForCodeExplanation
      type: object
    QGPTTaskPipelineForCodeFix:
      description: 'This task is for fixing a bit of code.


        This is a class so that we can add optional properties in the future.


        Note: the snippet && language that needs to be fixed should be within the
        QGPTQuestionInput.relevant.'
      properties:
        error:
          description: This is the error message provided from the IDE, that we can
            use to provide the solution.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTTaskPipelineForCodeFix
      type: object
    QGPTTaskPipelineForCodeModification:
      description: 'This task is for modifying a bit of code, IE modify this code
        to do xyz.


        This is a class so that we can add optional properties in the future.


        Note: the snippet && language that needs to be modified should be within the
        QGPTQuestionInput.relevant'
      properties:
        instruction:
          description: This is the instruction that we will use to modify this snippet.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: QGPTTaskPipelineForCodeModification
      type: object
    Range:
      description: This is an identified Range, this is ONLY needed when using plural
        rangedTimestamps, in order to ensure granularity(add/modify/delete)
      properties:
        between:
          type: boolean
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        from:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        to:
          $ref: '#/components/schemas/GroupedTimestamp'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      title: Range
      type: object
    Ranges:
      description: This is a collection of many Ranges
      properties:
        continuous:
          type: boolean
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an range id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Range'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Ranges
      type: object
    Reaction:
      description: 'This will the the Request body of the Request Endpoint.


        Reuse will not be required here because we do NOT know if the user will choose
        to reuse what we have suggested.


        save will however be required because this will let us know if we should save
        the coppied asset that was first sent over or not.


        seed is required, because we will want to know 100% sure what the original
        suggestion was made against.'
      properties:
        reuse:
          $ref: '#/components/schemas/ReuseReaction'
        save:
          description: This will just be a simple boolean here that will say if the
            use should save the asset or not.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/SeededConnectorCreation'
      required:
      - save
      - seed
      title: Reaction
      type: object
    Recipients:
      description: This an iterable of People that are attached to a specific distribution
        ie, slack, maigun, ...etc
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/PersonBasicType'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Recipients
      type: object
      x-stoplight:
        id: ehxm9c13zp3ph
    ReferencedActivity:
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedActivity'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedActivity
      type: object
      x-stoplight:
        id: xtqpgn1gv04j0
    ReferencedAnchor:
      description: This is the referenced version of a Anchor, main used for the uuid.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedAnchor'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedAnchor
      type: object
      x-stoplight:
        id: f744f32378d60
    ReferencedAnchorPoint:
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedAnchorPoint'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedAnchorPoint
      type: object
      x-stoplight:
        id: 6zw9d3345s8zn
    ReferencedAnnotation:
      description: This is the referenced version of a annotation, main used for the
        uuid.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedAnnotation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedAnnotation
      type: object
      x-stoplight:
        id: am50cy55g9cxj
    ReferencedAsset:
      description: A reference to a asset, which at minimum must have the asset's
        id. But in the case of a hydrated client API it may have a populated reference
        of type Asset.
      properties:
        id:
          example: 2254f2c8-5797-40e8-ac56-41166dc0e159
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedAsset'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedAsset [DAG Safety]
      type: object
    ReferencedConversation:
      description: This is a DAG-Safe Minimal version of a Conversation.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedConversation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedConversation
      type: object
      x-stoplight:
        id: 996zzut42m571
    ReferencedConversationMessage:
      description: This is a DAG-Safe Minimal version of a ConversationMessage.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedConversationMessage'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedConversationMessage
      type: object
      x-stoplight:
        id: 3624d731cd6b4
    ReferencedDistribution:
      description: ''
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedDistribution'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedDistribution
      type: object
      x-stoplight:
        id: d63su254fbqhx
    ReferencedFormat:
      description: A reference to a format which at minimum must have the format's
        id. But in the case of a hydrated client API it may have a populated reference
        of type Format.
      properties:
        id:
          description: The id of the Format
          example: 102ff265-fdfb-4142-8d94-4932d400199c
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedFormat'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedFormat [DAG Safety]
      type: object
    ReferencedHint:
      description: This is the referenced version of a hint, main used for the uuid.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedHint'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedHint
      type: object
      x-stoplight:
        id: 7cuuylmqgdczr
    ReferencedModel:
      description: '*****NOTE:***** This is the basic referencedModel, for Now since
        we dont have a FlattenedModel, im going to simply not include the reference,
        because I do NOT want to attach a Model here (would cause breaking changes
        if we switched from a Model -> a flattenedModel). and (2) we are under going
        Model changes to the Model, so would cause issues.'
      properties:
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedModel
      type: object
      x-stoplight:
        id: 66fsk26is4mad
    ReferencedPerson:
      description: '[DAG Safe] version of a Person Model. '
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedPerson'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedPerson
      type: object
    ReferencedRange:
      description: This is a minimal version of a Range, with mainly an Id.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedRange
      type: object
    ReferencedSensitive:
      description: A reference to a sensitive which at minimum must have the Sensitive
        id. But in the case of a hydrated client API it may have a populated reference
        of type Sensitive.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedSensitive'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedSensitive
      type: object
    ReferencedShare:
      description: This is a [DAG SAFE] version of a share. with just a required share
        ID.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedShare'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedShare
      type: object
      x-stoplight:
        id: 51p1im2gucgvm
    ReferencedTag:
      description: '[DAG Safe] version of a Tag Model. '
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedTag'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedTag
      type: object
    ReferencedUser:
      description: 'A object to reference a user''s ID and optionally a FlattenedUserProfile
        Instance '
      properties:
        id:
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedUserProfile'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedUser
      type: object
    ReferencedWebsite:
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedWebsite'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedWebsite
      type: object
    ReferencedWorkstreamEvent:
      description: This is a minimal representation of a WorkstreamEvent event.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedWorkstreamEvent'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedWorkstreamEvent
      type: object
      x-stoplight:
        id: vhok5mq8teb07
    ReferencedWorkstreamPatternEngineVisionEvent:
      description: 'This will return a specific event for the WPE.


        note: value is nullable here because we may want to pass in transferables:true/false'
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedWorkstreamPatternEngineVisionEvent'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: WorkstreamPatternEngineVisionEvent
      type: object
    ReferencedWorkstreamSummary:
      description: this is a referenced minimal version of a WorkstreamSummary typically
        just our uuid.
      properties:
        id:
          type: string
        reference:
          $ref: '#/components/schemas/FlattenedWorkstreamSummary'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - id
      title: ReferencedWorkstreamSummary
      type: object
      x-stoplight:
        id: im0uagzfo6ruy
    Relationship:
      description: "A relationship expresses a graph of like types, to build a relationship\
        \ graph. \n To get the type of relationship, this is for ie Asset, tag, website,\
        \ format ...etc, you will need to iterate through the edges and get the root\
        \ or you can just get the first edge's type as a relationship can only be\
        \ expressed through same type"
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        edges:
          $ref: '#/components/schemas/Edges'
        embeddings:
          $ref: '#/components/schemas/Embeddings'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - embeddings
      - edges
      - created
      - updated
      title: Relationship
      type: object
      x-stoplight:
        id: 4rrtvwczrna8a
    Relationships:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Relationship'
          type: array
      required:
      - iterable
      title: Relationships
      type: object
      x-stoplight:
        id: vqz8hj7kuzfzm
    ReleasePackages:
      properties:
        appinstaller:
          $ref: '#/components/schemas/BuildPackages'
        crx:
          $ref: '#/components/schemas/BuildPackages'
        dmg:
          $ref: '#/components/schemas/BuildPackages'
        dmg-arm64:
          $ref: '#/components/schemas/BuildPackages'
        linux:
          $ref: '#/components/schemas/BuildPackages'
        macos:
          $ref: '#/components/schemas/BuildPackages'
        macos-arm64:
          $ref: '#/components/schemas/BuildPackages'
        pkg:
          $ref: '#/components/schemas/BuildPackages'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        snap:
          $ref: '#/components/schemas/BuildPackages'
        sublime_package:
          $ref: '#/components/schemas/BuildPackages'
        tar.gz:
          $ref: '#/components/schemas/BuildPackages'
        vsix:
          $ref: '#/components/schemas/BuildPackages'
        vsix-darwin-arm64:
          $ref: '#/components/schemas/BuildPackages'
        vsix-darwin-x64:
          $ref: '#/components/schemas/BuildPackages'
        vsix-linux-x64:
          $ref: '#/components/schemas/BuildPackages'
        vsix-win32-x64:
          $ref: '#/components/schemas/BuildPackages'
        windows:
          $ref: '#/components/schemas/BuildPackages'
        windows-msix:
          $ref: '#/components/schemas/BuildPackages'
        zip:
          $ref: '#/components/schemas/BuildPackages'
      title: ReleasePackages
      type: object
    RelevantQGPTSeed:
      description: 'This is a generic model used, to wrap a seed, as well as give
        an identifier used to further identifiy this snippet.


        Seed is optional here because you may just want to provide the id, and not
        the original seed.


        id is also optional here as you may provide an id or not here.(however with
        specific endpoint this ID is a guarentee.)'
      properties:
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        id:
          type: string
        path:
          description: This is an optional file path
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/Seed'
      title: RelevantQGPTSeed
      type: object
      x-stoplight:
        id: de76a6dd74852
    RelevantQGPTSeeds:
      description: This is a plural of RelevantQGPTSeed.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/RelevantQGPTSeed'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: RelevantQGPTSeeds
      type: object
      x-stoplight:
        id: acbd8a4d3b301
    ResultedPKCE:
      description: A Model To Represent the Code Returned from a PKCE Response
      properties:
        code:
          description: The PKCE Code to be used to access a Token.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        state:
          description: Likely the state that will be returned which should match the
            requested state as well as the nonce
          type: string
      required:
      - code
      - state
      title: ResultedPKCE
      type: object
    ReturnedUserProfile:
      description: This is a modle strictly for the purpose that when calling '/user'
        and other user related endpoints the UserProfile could potentially be null,
        so we needed a model to do that.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          $ref: '#/components/schemas/UserProfile'
      title: ReturnedUserProfile
      type: object
    ReuseReaction:
      description: if reuse was used in the reaction then we can provide the uuid
        of the asset that was reused.
      properties:
        asset:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - asset
      title: ReuseReaction
      type: object
    ReuseSuggestion:
      description: 'This is the ReuseSuggestion. Mainly creating an additional model
        here because I imagine that we will want to add some additional data to this
        in the future (potentially with more numerical data that is emitted from the
        ML Models)


        **Note: suggested is required here because we will want to say if we suggested
        to take this action of reuse or not.


        ** Thoughts here. We could potentially return Assets: which would be an iterable
        of assets in most relavent order for the user to reuse if they want.'
      properties:
        assets:
          $ref: '#/components/schemas/Assets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        suggested:
          description: This is a boolean, that will say if you should or should not
            take action.
          type: boolean
      required:
      - suggested
      - assets
      title: ReuseSuggestion
      type: object
    RevokedPKCE:
      description: 'A model to support revoking a Token Generated Through PKCE


        The behaviour of this endpoint depends on the state of the Refresh Token Revocation
        Deletes Grant toggle.


        If this toggle is enabled, then each revocation request invalidates not only
        the specific token, but all other tokens based on the same authorization grant.


        This means that all Refresh Tokens that have been issued for the same user,
        application, and audience will be revoked. If this toggle is disabled, then
        only the refresh token is revoked, while the grant is left intact'
      properties:
        client_id:
          description: Your application's Client ID. The application should match
            the one the Refresh Token was issued for.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        token:
          description: The Refresh Token you want to revoke.
          type: string
      required:
      - client_id
      - token
      title: RevokedPKCE
      type: object
    Role:
      description: This is the specific role of a format.
      enum:
      - ORIGINAL
      - ADDITIONAL
      - BOTH
      - PREVIEW
      title: Role
      type: string
    RuntimeStripeAnyMetadata:
      description: Metadata Used within the runtime platform
      properties:
        family_name:
          type: string
        given_name:
          type: string
        global_id:
          type: string
        name:
          type: string
        nickname:
          type: string
        picture:
          type: string
      title: RuntimeStripeAnyMetadata
      type: object
    SaveSuggestion:
      description: 'This is the SaveSuggestion. Mainly creating an additional model
        here because I imagine that we will want to add some additional data to this
        in the future (potentially with more numerical data that is emitted from the
        ML Models)


        **Note: suggested is required here because we will want to say if we reccomend
        to take this action of save or not.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        suggested:
          description: This is a boolean, that will say if you should or should not
            take action.
          type: boolean
      required:
      - suggested
      title: SaveSuggestion
      type: object
    Score:
      description: 'This is use as the score for an asset.


        Manual: will be the raw sum of the asset activity events ranks with mechanismEnum
        == manual

        Automatic: will be the raw sum of the asset activity events ranks with mechanismEnum
        == automatic'
      properties:
        automatic:
          description: These are point assigned via automatic activity events.
          type: integer
        manual:
          description: These are points assigned via manual user driven events.
          type: integer
        priority:
          type: integer
        reference:
          type: integer
        reuse:
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        searched:
          type: integer
        update:
          type: integer
      required:
      - manual
      - automatic
      title: Score
      type: object
      x-stoplight:
        id: 3xh75xwjtbvvn
    SearchEngine:
      description: 'This will determine the type of search that will run


        These are all different searching methods all of which are exclusive.

        Meaning that you cannot mix & match types.


        operations: is here if you want to build complex searching behavior.

        (A || B) && (B || C) , note this can get very complex but can be as flexible
        as you need.'
      properties:
        embeddings:
          $ref: '#/components/schemas/EmbeddingsSearchOptions'
        full_text:
          $ref: '#/components/schemas/FullTextSearchOptions'
        operations:
          $ref: '#/components/schemas/SearchEngines'
        query:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        temporal:
          $ref: '#/components/schemas/TemporalSearchOptions'
        workstream:
          $ref: '#/components/schemas/WorkstreamSearchOptions'
      title: SearchEngine
      type: object
    SearchEngines:
      description: 'This is a model for plural Engine.

        This means that you can run multiple searches, this follow similar behavior
        to the Asset Filtering.where you can

        create you own complex operations: IE search a query in FTS, and filter all
        that have the create from here to here.


        note: each Engine will only represent 1 search operation, however you many
        pass in operations to create further nesting. IE


        Engine: [FTS + w/ operations: [created filter, updated filer, ncs Search]
        w/ a type of OR:::: This can be as nested as you want however will just increase
        the time till it returns results.]


        note: type: default behavior for the type is an AND operation.'
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchEngine'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/FilterOperationTypeEnum'
      required:
      - iterable
      title: SearchEngines
      type: object
    SearchInput:
      description: 'generic endpoint body for the searching endpoints


        query: this is optional, but the query string you will use to find your material


        mode: this is the searching method/type that we will use to search your materials


        TODO: consider passing in a score here ie only return things that match references/reuse/updates/...etc
        > x


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials,

        this would be an input property of suggestions?:boolean that will say if they
        want suggested materials returned as well'
      properties:
        engines:
          $ref: '#/components/schemas/SearchEngines'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - engines
      title: SearchInput
      type: object
    Searched:
      description: This will describe the results returned from the connector search
        endpoint. (soon) will also be able to search your formats.
      properties:
        assets:
          $ref: '#/components/schemas/SearchedAssets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - assets
      title: Searched
      type: object
    SearchedAnchor:
      description: 'This is used for the Anchors searching endpoint.


        anchor here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions


        note: if we match a specific anchorPoint we will provide this as well.'
      properties:
        anchor:
          $ref: '#/components/schemas/Anchor'
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the anchor.
          type: string
        points:
          $ref: '#/components/schemas/SearchedAnchorPoints'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedAnchor
      type: object
    SearchedAnchorPoint:
      description: 'This is used for the AnchorPoints searching endpoint.


        point here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the anchorPoint.
          type: string
        point:
          $ref: '#/components/schemas/AnchorPoint'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedAnchorPoint
      type: object
    SearchedAnchorPoints:
      description: This is the plural Model used to return many SearchedAnchorPoint.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedAnchorPoint'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedAnchorPoints
      type: object
    SearchedAnchors:
      description: This is the plural Model used to return many SearchedAnchor.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedAnchor'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedAnchors
      type: object
    SearchedAnnotation:
      description: 'This is used for the Annotation searching endpoint


        annotation here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        annotation:
          $ref: '#/components/schemas/Annotation'
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the annotation.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedAnnotation
      type: object
    SearchedAnnotations:
      description: This is the plural Model used to return many SearchedAnnotation.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedAnnotation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedAnnotations
      type: object
    SearchedAsset:
      description: This is a modle that will represent a searched asset!
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the asset.
          type: string
        match:
          $ref: '#/components/schemas/SearchedMatchEnum'
        pseudo:
          description: If this is a pseudo asset that was also returned.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          type: number
      required:
      - exact
      - score
      - match
      - identifier
      title: SearchedAsset
      type: object
    SearchedAssets:
      description: This is a modle that will return fro mthe search endpoint that
        will just contain an array of assets!
      properties:
        exact:
          description: the number of exact results
          type: number
        iterable:
          items:
            $ref: '#/components/schemas/SearchedAsset'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        suggested:
          description: the number of fuzzy/suggested search results.
          type: number
      required:
      - iterable
      - suggested
      - exact
      title: SearchedAssets
      type: object
    SearchedConversation:
      description: 'This is used for the Conversations searching endpoint.


        conversation here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        annotations:
          $ref: '#/components/schemas/SearchedAnnotations'
        conversation:
          $ref: '#/components/schemas/Conversation'
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the conversation.
          type: string
        messages:
          $ref: '#/components/schemas/SearchedConversationMessages'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedConversation
      type: object
    SearchedConversationMessage:
      description: 'This is used for the ConversationMessages searching endpoint &&
        the specific Conversation search && ConversationsSearch


        conversation here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the ConversationMessage.
          type: string
        message:
          $ref: '#/components/schemas/ConversationMessage'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedConversationMessage
      type: object
    SearchedConversationMessages:
      description: This is the plural Model used to return many SearchedConversationMessage.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedConversationMessage'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedConversationMessages
      type: object
    SearchedConversations:
      description: This is the plural Model used to return many SearchedConversation.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedConversation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedConversations
      type: object
    SearchedHint:
      description: 'This is used for the Hint searching endpoint


        hint here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        hint:
          $ref: '#/components/schemas/Hint'
        identifier:
          description: This is the uuid of the hint.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedHint
      type: object
    SearchedHints:
      description: This is the plural Model used to return many SearchedHint.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedHint'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedHints
      type: object
    SearchedMatchEnum:
      enum:
      - TITLE
      - ANNOTATION
      - HINT
      - CONTENT
      - FUZZY
      - MULTIPLE
      - TAGS
      - WEBSITES
      - PERSONS
      title: SearchedMatchEnum
      type: string
    SearchedPerson:
      description: 'This is used for the Persons searching endpoint.


        person here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the person.
          type: string
        person:
          $ref: '#/components/schemas/Person'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedPerson
      type: object
    SearchedPersons:
      description: This is the plural Model used to return many SearchedPerson.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedPerson'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedPersons
      type: object
    SearchedSensitive:
      description: 'This is used for the Sensitives searching endpoint.


        sensitive here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the sensitive.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sensitive:
          $ref: '#/components/schemas/Sensitive'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedSensitive
      type: object
    SearchedSensitives:
      description: This is the plural Model used to return many SearchedSensitive.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedSensitive'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedSensitives
      type: object
    SearchedTag:
      description: 'This is used for the Tags searching endpoint.


        tag here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the tag.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        tag:
          $ref: '#/components/schemas/Tag'
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedTag
      type: object
    SearchedTags:
      description: This is the plural Model used to return many searchedTags.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedTag'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedTags
      type: object
    SearchedWebsite:
      description: 'This is used for the Websites searching endpoint.


        website here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions'
      properties:
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the website.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
        website:
          $ref: '#/components/schemas/Website'
      required:
      - exact
      - similarity
      - identifier
      title: SearchedWebsite
      type: object
    SearchedWebsites:
      description: This is the plural Model used to return many SearchedWebsite.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedWebsite'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedWebsites
      type: object
    SearchedWorkstreamPatternEngineVisionEvent:
      description: This will return a list of the returned events.
      properties:
        application:
          type: string
        event:
          $ref: '#/components/schemas/WorkstreamPatternEngineVisionEvent'
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the event.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        temporal:
          type: boolean
      required:
      - identifier
      title: SearchedWorkstreamPatternEngineVisionEvent
      type: object
    SearchedWorkstreamPatternEngineVisionEvents:
      description: This will return a list of the returned events.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedWorkstreamPatternEngineVisionEvent'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedWorkstreamPatternEngineVisionEvents
      type: object
    SearchedWorkstreamSummaries:
      description: This is the plural Model used to return many SearchedWorkstreamSummary.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SearchedWorkstreamSummary'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SearchedWorkstreamSummaries
      type: object
    SearchedWorkstreamSummary:
      description: 'This is used for the WorkstreamSummaries searching endpoint


        WorkstreamSummary here is only provided if transferables are set to true.


        temporal: if this is provided this means that their material matched the input
        via a timestamp.


        TODO will want to consider returning related materials to this material potentially
        both associated/ and not associated materials

        ie suggestion: WorkstreamSuggestions


        annotations: this is provided if we match a specific annotation on a WorkstreamSummary'
      properties:
        annotations:
          $ref: '#/components/schemas/SearchedAnnotations'
        exact:
          type: boolean
        identifier:
          description: This is the uuid of the WorkstreamSummary.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        similarity:
          type: number
        summary:
          $ref: '#/components/schemas/WorkstreamSummary'
        temporal:
          type: boolean
      required:
      - exact
      - similarity
      - identifier
      title: SearchedWorkstreamSummary
      type: object
    Seed:
      description: 'A seed Model used to wrap a format or asset


        Note: we will expand this now to support additional paramerters.


        Note: however if create an asset, only pass in the asset, not passing in an
        asset in this case will cause the endpoint to fail.


        TODO: for a breaking change update the type enum here to add support for the
        additional materials or remove it entirely.'
      properties:
        anchor:
          $ref: '#/components/schemas/SeededAnchor'
        asset:
          $ref: '#/components/schemas/SeededAsset'
        person:
          $ref: '#/components/schemas/SeededPerson'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          enum:
          - SEEDED_FORMAT
          - SEEDED_ASSET
          example: SEEDED_ASSET
          type: string
        website:
          $ref: '#/components/schemas/SeededWebsite'
      title: Seed
      type: object
    SeededAccessor:
      description: This is a pre-created accessor that simply takes an os id and an
        optional user(flattened)
      properties:
        os:
          description: this is an os id.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        share:
          description: this is the share that the asset is apart of.
          type: string
        user:
          $ref: '#/components/schemas/FlattenedUserProfile'
      required:
      - os
      - share
      title: SeededAccessor
      type: object
    SeededActivity:
      description: 'This is the preseed to a full blown Activity.


        This is the minimum information needed to create an Activity, used within
        our [POST] /activities/create


        if mechenism is not passed in we will default to AUTOMATIC


        NOT required to pass in an asset/user/format.'
      properties:
        application:
          $ref: '#/components/schemas/Application'
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        event:
          $ref: '#/components/schemas/SeededConnectorTracking'
        format:
          $ref: '#/components/schemas/ReferencedFormat'
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        user:
          $ref: '#/components/schemas/ReferencedUser'
      required:
      - event
      - application
      title: SeededActivity
      type: object
      x-stoplight:
        id: p98hvskt36fud
    SeededAnchor:
      properties:
        annotations:
          items:
            $ref: '#/components/schemas/SeededAnnotation'
          type: array
        asset:
          description: You may associate a SeededAnchor with an asset
          type: string
        conversation:
          type: string
        fullpath:
          type: string
        name:
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/AnchorTypeEnum'
        watch:
          type: boolean
      required:
      - type
      - fullpath
      title: SeededAnchor
      type: object
      x-stoplight:
        id: 7e25777edb77e
    SeededAnchorPoint:
      properties:
        anchor:
          description: Cannot create an AnchorPoint w/o a Anchor.
          type: string
        fullpath:
          type: string
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/AnchorTypeEnum'
        watch:
          type: boolean
      required:
      - type
      - fullpath
      - anchor
      title: SeededAnchorPoint
      type: object
      x-stoplight:
        id: sxhjxe0tj1u63
    SeededAnnotation:
      description: This is the percursor to a fully referenced Annotation.
      properties:
        anchor:
          type: string
        asset:
          type: string
        conversation:
          type: string
        favorited:
          type: boolean
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        model:
          type: string
        person:
          type: string
        pseudo:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          description: This is the text of the annotation.
          type: string
        type:
          $ref: '#/components/schemas/AnnotationTypeEnum'
      required:
      - type
      - text
      title: SeededAnnotation
      type: object
      x-stoplight:
        id: oha5ihx7zfx7b
    SeededAsset:
      description: 'This is seed data that will be come an asset.


        discovered: if set to true this seededAsset was discovered using one of our
        discovery endpoints.


        pseudo: if this is an asset that a user did NOT explicitly save.


        available: This is a model that is used within our ''/assets/draft'' endpoint
        that will emitt a seed with all the available format that one can generate
        based on the original seed that was passed in. ie if a png was passed in,
        we may  say that there is a text/code format available. If available formats
        is passed into the ''/assets/create'' we will short curcuit certain operations
        to speed up the process, for instance, if we determine that there is no text
        within this image then there is no sense in running ocr.

        '
      properties:
        application:
          $ref: '#/components/schemas/Application'
        available:
          $ref: '#/components/schemas/AvailableFormats'
        demo:
          description: This will let us know if this asset was generated as a 'demo'
            snippet
          type: boolean
        discovered:
          type: boolean
        enrichment:
          $ref: '#/components/schemas/SeededAssetEnrichment'
        format:
          $ref: '#/components/schemas/SeededFormat'
        metadata:
          $ref: '#/components/schemas/SeededAssetMetadata'
        pseudo:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      - format
      title: SeededAsset
      type: object
    SeededAssetEnrichment:
      description: 'This is a specific Model for the SeededAsset that will enable
        the developer to modify the enrichment levels of persons, tags, websites.


        These enrichment levels will guarentee that the # of people/tags/websites
        do not eceeed the provided value, but will not guarentee a minimum.'
      properties:
        hints:
          type: integer
        persons:
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tags:
          type: integer
        websites:
          type: integer
      title: SeededAssetEnrichment
      type: object
      x-stoplight:
        id: k51oacpa6b0vj
    SeededAssetMetadata:
      description: 'This is optional metadata sent with the SeededAsset and other
        SeededAssets ie (UE, Jetbrains...)


        Note: if a user/develop didnt explicitly state a mechanism we will default
        to manual(user Driven only)'
      properties:
        anchors:
          items:
            $ref: '#/components/schemas/SeededAnchor'
          type: array
        annotations:
          items:
            $ref: '#/components/schemas/SeededAnnotation'
          type: array
        hints:
          items:
            $ref: '#/components/schemas/SeededHint'
          type: array
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        name:
          description: This is the name of the asset.
          type: string
        persons:
          items:
            $ref: '#/components/schemas/SeededPerson'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sensitives:
          items:
            $ref: '#/components/schemas/SeededAssetSensitive'
          type: array
        tags:
          description: (optional) can add some tags to associate to this asset.
          items:
            $ref: '#/components/schemas/SeededAssetTag'
          type: array
        websites:
          items:
            $ref: '#/components/schemas/SeededAssetWebsite'
          type: array
      title: SeededAssetMetadata
      type: object
    SeededAssetSensitive:
      description: 'This is the seededAssetSensitive, this does not have an id yet
        as we will add it on the server side.


        can optionally pass in our mechanism here, as the default will be manual unless
        specified.


        This is different that hte SeededSensitive as this is pre-before the asset
        has been created.(but added when the asset is created.'
      properties:
        category:
          $ref: '#/components/schemas/SensitiveCategoryEnum'
        description:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        metadata:
          $ref: '#/components/schemas/SensitiveMetadata'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        severity:
          $ref: '#/components/schemas/SensitiveSeverityEnum'
        text:
          description: this is the string representative of the sensative piece of
            data.
          type: string
      required:
      - text
      - category
      - severity
      - name
      - description
      title: SeededAssetSensitive
      type: object
    SeededAssetTag:
      description: This is similar to an SeededTag, where this is the minimum information
        of a tag, but this can get added to a seededAsset,  where you may not yet
        have an asset id.
      properties:
        category:
          $ref: '#/components/schemas/TagCategoryEnum'
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          description: this is the text that represents the tag.
          type: string
      required:
      - text
      title: SeededAssetTag
      type: object
    SeededAssetTags:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SeededAssetTag'
          type: array
      required:
      - iterable
      title: SeededAssetTags
      type: object
      x-stoplight:
        id: 8d3qwio1bpzf2
    SeededAssetWebsite:
      description: This is similar to an SeededWebsite, where this is the minimum
        information of a website, but this can get added to a seededAsset,  where
        you may not yet have an asset id.
      properties:
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        url:
          type: string
      required:
      - url
      - name
      title: SeededAssetWebsite
      type: object
    SeededAssetsRecommendation:
      description: 'This is the input data model for the /assets/recommend [GET] endpoint.
        It includes both a list of assets but also '
      properties:
        assets:
          $ref: '#/components/schemas/Assets'
        interactions:
          $ref: '#/components/schemas/InteractedAssets'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - assets
      - interactions
      title: SeededAssetsRecommendation
      type: object
    SeededBackup:
      description: This is a precursor to a Backup, for now this will not need to
        take any properties.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededBackup
      type: object
    SeededClassification:
      description: This is the specific classification of an Asset's Format.(This
        is on a per format basis b/c an asset could have different formats that are
        different format representations of the Asset.)
      properties:
        generic:
          $ref: '#/components/schemas/ClassificationGenericEnum'
        rendering:
          $ref: '#/components/schemas/ClassificationRenderingEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        specific:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
      title: SeededClassification
      type: object
    SeededConnectorAsset:
      description: A generic model to use with the Connector API that requires little
        to no additional information about the current application.
      properties:
        format:
          $ref: '#/components/schemas/SeededFormat'
        metadata:
          $ref: '#/components/schemas/SeededAssetMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - format
      title: SeededConnectorAsset
      type: object
    SeededConnectorConnection:
      description: A model that is passed to the context API at bootup
      properties:
        application:
          $ref: '#/components/schemas/SeededTrackedApplication'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      title: SeededConnectionContext
      type: object
    SeededConnectorCreation:
      description: A encompasing creation object that can be utilized to create either
        an asset or a format.
      properties:
        asset:
          $ref: '#/components/schemas/SeededConnectorAsset'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededConnectorCreation
      type: object
    SeededConnectorTracking:
      description: 'This model is designed to be light weight and low friction while
        most of the heavy lifting will be happening inside of the context servers.


        This Model is important because this has references to our materials, instead
        of fully referenced materials.(very similar to our SeededTrackedEvent, consider
        consolidating and converting these to Referenced models instead of ID''s)'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededConnectorTracking
      type: object
    SeededConversation:
      description: 'This is a pre-Conversation object.


        This will hold together a conversation. Ie allthe message within a conversation.


        All the additional properties on here used on here like(anchors/assets) are
        used for context that will seed the conversation.


        model is a calculated property, and will be the model of the last message
        sent if applicable.'
      properties:
        anchors:
          items:
            $ref: '#/components/schemas/SeededAnchor'
          type: array
        annotations:
          items:
            $ref: '#/components/schemas/SeededAnnotation'
          type: array
        application:
          $ref: '#/components/schemas/Application'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        demo:
          description: This will let us know if this conversation was generated as
            a 'demo' conversation
          type: boolean
        favorited:
          type: boolean
        messages:
          items:
            $ref: '#/components/schemas/SeededConversationMessage'
          type: array
        model:
          $ref: '#/components/schemas/ReferencedModel'
        name:
          description: This is a name that is customized.
          type: string
        pipeline:
          $ref: '#/components/schemas/QGPTPromptPipeline'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/ConversationTypeEnum'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - type
      title: SeededConversation
      type: object
      x-stoplight:
        id: 71d3t5evv1k7k
    SeededConversationMessage:
      description: 'This is a seeded version of a ConversationMessage.


        conversation is optional, this is because it can be used within the SeededConversation,
        however if this is passed into the /messages/create w/o a conversation uuid
        then we will throw an error.'
      properties:
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        fragment:
          $ref: '#/components/schemas/FragmentFormat'
        model:
          $ref: '#/components/schemas/Model'
        role:
          $ref: '#/components/schemas/QGPTConversationMessageRoleEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sentiment:
          $ref: '#/components/schemas/ConversationMessageSentimentEnum'
      required:
      - fragment
      - role
      title: SeededConversationMessage
      type: object
      x-stoplight:
        id: 00051c20fd9cc
    SeededDiscoverableAsset:
      description: 'Assumption: filters applied in this model will overwrite filters
        passed in SeededDiscoverableAssets'
      properties:
        directory:
          type: string
        file:
          $ref: '#/components/schemas/SeededFile'
        filters:
          $ref: '#/components/schemas/TLPDirectedDiscoveryFilters'
        fragment:
          $ref: '#/components/schemas/SeededFragment'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededDiscoverableAsset
      type: object
    SeededDiscoverableAssets:
      description: 'Assumption: filters imposed in this model can be overwritten by
        passing them in SeededDiscoverableAsset'
      properties:
        application:
          description: application id.
          type: string
        filters:
          $ref: '#/components/schemas/TLPDirectedDiscoveryFilters'
        iterable:
          description: This is an iterable of already snippitized snippets that we
            will compare && cluster.
          items:
            $ref: '#/components/schemas/SeededDiscoverableAsset'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      - iterable
      title: SeededDiscoverableAssets
      type: object
    SeededDiscoverableHtmlWebpage:
      properties:
        page:
          description: page's html as a string
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        url:
          description: 'The route of the page

            '
          type: string
      required:
      - url
      - page
      title: SeededDiscoverableHtmlWebpage
      type: object
    SeededDiscoverableHtmlWebpages:
      properties:
        application:
          description: This is the applicaiton Id used to connect to Pieces OS.
          type: string
        iterable:
          items:
            $ref: '#/components/schemas/SeededDiscoverableHtmlWebpage'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      - application
      title: SeededDiscoverableHtmlWebpages
      type: object
    SeededDiscoverableRelatedTag:
      description: ''
      properties:
        asset:
          description: this is a uuid that references an asset.
          type: string
        category:
          $ref: '#/components/schemas/TagCategoryEnum'
        format:
          description: (optionally) you can attach a tag to a format. so when you
            delete a format this tag will get removed from the asset as well.
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          description: This is the description of the tag.
          type: string
      required:
      - text
      - asset
      title: SeededDiscoverableRelatedTag
      type: object
    SeededDiscoverableRelatedTags:
      properties:
        application:
          description: This is the application id that this request is sent from.
          type: string
        iterable:
          items:
            $ref: '#/components/schemas/SeededDiscoverableRelatedTag'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      - application
      title: SeededDiscoverableRelatedTags
      type: object
    SeededDiscoverableSensitive:
      description: This is the SeededDiscoverableSensitive, this has every property
        that the seededSensitive has except this one is all optionally passed in.
        and will override our classification if provided.
      properties:
        asset:
          type: string
        category:
          $ref: '#/components/schemas/SensitiveCategoryEnum'
        description:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        metadata:
          $ref: '#/components/schemas/SensitiveMetadata'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        severity:
          $ref: '#/components/schemas/SensitiveSeverityEnum'
        text:
          description: this is the string representative of the sensative piece of
            data.
          type: string
      required:
      - asset
      - text
      title: SeededDiscoverableSensitive
      type: object
    SeededDiscoverableSensitives:
      properties:
        application:
          type: string
        iterable:
          items:
            $ref: '#/components/schemas/SeededDiscoverableSensitive'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      - application
      title: SeededDiscoverableSensitives
      type: object
    SeededDistribution:
      description: 'TODO if we add another distribution add to this, Distribution,
        and flattenedDistribution.


        can only use this Model with our Linkify Model.'
      properties:
        github:
          $ref: '#/components/schemas/SeededGitHubDistribution'
        mailgun:
          $ref: '#/components/schemas/MailgunDistribution'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededDistribution
      type: object
      x-stoplight:
        id: orslx6c53ex3r
    SeededDistributions:
      description: This is the plural version of a SeededDistribution that is not
        referenced just yet.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SeededDistribution'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SeededDistributions
      type: object
      x-stoplight:
        id: b471ymykrw25b
    SeededExternalProvider:
      description: This is the minimum information needed to connect an additional
        provider.
      properties:
        type:
          $ref: '#/components/schemas/ExternalProviderTypeEnum'
      required:
      - type
      title: SeededExternalProvider
      type: object
      x-stoplight:
        id: i97rjmncs0t92
    SeededFile:
      description: 'This is a base model for a File(Seeded).


        We will Throw an Error, if the text and the bytes properties are both null
        && if both the text and bytes properties are both defined. Ensure that you
        pass either a text or bytes property.


        bytes and string are both optionl but, if both are null or both are defined
        we will throw an error. So You will be required to pass one or the other,
        NOT both.'
      properties:
        bytes:
          $ref: '#/components/schemas/TransferableBytes'
        metadata:
          $ref: '#/components/schemas/FileMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        string:
          $ref: '#/components/schemas/TransferableString'
      title: SeededFile
      type: object
    SeededFormat:
      description: 'This is seeded data that will be come a format.


        We will throw an Error if, 1) file and fragment are both defined, 2) file
        and fragment are both null.


        if this is being used within the /assets/create endpoint or the /{application}/create
        endpoint, we will not take the classificaiton into account, as it is only
        used in the syntax highlighting related endpoints.That being said if you do
        want to override your classification, please look at the metadata within the
        file or the fragment.'
      properties:
        classification:
          $ref: '#/components/schemas/SeededClassification'
        file:
          $ref: '#/components/schemas/SeededFile'
        fragment:
          $ref: '#/components/schemas/SeededFragment'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededFormat
      type: object
    SeededFragment:
      description: This will be either a TransferableString or TransferableBytes that
        represent your fragment. ONLY Pass one or the other DONT pass both or neither.
      properties:
        bytes:
          $ref: '#/components/schemas/TransferableBytes'
        metadata:
          $ref: '#/components/schemas/FragmentMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        string:
          $ref: '#/components/schemas/TransferableString'
      title: SeededFragment
      type: object
    SeededGitHubDistribution:
      properties:
        gist:
          $ref: '#/components/schemas/SeededGitHubGistDistribution'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SeededGitHubDistribution
      type: object
      x-stoplight:
        id: 2hzex1ezhpuo3
    SeededGitHubGistDistribution:
      description: This is the minimum information needed to distribute a Piece to
        a Gist.
      properties:
        description:
          description: This is the description of the Gist Distribution
          type: string
        name:
          description: This is the name of the gist you will add.
          type: string
        public:
          description: we will default to true
          type: boolean
        recipients:
          $ref: '#/components/schemas/Recipients'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - name
      title: SeededGitHubGistDistribution
      type: object
      x-stoplight:
        id: 755788c9b52dc
    SeededGithubGistsImport:
      description: 'This is the body of the /github/gists/import,


        by default we will look for everything from your private gists, (TODO hook
        up public gists.)&& get clever


        currently we will not ensure that this is a good pieces for you but we will
        just get you the gist and let you do what you want with it(room for improvement,
        if we want to layer in advanced pieces discovery)


        For the future, we might want to add a max number of assets that are returned
        from this.'
      properties:
        application:
          description: application id.
          type: string
        public:
          description: This will default to false.(ie private), currently not supporting
            pulling public gists.
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      title: SeededGithubGistsImport
      type: object
      x-stoplight:
        id: uetelzqkre6hh
    SeededHint:
      properties:
        asset:
          description: This is an asset id that we are using to link this to an asset.
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        model:
          description: this is a model id. that we are using to link this to a model.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          description: This is the text of the hint.
          type: string
        type:
          $ref: '#/components/schemas/HintTypeEnum'
      required:
      - type
      - text
      title: SeededHint
      type: object
    SeededMacOSAsset:
      description: An Seeded Asset specific to MacOS which takes in a Value, and Application
      properties:
        application:
          $ref: '#/components/schemas/Application'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          description: The value of the text that you want to save as an asset.
          example: console.log("hello world")
          type: string
      required:
      - value
      title: SeededMacOSAsset
      type: object
    SeededModel:
      description: 'This is Precursor to a Model.


        bytes: here is the size of the model in a file local on your computer.

        ram: is the amount of ram usage when the model is loaded into memory.'
      properties:
        bytes:
          $ref: '#/components/schemas/ByteDescriptor'
        capabilities:
          $ref: '#/components/schemas/ModelCapabilities'
        cloud:
          description: This will inform the user if this was a model that is hosted
            in the cloud
          type: boolean
        cpu:
          description: This is an optional bool that is optimized for CPU usage.
          type: boolean
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        custom:
          description: This is reserved to customly register models.
          type: boolean
        description:
          description: An Optional Description of the model itself.
          type: string
        downloaded:
          description: This is an optional bool to let us know if this model has been
            downloaded locally.
          type: boolean
        foundation:
          $ref: '#/components/schemas/ModelFoundationEnum'
        maxTokens:
          $ref: '#/components/schemas/ModelMaxTokens'
        name:
          description: This is an Optional Name of the Model.
          type: string
        parameters:
          description: This is the number of parameters in terms of billions.
          nullable: true
          type: number
        provider:
          $ref: '#/components/schemas/ExternalMLProviderEnum'
        quantization:
          description: 'quantization is a string like: q8f16_0,  q4f16_1, etc...'
          type: string
        ram:
          $ref: '#/components/schemas/ByteDescriptor'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/ModelTypeEnum'
        unique:
          description: This is the unique model name used to load the model.
          type: string
        usage:
          $ref: '#/components/schemas/ModelUsageEnum'
        version:
          description: this is a version of the model.
          type: string
      required:
      - version
      - created
      - name
      - cloud
      - type
      - usage
      title: SeededModel
      type: object
    SeededModels:
      description: This is a Model that will hold an iterable of SeededModels.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/SeededModel'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: SeededModels
      type: object
      x-stoplight:
        id: xwt66hfbxybr3
    SeededPKCE:
      description: A model that initialized a PKCE Authentication Flow.
      properties:
        ADDITIONAL_PARAMETERS:
          description: Append any additional parameter to the end of your request,
            and it will be sent to the provider. For example, access_type=offline
            (for Google Refresh Tokens) , display=popup (for Windows Live popup mode).
          properties:
            access_type:
              enum:
              - offline
              type: string
            display:
              enum:
              - popup
              type: string
          type: object
        audience:
          description: 'The unique identifier of the target API you want to access.

            i.e. https://pieces.us.auth0.com/api/v2/'
          format: uri
          type: string
        client_id:
          description: Your application's Client ID.
          example: 9sW4Pa1LEjX67l6VO14u0207NLYeXnu1
          type: string
        code_challenge:
          description: Generated challenge from the code_verifier.
          type: string
        code_challenge_method:
          description: Method used to generate the challenge. The PKCE spec defines
            two methods, S256 and plain, however, Auth0 supports only S256 since the
            latter is discouraged.
          enum:
          - S256
          type: string
        domain:
          description: https://auth.pieces.services/authorize
          format: uri
          type: string
        invitation:
          type: string
        nonce:
          description: A local key that is held as the comparator to state, thus they
            should be the same.
          format: uuid
          type: string
        organization:
          type: string
        prompt:
          description: "\tTo initiate a silent authentication request, use prompt=none\
            \ (see Remarks for more info)."
          enum:
          - login
          - none
          type: string
        redirect_uri:
          description: http://localhost:8080/authentication/response
          format: uri
          type: string
        response_mode:
          enum:
          - form_post
          - web_message
          - fragment
          - query
          type: string
        response_type:
          description: Indicates to Auth0 which OAuth 2.0 Flow you want to perform.
            Use code for Authorization Code Grant (PKCE) Flow.
          enum:
          - code
          - token
          - id_token
          example: code
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        scope:
          description: The scopes which you want to request authorization for. These
            must be separated by a space. You can request any of the standard OpenID
            Connect (OIDC) scopes about users, such as profile and email, custom claims
            that must conform to a namespaced format, or any scopes supported by the
            target API (for example, read:contacts). Include offline_access to get
            a Refresh Token.
          items:
            enum:
            - offline_access
            - email
            - profile
            - openid
            type: string
          type: array
        screen_hint:
          description: Provides a hint to Auth0 as to what flow should be displayed.
            The default behavior is to show a login page but you can override this
            by passing 'signup' to show the signup page instead.
          enum:
          - signup
          type: string
        state:
          description: An opaque value the clients adds to the initial request that
            Auth0 includes when redirecting the back to the client. This value must
            be used by the client to prevent CSRF attacks.
          format: uuid
          type: string
      required:
      - response_type
      - state
      - nonce
      - code_challenge
      - code_challenge_method
      - scope
      - client_id
      title: SeededPKCE
      type: object
    SeededPerson:
      description: 'This is a per-cursor to a full person.


        Will throw an error, if asset is passed in but acces.scope is undefined.


        can optionally pass in our mechanism here, as the default will be manual unless
        specified.


        TODO consider updating these asset, format to referenced Models


        Note: model, access, mechanism will only be added if the asset is passed in.'
      properties:
        access:
          $ref: '#/components/schemas/PersonAccess'
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          items:
            $ref: '#/components/schemas/SeededAnnotation'
          type: array
        asset:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        model:
          $ref: '#/components/schemas/PersonModel'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/PersonType'
      required:
      - type
      title: SeededPerson
      type: object
    SeededRange:
      description: "This is a preIdentified version of a Range.\n\nconversation: this\
        \ is here to specify the relationship that we want to set up with the Range.\
        \ \nIE for this case we want to associate a Range with a Conversation.grounding.temporal.workstream.\
        \ Otherwise, if this\nwas a conversation we would have no way to know what\
        \ relationship that we want to set up on the conversation w/ the range.\n\
        (because this will be set up for many relationShip opportunities that have\
        \ different functionalities)"
      properties:
        between:
          type: boolean
        conversation:
          $ref: '#/components/schemas/SeededRangeConversationAssociation'
        from:
          $ref: '#/components/schemas/GroupedTimestamp'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        summary:
          $ref: '#/components/schemas/ReferencedWorkstreamSummary'
        to:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      title: SeededRange
      type: object
    SeededRangeConversationAssociation:
      properties:
        grounding:
          $ref: '#/components/schemas/SeededRangeConversationGroundingAssociation'
        reference:
          $ref: '#/components/schemas/ReferencedConversation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - reference
      title: SeededRangeConversationAssociation
      type: object
    SeededRangeConversationGroundingAssociation:
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        temporal:
          $ref: '#/components/schemas/SeededRangeConversationGroundingTemporalAssociation'
      title: SeededRangeConversationGroundingAssociation
      type: object
    SeededRangeConversationGroundingTemporalAssociation:
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        workstream:
          type: boolean
      title: SeededRangeConversationGroundingTemporalAssociation
      type: object
    SeededScore:
      description: 'This is the low level seeded score and will let us know what exactly
        we want to increment on our material.


        Note: ONLY include one of these, as we will only increment one of the following.'
      properties:
        priority:
          type: boolean
        reference:
          type: boolean
        reuse:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        searched:
          type: boolean
        update:
          type: boolean
      title: SeededScore
      type: object
      x-stoplight:
        id: 7tiju5l9hvtcw
    SeededScoreIncrement:
      description: 'This is the body for a respective scores increment,


        This will enable us to know what material we want to increment, all of which
        are optional, if it is defined we will attempt to increment the material.'
      properties:
        anchor:
          $ref: '#/components/schemas/SeededScore'
        anchorPoint:
          $ref: '#/components/schemas/SeededScore'
        anchorPoints:
          $ref: '#/components/schemas/SeededScore'
        anchors:
          $ref: '#/components/schemas/SeededScore'
        annotation:
          $ref: '#/components/schemas/SeededScore'
        annotations:
          $ref: '#/components/schemas/SeededScore'
        asset:
          $ref: '#/components/schemas/SeededScore'
        assets:
          $ref: '#/components/schemas/SeededScore'
        conversation:
          $ref: '#/components/schemas/SeededScore'
        conversationMessage:
          $ref: '#/components/schemas/SeededScore'
        conversationMessages:
          $ref: '#/components/schemas/SeededScore'
        conversations:
          $ref: '#/components/schemas/SeededScore'
        hint:
          $ref: '#/components/schemas/SeededScore'
        hints:
          $ref: '#/components/schemas/SeededScore'
        person:
          $ref: '#/components/schemas/SeededScore'
        persons:
          $ref: '#/components/schemas/SeededScore'
        range:
          $ref: '#/components/schemas/SeededScore'
        ranges:
          $ref: '#/components/schemas/SeededScore'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sensitive:
          $ref: '#/components/schemas/SeededScore'
        sensitives:
          $ref: '#/components/schemas/SeededScore'
        share:
          $ref: '#/components/schemas/SeededScore'
        shares:
          $ref: '#/components/schemas/SeededScore'
        tag:
          $ref: '#/components/schemas/SeededScore'
        tags:
          $ref: '#/components/schemas/SeededScore'
        website:
          $ref: '#/components/schemas/SeededScore'
        websites:
          $ref: '#/components/schemas/SeededScore'
        workstream_event:
          $ref: '#/components/schemas/SeededScore'
        workstream_events:
          $ref: '#/components/schemas/SeededScore'
        workstream_summaries:
          $ref: '#/components/schemas/SeededScore'
        workstream_summary:
          $ref: '#/components/schemas/SeededScore'
      title: SeededScoreIncrement
      type: object
      x-stoplight:
        id: 1bf9e6d13bbcb
    SeededSensitive:
      description: 'This is the seededSensitive, this does not have an id yet as we
        will add it on the server side.


        can optionally pass in our mechanism here, as the default will be manual unless
        specified.


        TODO consider updating these asset,format to referenced Models'
      properties:
        asset:
          type: string
        category:
          $ref: '#/components/schemas/SensitiveCategoryEnum'
        description:
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        metadata:
          $ref: '#/components/schemas/SensitiveMetadata'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        severity:
          $ref: '#/components/schemas/SensitiveSeverityEnum'
        text:
          description: this is the string representative of the sensative piece of
            data.
          type: string
      required:
      - asset
      - text
      - category
      - severity
      - name
      - description
      title: SeededSensitive
      type: object
    SeededShare:
      description: ' required to pass in an asset or assets.'
      properties:
        access:
          $ref: '#/components/schemas/AccessEnum'
        asset:
          $ref: '#/components/schemas/Asset'
        assets:
          $ref: '#/components/schemas/Assets'
        name:
          description: optional name, if it is available. and must be unique.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        users:
          description: if private please specificy some users you want to share this
            with.
          items:
            $ref: '#/components/schemas/SeededUser'
          type: array
      required:
      - access
      title: SeededShare
      type: object
    SeededTag:
      description: 'This is the minimum information needed when creating a Tag.


        Default we will attach manual to a tag unless otherwise specified for mechanism.


        you can optionally add an asset, format, or person uuid to attach this tag
        directly to it


        TODO consider updating these asset,format to referenced Models'
      properties:
        asset:
          description: this is a uuid that references an asset.
          type: string
        category:
          $ref: '#/components/schemas/TagCategoryEnum'
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        person:
          description: uuid of the person, you want to add this tag too
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          description: This is the description of the tag.
          type: string
      required:
      - text
      title: SeededTag
      type: object
    SeededTrackedApplication:
      description: ''
      properties:
        automaticUnload:
          description: This is a proper that will let us know if we will proactivity
            unload all of your machine learning models.by default this is false.
          type: boolean
        capabilities:
          $ref: '#/components/schemas/CapabilitiesEnum'
        name:
          $ref: '#/components/schemas/ApplicationNameEnum'
        platform:
          $ref: '#/components/schemas/PlatformEnum'
        privacy:
          $ref: '#/components/schemas/PrivacyEnum'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        version:
          description: This is the specific version number 0.0.0
          type: string
      required:
      - name
      - version
      - platform
      title: SeededTrackedApplication
      type: object
    SeededUltraSuiteAsset:
      description: 'A SeededUEAsset is the minimum data sent from UE required to create
        an asset within Pieces.


        Fragment & file are both optional properties however we will throw an internal
        error if both fragment and file are passed through or if both are undefined.'
      properties:
        description:
          type: string
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        format:
          $ref: '#/components/schemas/SeededFormat'
        name:
          description: (optional) name is the name of the file
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - format
      title: SeededUltraSuiteAsset
      type: object
    SeededUser:
      description: ''
      properties:
        emails:
          items:
            type: string
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - emails
      title: SeededUser
      type: object
    SeededWebsite:
      description: 'This is the minimum information required to create a website for
        a specific asset.


        you can optionally add an asset, or person id to attach this website directly
        to it


        TODO consider updating these asset,format to referenced Models'
      properties:
        asset:
          description: This is the specific asset that this website is going to get
            attached to!!
          type: string
        conversation:
          description: This is the specific conversation that this website is going
            to get attached to!!
          type: string
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        name:
          description: name of the website.(customizable and updateable as well.)
          type: string
        person:
          description: this is a uuid of a person that we are going to add the website
            too.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        url:
          description: this is the url of the website.
          type: string
      required:
      - url
      - name
      title: SeededWebsite
      type: object
    SeededWorkstreamEvent:
      description: This is a precreated version of a WorkstreamEvent event, this will
        be used ingested into PiecesOS and PiecesOS will do all the magic to transform
        this into relevant data show in the workstream feed.
      properties:
        application:
          $ref: '#/components/schemas/Application'
        context:
          $ref: '#/components/schemas/WorkstreamEventContext'
        internal_identifier:
          description: This is used to override the event identifier, if this was
            an event that was originally in the internal events collection.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summary:
          $ref: '#/components/schemas/ReferencedWorkstreamSummary'
        trigger:
          $ref: '#/components/schemas/WorkstreamEventTrigger'
      required:
      - application
      - trigger
      title: SeededWorkstreamEvent
      type: object
    SeededWorkstreamIngestion:
      description: 'This is used as the input in the Context ingestion endpoint for
        the feed.


        This will take in a required seed, this will get created as an internal WorkstreamEvent
        until we determine

        internally that this event is relevant and will then attach it to a WorkstreamSummary
        and it will get moved over to a WorkstreamEvent.'
      properties:
        event:
          $ref: '#/components/schemas/SeededWorkstreamEvent'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - event
      title: SeededWorkstreamIngestion
      type: object
    SeededWorkstreamSuggestionsRefresh:
      description: "This is used in the input of the /workstream/feed/refresh\n\n\
        The application here will let us know if what scope you would like to refresh\
        \ the stream for. IE an Application will \nprovide bias in the items that\
        \ are displayed.\n\nnote: context can be used here to provide further bias\
        \ to the suggestions."
      properties:
        application:
          $ref: '#/components/schemas/Application'
        context:
          $ref: '#/components/schemas/WorkstreamEventContext'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - application
      title: SeededWorkstreamSuggestionsRefresh
      type: object
    SeededWorkstreamSummary:
      description: This is a seeded version of a WorkstreamSummary
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          items:
            $ref: '#/components/schemas/SeededAnnotation'
          type: array
        applications:
          $ref: '#/components/schemas/Applications'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        events:
          $ref: '#/components/schemas/FlattenedWorkstreamEvents'
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        ranges:
          $ref: '#/components/schemas/FlattenedRanges'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - name
      - range
      - model
      title: SeededWorkstreamSummary
      type: object
      x-stoplight:
        id: p58g93fj107ow
    Seeds:
      description: This is a plural model for multiple Seed.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Seed'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: Seeds
      type: object
    Sensitive:
      description: This is a fully referenced representation of a sensitive pieces
        of data.
      properties:
        asset:
          $ref: '#/components/schemas/FlattenedAsset'
        category:
          $ref: '#/components/schemas/SensitiveCategoryEnum'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        description:
          type: string
        id:
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanism:
          $ref: '#/components/schemas/MechanismEnum'
        metadata:
          $ref: '#/components/schemas/SensitiveMetadata'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        severity:
          $ref: '#/components/schemas/SensitiveSeverityEnum'
        text:
          type: string
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - created
      - updated
      - asset
      - text
      - mechanism
      - category
      - severity
      - name
      - description
      title: Sensitive
      type: object
    SensitiveCategoryEnum:
      description: This is the enum that is use to describe the category of our Sensitive
        Model.
      enum:
      - SECRET
      - API_KEY
      - CLIENT_ID
      - CLIENT_SECRET
      - SECRET_KEY
      - API_TOKEN
      - ACCESS_KEY
      - ACCESS_TOKEN
      - URL
      - PUBLIC_KEY
      - PRIVATE_KEY
      - API_ID
      - WEB_HOOK_URL
      title: SensitiveCategoryEnum
      type: string
    SensitiveMetadata:
      description: This is optional metatdata attached to a sensitive piece of data.
      properties:
        entropy:
          description: entropy of the sensitive
          type: number
        match:
          $ref: '#/components/schemas/TextMatch'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: SensitiveMetadata
      type: object
    SensitiveSeverityEnum:
      description: This is the enum used to describe the severity of our sensitive
        model. ie low, moderate, high
      enum:
      - LOW
      - MODERATE
      - HIGH
      title: SensitiveSeverityEnum
      type: string
    Sensitives:
      description: This is a model that represents many individual sensitive pieces
        of data.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/Sensitive'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Sensitives
      type: object
    Session:
      description: This is a specific model that will let us know at what time this
        user was using the application.
      properties:
        closed:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          description: The UUID of the current Session
          type: string
        opened:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - opened
      title: Session
      type: object
    Share:
      description: 'This represents what information that is relavent to anything
        and every sharing related. v1 will look very bare and will add more and more
        data as we go!


        if user is undefined && access is public then we have an asset that is publicly
        available.'
      properties:
        access:
          $ref: '#/components/schemas/AccessEnum'
        accessors:
          $ref: '#/components/schemas/Accessors'
        asset:
          $ref: '#/components/schemas/FlattenedAsset'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        distributions:
          $ref: '#/components/schemas/Distributions'
        id:
          description: This is the uuid that represents this share model.
          type: string
        link:
          description: This is the prebuilt link.
          type: string
        name:
          description: this is an optional name we can give to the link, ie ?p=JAVASCRIPT
            or what ever the user wants as long as it is available.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        short:
          description: This is a shortened version of our uuid.
          type: string
        user:
          description: this is the uuid of the user that the share is created for.
          type: string
      required:
      - id
      - link
      - access
      - accessors
      - created
      - short
      title: Share
      type: object
    Shares:
      description: this is just an iterable of our individual share models.
      properties:
        iterable:
          description: this is just an iterable of our individual share models.
          items:
            $ref: '#/components/schemas/Share'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Shares
      type: object
    Space:
      description: This is used in the TrackedAssetsEventSearchMetadata
      properties:
        duration:
          description: this is the number in ms it took to run search.
          type: integer
        size:
          description: This is the size of your current catalog.(number of assets)
          type: integer
      title: Space
      type: object
    StreamedIdentifier:
      description: This is currently only used within /assets/steam/identifiers &&
        /conversations/steam/identifiers && annotations but can be used with other
        as well, if we want to expand this class.
      properties:
        annotation:
          $ref: '#/components/schemas/ReferencedAnnotation'
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        deleted:
          description: This is a specific bool that will let us know if we deleted
            an Identifierfrom the db.
          type: boolean
      title: StreamedIdentifier
      type: object
    StreamedIdentifiers:
      description: This is currently only used within /assets/steam/identifiers &&
        /conversations/steam/identifiers but can be used with other as well, if we
        want to expand this class. && expand the StreamedIdentifier class.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/StreamedIdentifier'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: StreamedIdentifiers
      type: object
    StripeAddress:
      description: ''
      nullable: true
      properties:
        city:
          description: City, district, suburb, town, or village.
          maxLength: 5000
          nullable: true
          type: string
        country:
          description: Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
          maxLength: 5000
          nullable: true
          type: string
        line1:
          description: Address line 1 (e.g., street, PO Box, or company name).
          maxLength: 5000
          nullable: true
          type: string
        line2:
          description: Address line 2 (e.g., apartment, suite, unit, or building).
          maxLength: 5000
          nullable: true
          type: string
        postal_code:
          description: ZIP or postal code.
          maxLength: 5000
          nullable: true
          type: string
        state:
          description: State, county, province, or region.
          maxLength: 5000
          nullable: true
          type: string
      title: StripeAddress
      type: object
    StripeAnyEventData:
      properties:
        active:
          description: Whether the product is currently available for purchase.
          type: boolean
        address:
          $ref: '#/components/schemas/StripeAddress'
        application_fee_percent:
          description: A non-negative decimal between 0 and 100, with at most two
            decimal places. This represents the percentage of the subscription invoice
            subtotal that will be transferred to the application owner's Stripe account.
          nullable: true
          type: number
        automatic_tax:
          $ref: '#/components/schemas/StripeAutomaticTax'
        balance:
          description: Current balance, if any, being stored on the customer. If negative,
            the customer has credit to apply to their next invoice. If positive, the
            customer has an amount owed that will be added to their next invoice.
            The balance does not refer to any unpaid invoices; it solely takes into
            account amounts that have yet to be successfully applied to any invoice.
            This balance is only taken into account as invoices are finalized.
          type: integer
        billing_cycle_anchor:
          description: Determines the date of the first full invoice, and, for plans
            with `month` or `year` intervals, the day of the month for subsequent
            invoices.
          format: unix-time
          type: integer
        cancel_at:
          description: A date in the future at which the subscription will automatically
            get canceled
          format: unix-time
          nullable: true
          type: integer
        cancel_at_period_end:
          description: If the subscription has been canceled with the `at_period_end`
            flag set to `true`, `cancel_at_period_end` on the subscription will be
            true. You can use this attribute to determine whether a subscription that
            has a status of active is scheduled to be canceled at the end of the current
            period.
          type: boolean
        canceled_at:
          description: If the subscription has been canceled, the date of that cancellation.
            If the subscription was canceled with `cancel_at_period_end`, `canceled_at`
            will reflect the time of the most recent update request, not the end of
            the subscription period when the subscription is automatically moved to
            a canceled state.
          format: unix-time
          nullable: true
          type: integer
        collection_method:
          description: Either `charge_automatically`, or `send_invoice`. When charging
            automatically, Stripe will attempt to pay this subscription at the end
            of the cycle using the default source attached to the customer. When sending
            an invoice, Stripe will email your customer an invoice with payment instructions.
          enum:
          - charge_automatically
          - send_invoice
          type: string
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        currency:
          description: Three-letter [ISO code for the currency](https://stripe.com/docs/currencies)
            the customer can be charged in for recurring billing purposes.
          maxLength: 5000
          nullable: true
          type: string
        current_period_end:
          description: End of the current period that the subscription has been invoiced
            for. At the end of this period, a new invoice will be created.
          format: unix-time
          type: integer
        current_period_start:
          description: Start of the current period that the subscription has been
            invoiced for.
          format: unix-time
          type: integer
        customer:
          description: ID of the customer who owns the subscription.
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
            - $ref: null
        days_until_due:
          description: Number of days a customer has to pay invoices generated by
            this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
          nullable: true
          type: integer
        default_payment_method:
          description: ID of the default payment method for the subscription. It must
            belong to the customer associated with the subscription. This takes precedence
            over `default_source`. If neither are set, invoices will use the customer's
            [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method)
            or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
        default_source:
          description: ID of the default payment source for the subscription. It must
            belong to the customer associated with the subscription and be in a chargeable
            state. If `default_payment_method` is also set, `default_payment_method`
            will take precedence. If neither are set, invoices will use the customer's
            [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method)
            or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
            - $ref: null
            - $ref: null
            - $ref: null
            - $ref: null
        delinquent:
          description: 'When the customer''s latest invoice is billed by charging
            automatically, `delinquent` is `true` if the invoice''s latest charge
            failed. When the customer''s latest invoice is billed by sending an invoice,
            `delinquent` is `true` if the invoice isn''t paid by its due date.


            If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection),
            `delinquent` doesn''t get reset to `false`.'
          nullable: true
          type: boolean
        description:
          description: An arbitrary string attached to the object. Often useful for
            displaying to users.
          maxLength: 5000
          nullable: true
          type: string
        email:
          description: The customer's email address.
          maxLength: 5000
          nullable: true
          type: string
        ended_at:
          description: If the subscription has ended, the date the subscription ended.
          format: unix-time
          nullable: true
          type: integer
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        images:
          description: A list of up to 8 URLs of images for this product, meant to
            be displayable to the customer.
          items:
            maxLength: 5000
            type: string
          type: array
        invoice_prefix:
          description: The prefix for the customer used to generate unique invoice
            numbers.
          maxLength: 5000
          nullable: true
          type: string
        invoice_settings:
          $ref: '#/components/schemas/StripeInvoiceSettingCustomerSetting'
        items:
          description: List of subscription items, each with an attached price.
          properties:
            data:
              description: Details about each object.
              items:
                $ref: '#/components/schemas/StripeSubscriptionItem'
              type: array
            has_more:
              description: True if this list has another page of items after this
                one that can be fetched.
              type: boolean
            object:
              description: String representing the object's type. Objects of the same
                type share the same value. Always has the value `list`.
              enum:
              - list
              type: string
            url:
              description: The URL where this list can be accessed.
              maxLength: 5000
              type: string
          required:
          - data
          - has_more
          - object
          - url
          title: SubscriptionItemList
          type: object
          x-expandableFields:
          - data
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        metadata:
          $ref: '#/components/schemas/RuntimeStripeAnyMetadata'
        name:
          description: The customer's full name or business name.
          maxLength: 5000
          nullable: true
          type: string
        next_invoice_sequence:
          description: The suffix of the customer's next invoice number, e.g., 0001.
          type: integer
        next_pending_invoice_item_invoice:
          description: Specifies the approximate timestamp on which any pending invoice
            items will be billed according to the schedule provided at `pending_invoice_item_interval`.
          format: unix-time
          nullable: true
          type: integer
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - subscription
          type: string
        pending_setup_intent:
          description: You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents)
            to collect user authentication when creating a subscription without immediate
            payment or updating a subscription's payment method, allowing you to optimize
            for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
        pending_update:
          description: If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates)
            that will be applied to the subscription once the `latest_invoice` has
            been paid.
          nullable: true
          type: string
        phone:
          description: The customer's phone number.
          maxLength: 5000
          nullable: true
          type: string
        preferred_locales:
          description: The customer's preferred locales (languages), ordered by preference.
          items:
            maxLength: 5000
            type: string
          nullable: true
          type: array
        schedule:
          description: The schedule attached to the subscription
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
        shippable:
          description: Whether this product is shipped (i.e., physical goods).
          nullable: true
          type: boolean
        shipping:
          $ref: '#/components/schemas/StripeShipping'
        start_date:
          description: Date when the subscription was first created. The date might
            differ from the `created` date due to backdating.
          format: unix-time
          type: integer
        statement_descriptor:
          description: Extra information about a product which will appear on your
            customer's credit card statement. In the case that multiple products are
            billed at once, the first statement descriptor will be used.
          maxLength: 5000
          nullable: true
          type: string
        status:
          description: 'Possible values are `incomplete`, `incomplete_expired`, `trialing`,
            `active`, `past_due`, `canceled`, or `unpaid`.

            For `collection_method=charge_automatically` a subscription moves into
            `incomplete` if the initial payment attempt fails. A subscription in this
            state can only have metadata and default_source updated. Once the first
            invoice is paid, the subscription moves into an `active` state. If the
            first invoice is not paid within 23 hours, the subscription transitions
            to `incomplete_expired`. This is a terminal state, the open invoice will
            be voided and no further invoices will be generated.

            A subscription that is currently in a trial period is `trialing` and moves
            to `active` when the trial period is over.

            If subscription `collection_method=charge_automatically` it becomes `past_due`
            when payment to renew it fails and `canceled` or `unpaid` (depending on
            your subscriptions settings) when Stripe has exhausted all payment retry
            attempts.

            If subscription `collection_method=send_invoice` it becomes `past_due`
            when its invoice is not paid by the due date, and `canceled` or `unpaid`
            if it is still not paid by an additional deadline after that. Note that
            when a subscription has a status of `unpaid`, no subsequent invoices will
            be attempted (invoices will be created, but then immediately automatically
            closed). After receiving updated payment information from a customer,
            you may choose to reopen and pay their closed invoices.'
          enum:
          - active
          - canceled
          - incomplete
          - incomplete_expired
          - past_due
          - trialing
          - unpaid
          type: string
        tax_exempt:
          description: Describes the customer's tax exemption status. One of `none`,
            `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs
            include the text **"Reverse charge"**.
          enum:
          - exempt
          - none
          - reverse
          nullable: true
          type: string
        trial_end:
          description: If the subscription has a trial, the end of that trial.
          format: unix-time
          nullable: true
          type: integer
        trial_start:
          description: If the subscription has a trial, the beginning of that trial.
          format: unix-time
          nullable: true
          type: integer
        unit_label:
          description: "A label that represents units of this product in Stripe and\
            \ on customers\u2019 receipts and invoices. When set, this will be included\
            \ in associated invoice line item descriptions."
          maxLength: 5000
          nullable: true
          type: string
        updated:
          description: Time at which the object was last updated. Measured in seconds
            since the Unix epoch.
          format: unix-time
          type: integer
        url:
          description: A URL of a publicly-accessible webpage for this product.
          maxLength: 2048
          nullable: true
          type: string
      title: StripeAnyEventData
      type: object
    StripeAutomaticTax:
      description: ''
      properties:
        enabled:
          description: Whether Stripe automatically computes tax on this invoice.
          type: boolean
        status:
          description: The status of the most recent automated tax calculation for
            this invoice.
          enum:
          - complete
          - failed
          - requires_location_inputs
          nullable: true
          type: string
      required:
      - enabled
      title: StripeAutomaticTax
      type: object
    StripeCustomer:
      description: '`Customer` objects allow you to perform recurring charges, and
        to track

        multiple charges, that are associated with the same customer. The API allows

        you to create, delete, and update your customers. You can retrieve individual

        customers as well as a list of all your customers.


        Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).'
      properties:
        address:
          $ref: '#/components/schemas/StripeAddress'
        balance:
          description: Current balance, if any, being stored on the customer. If negative,
            the customer has credit to apply to their next invoice. If positive, the
            customer has an amount owed that will be added to their next invoice.
            The balance does not refer to any unpaid invoices; it solely takes into
            account amounts that have yet to be successfully applied to any invoice.
            This balance is only taken into account as invoices are finalized.
          type: integer
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        currency:
          description: Three-letter [ISO code for the currency](https://stripe.com/docs/currencies)
            the customer can be charged in for recurring billing purposes.
          maxLength: 5000
          nullable: true
          type: string
        default_source:
          description: 'ID of the default payment source for the customer.

            If you are using payment methods created via the PaymentMethods API, see
            the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method)
            field instead.'
          nullable: true
          type: string
        delinquent:
          description: 'When the customer''s latest invoice is billed by charging
            automatically, `delinquent` is `true` if the invoice''s latest charge
            failed. When the customer''s latest invoice is billed by sending an invoice,
            `delinquent` is `true` if the invoice isn''t paid by its due date.


            If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection),
            `delinquent` doesn''t get reset to `false`.'
          nullable: true
          type: boolean
        description:
          description: An arbitrary string attached to the object. Often useful for
            displaying to users.
          maxLength: 5000
          nullable: true
          type: string
        email:
          description: The customer's email address.
          maxLength: 5000
          nullable: true
          type: string
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        invoice_prefix:
          description: The prefix for the customer used to generate unique invoice
            numbers.
          maxLength: 5000
          nullable: true
          type: string
        invoice_settings:
          $ref: '#/components/schemas/StripeInvoiceSettingCustomerSetting'
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        metadata:
          $ref: '#/components/schemas/RuntimeStripeAnyMetadata'
        name:
          description: The customer's full name or business name.
          maxLength: 5000
          nullable: true
          type: string
        next_invoice_sequence:
          description: The suffix of the customer's next invoice number, e.g., 0001.
          type: integer
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - customer
          type: string
        phone:
          description: The customer's phone number.
          maxLength: 5000
          nullable: true
          type: string
        preferred_locales:
          description: The customer's preferred locales (languages), ordered by preference.
          items:
            maxLength: 5000
            type: string
          nullable: true
          type: array
        shipping:
          $ref: '#/components/schemas/StripeShipping'
        tax_exempt:
          description: Describes the customer's tax exemption status. One of `none`,
            `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs
            include the text **"Reverse charge"**.
          enum:
          - exempt
          - none
          - reverse
          nullable: true
          type: string
      required:
      - created
      - id
      - livemode
      - object
      title: StripeCustomer
      type: object
    StripeCustomersResponse:
      description: A response object returned from stripe customer endpoints such
        as /customers https://stripe.com/docs/api/customers/list
      properties:
        data:
          items:
            $ref: '#/components/schemas/StripeCustomer'
          minItems: 0
          type: array
          uniqueItems: false
        has_more:
          type: boolean
        object:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
      required:
      - object
      - url
      - has_more
      - data
      title: StripeCustomersResponse
      type: object
    StripeEvent:
      description: 'Events are our way of letting you know when something interesting
        happens in

        your account. When an interesting event occurs, we create a new `Event`

        object. For example, when a charge succeeds, we create a `charge.succeeded`

        event; and when an invoice payment attempt fails, we create an

        `invoice.payment_failed` event. Note that many API requests may cause multiple

        events to be created. For example, if you create a new subscription for a

        customer, you will receive both a `customer.subscription.created` event and
        a

        `charge.succeeded` event.


        Events occur when the state of another API resource changes. The state of
        that

        resource at the time of the change is embedded in the event''s data field.
        For

        example, a `charge.succeeded` event will contain a charge, and an

        `invoice.payment_failed` event will contain an invoice.


        As with other API resources, you can use endpoints to retrieve an

        [individual event](https://stripe.com/docs/api#retrieve_event) or a [list
        of events](https://stripe.com/docs/api#list_events)

        from the API. We also have a separate

        [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the

        `Event` objects directly to an endpoint on your server. Webhooks are managed

        in your

        [account settings](https://dashboard.stripe.com/account/webhooks),

        and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help
        you get set up.


        When using [Connect](https://stripe.com/docs/connect), you can also receive
        notifications of

        events that occur in connected accounts. For these events, there will be an

        additional `account` attribute in the received `Event` object.


        **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)
        is

        guaranteed only for 30 days.'
      properties:
        account:
          description: The connected account that originated the event.
          maxLength: 5000
          type: string
        api_version:
          description: 'The Stripe API version used to render `data`. *Note: This
            property is populated only for events on or after October 31, 2014*.'
          maxLength: 5000
          nullable: true
          type: string
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        data:
          $ref: '#/components/schemas/StripeNotificationEventData'
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - event
          type: string
        pending_webhooks:
          description: Number of webhooks that have yet to be successfully delivered
            (i.e., to return a 20x response) to the URLs you've specified.
          type: integer
        request:
          $ref: '#/components/schemas/StripeNotificationEventRequest'
        type:
          description: Description of the event (e.g., `invoice.created` or `charge.refunded`).
          maxLength: 5000
          type: string
      required:
      - created
      - data
      - id
      - livemode
      - object
      - pending_webhooks
      - type
      title: StripeEvent
      type: object
    StripeInvoiceSettingCustomField:
      description: ''
      properties:
        name:
          description: The name of the custom field.
          maxLength: 5000
          type: string
        value:
          description: The value of the custom field.
          maxLength: 5000
          type: string
      required:
      - name
      - value
      title: StripeInvoiceSettingCustomField
      type: object
    StripeInvoiceSettingCustomerSetting:
      description: ''
      properties:
        custom_fields:
          description: Default custom fields to be displayed on invoices for this
            customer.
          items:
            $ref: '#/components/schemas/StripeInvoiceSettingCustomField'
          nullable: true
          type: array
        default_payment_method:
          description: ID of a payment method that's attached to the customer, to
            be used as the customer's default payment method for subscriptions and
            invoices.
          nullable: true
          type: string
        footer:
          description: Default footer to be displayed on invoices for this customer.
          maxLength: 5000
          nullable: true
          type: string
      title: StripeInvoiceSettingCustomerSetting
      type: object
    StripeNotificationEventData:
      description: A combination fields blended from Subscription, Customer, Product,
        etc. Specific to Runtime Support.
      properties:
        object:
          $ref: '#/components/schemas/StripeAnyEventData'
      title: StripeNotificationEventData
      type: object
    StripeNotificationEventRequest:
      description: ''
      properties:
        id:
          description: ID of the API request that caused the event. If null, the event
            was automatic (e.g., Stripe's automatic subscription handling). Request
            logs are available in the [dashboard](https://dashboard.stripe.com/logs),
            but currently not in the API.
          maxLength: 5000
          nullable: true
          type: string
        idempotency_key:
          description: 'The idempotency key transmitted during the request, if any.
            *Note: This property is populated only for events on or after May 23,
            2017*.'
          maxLength: 5000
          nullable: true
          type: string
      title: NotificationEventRequest
      type: object
    StripePrice:
      description: "Prices define the unit cost, currency, and (optional) billing\
        \ cycle for both recurring and one-time purchases of products.\n[Products](https://stripe.com/docs/api#products)\
        \ help you track inventory or provisioning, and prices help you track payment\
        \ terms. Different physical goods or levels of service should be represented\
        \ by products, and pricing options should be represented by prices. This approach\
        \ lets you change prices without having to change your provisioning scheme.\n\
        For example, you might have a single \"gold\" product that has prices for\
        \ $10/month, $100/year, and \u20AC9 once.\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),\
        \ [create an invoice](https://stripe.com/docs/billing/invoices/create), and\
        \ more about [products and prices](https://stripe.com/docs/billing/prices-guide)."
      properties:
        active:
          description: Whether the price can be used for new purchases.
          type: boolean
        billing_scheme:
          description: Describes how to compute the price per period. Either `per_unit`
            or `tiered`. `per_unit` indicates that the fixed amount (specified in
            `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity`
            (for prices with `usage_type=licensed`), or per unit of total usage (for
            prices with `usage_type=metered`). `tiered` indicates that the unit pricing
            will be computed using a tiering strategy as defined using the `tiers`
            and `tiers_mode` attributes.
          enum:
          - per_unit
          - tiered
          type: string
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        currency:
          description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
            in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
          type: string
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        lookup_key:
          description: A lookup key used to retrieve prices dynamically from a static
            string.
          maxLength: 5000
          nullable: true
          type: string
        nickname:
          description: A brief description of the price, hidden from customers.
          maxLength: 5000
          nullable: true
          type: string
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - price
          type: string
        product:
          description: The ID of the product this price is associated with.
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
            - $ref: null
        tax_behavior:
          description: Specifies whether the price is considered inclusive of taxes
            or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
            Once specified as either `inclusive` or `exclusive`, it cannot be changed.
          enum:
          - exclusive
          - inclusive
          - unspecified
          nullable: true
          type: string
        tiers:
          description: Each element represents a pricing tier. This parameter requires
            `billing_scheme` to be set to `tiered`. See also the documentation for
            `billing_scheme`.
          items:
            $ref: '#/components/schemas/StripePriceTier'
          type: array
        tiers_mode:
          description: Defines if the tiering price should be `graduated` or `volume`
            based. In `volume`-based tiering, the maximum quantity within a period
            determines the per unit price. In `graduated` tiering, pricing can change
            as the quantity grows.
          enum:
          - graduated
          - volume
          nullable: true
          type: string
        type:
          description: One of `one_time` or `recurring` depending on whether the price
            is for a one-time purchase or a recurring (subscription) purchase.
          enum:
          - one_time
          - recurring
          type: string
        unit_amount:
          description: The unit amount in %s to be charged, represented as a whole
            integer if possible. Only set if `billing_scheme=per_unit`.
          nullable: true
          type: integer
        unit_amount_decimal:
          description: The unit amount in %s to be charged, represented as a decimal
            string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
          format: decimal
          nullable: true
          type: string
      required:
      - active
      - billing_scheme
      - created
      - currency
      - id
      - livemode
      - object
      - product
      - type
      title: StripePrice
      type: object
    StripePriceTier:
      description: ''
      properties:
        flat_amount:
          description: Price for the entire tier.
          nullable: true
          type: integer
        flat_amount_decimal:
          description: Same as `flat_amount`, but contains a decimal value with at
            most 12 decimal places.
          format: decimal
          nullable: true
          type: string
        unit_amount:
          description: Per unit price for units relevant to the tier.
          nullable: true
          type: integer
        unit_amount_decimal:
          description: Same as `unit_amount`, but contains a decimal value with at
            most 12 decimal places.
          format: decimal
          nullable: true
          type: string
        up_to:
          description: Up to and including to this quantity will be contained in the
            tier.
          nullable: true
          type: integer
      title: StripePriceTier
      type: object
    StripeProduct:
      description: 'Products describe the specific goods or services you offer to
        your customers.

        For example, you might offer a Standard and Premium version of your goods
        or service; each version would be a separate Product.

        They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices)
        to configure pricing in Checkout and Subscriptions.

        Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription)
        or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products)
        and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)'
      properties:
        active:
          description: Whether the product is currently available for purchase.
          type: boolean
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        description:
          description: The product's description, meant to be displayable to the customer.
            Use this field to optionally store a long form explanation of the product
            being sold for your own rendering purposes.
          maxLength: 5000
          nullable: true
          type: string
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        images:
          description: A list of up to 8 URLs of images for this product, meant to
            be displayable to the customer.
          items:
            maxLength: 5000
            type: string
          type: array
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        metadata:
          $ref: '#/components/schemas/RuntimeStripeAnyMetadata'
        name:
          description: The product's name, meant to be displayable to the customer.
            Whenever this product is sold via a subscription, name will show up on
            associated invoice line item descriptions.
          maxLength: 5000
          type: string
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - product
          type: string
        shippable:
          description: Whether this product is shipped (i.e., physical goods).
          nullable: true
          type: boolean
        statement_descriptor:
          description: Extra information about a product which will appear on your
            customer's credit card statement. In the case that multiple products are
            billed at once, the first statement descriptor will be used.
          maxLength: 5000
          nullable: true
          type: string
        unit_label:
          description: "A label that represents units of this product in Stripe and\
            \ on customers\u2019 receipts and invoices. When set, this will be included\
            \ in associated invoice line item descriptions."
          maxLength: 5000
          nullable: true
          type: string
        updated:
          description: Time at which the object was last updated. Measured in seconds
            since the Unix epoch.
          format: unix-time
          type: integer
        url:
          description: A URL of a publicly-accessible webpage for this product.
          maxLength: 2048
          nullable: true
          type: string
      required:
      - active
      - created
      - id
      - images
      - livemode
      - name
      - object
      - updated
      title: StripeProduct
      type: object
    StripeShipping:
      description: Shipping information on a customer
      properties:
        address:
          $ref: '#/components/schemas/StripeAddress'
        carrier:
          description: The delivery service that shipped a physical product, such
            as Fedex, UPS, USPS, etc.
          maxLength: 5000
          nullable: true
          type: string
        name:
          description: Recipient name.
          maxLength: 5000
          nullable: true
          type: string
        phone:
          description: Recipient phone (including extension).
          maxLength: 5000
          nullable: true
          type: string
        tracking_number:
          description: The tracking number for a physical product, obtained from the
            delivery service. If multiple tracking numbers were generated for this
            purchase, please separate them with commas.
          maxLength: 5000
          nullable: true
          type: string
      title: StripeShipping
      type: object
    StripeSubscription:
      description: 'Subscriptions allow you to charge a customer on a recurring basis.

        Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).'
      properties:
        application_fee_percent:
          description: A non-negative decimal between 0 and 100, with at most two
            decimal places. This represents the percentage of the subscription invoice
            subtotal that will be transferred to the application owner's Stripe account.
          nullable: true
          type: number
        automatic_tax:
          $ref: '#/components/schemas/StripeAutomaticTax'
        billing_cycle_anchor:
          description: Determines the date of the first full invoice, and, for plans
            with `month` or `year` intervals, the day of the month for subsequent
            invoices.
          format: unix-time
          type: integer
        cancel_at:
          description: A date in the future at which the subscription will automatically
            get canceled
          format: unix-time
          nullable: true
          type: integer
        cancel_at_period_end:
          description: If the subscription has been canceled with the `at_period_end`
            flag set to `true`, `cancel_at_period_end` on the subscription will be
            true. You can use this attribute to determine whether a subscription that
            has a status of active is scheduled to be canceled at the end of the current
            period.
          type: boolean
        canceled_at:
          description: If the subscription has been canceled, the date of that cancellation.
            If the subscription was canceled with `cancel_at_period_end`, `canceled_at`
            will reflect the time of the most recent update request, not the end of
            the subscription period when the subscription is automatically moved to
            a canceled state.
          format: unix-time
          nullable: true
          type: integer
        collection_method:
          description: Either `charge_automatically`, or `send_invoice`. When charging
            automatically, Stripe will attempt to pay this subscription at the end
            of the cycle using the default source attached to the customer. When sending
            an invoice, Stripe will email your customer an invoice with payment instructions.
          enum:
          - charge_automatically
          - send_invoice
          type: string
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          format: unix-time
          type: integer
        current_period_end:
          description: End of the current period that the subscription has been invoiced
            for. At the end of this period, a new invoice will be created.
          format: unix-time
          type: integer
        current_period_start:
          description: Start of the current period that the subscription has been
            invoiced for.
          format: unix-time
          type: integer
        customer:
          description: ID of the customer who owns the subscription.
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
            - $ref: null
        days_until_due:
          description: Number of days a customer has to pay invoices generated by
            this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
          nullable: true
          type: integer
        default_payment_method:
          description: ID of the default payment method for the subscription. It must
            belong to the customer associated with the subscription. This takes precedence
            over `default_source`. If neither are set, invoices will use the customer's
            [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method)
            or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
        default_source:
          description: ID of the default payment source for the subscription. It must
            belong to the customer associated with the subscription and be in a chargeable
            state. If `default_payment_method` is also set, `default_payment_method`
            will take precedence. If neither are set, invoices will use the customer's
            [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method)
            or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
            - $ref: null
            - $ref: null
            - $ref: null
            - $ref: null
        ended_at:
          description: If the subscription has ended, the date the subscription ended.
          format: unix-time
          nullable: true
          type: integer
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        items:
          description: List of subscription items, each with an attached price.
          properties:
            data:
              description: Details about each object.
              items:
                $ref: '#/components/schemas/StripeSubscriptionItem'
              type: array
            has_more:
              description: True if this list has another page of items after this
                one that can be fetched.
              type: boolean
            object:
              description: String representing the object's type. Objects of the same
                type share the same value. Always has the value `list`.
              enum:
              - list
              type: string
            url:
              description: The URL where this list can be accessed.
              maxLength: 5000
              type: string
          required:
          - data
          - has_more
          - object
          - url
          title: SubscriptionItemList
          type: object
          x-expandableFields:
          - data
        livemode:
          description: Has the value `true` if the object exists in live mode or the
            value `false` if the object exists in test mode.
          type: boolean
        next_pending_invoice_item_invoice:
          description: Specifies the approximate timestamp on which any pending invoice
            items will be billed according to the schedule provided at `pending_invoice_item_interval`.
          format: unix-time
          nullable: true
          type: integer
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - subscription
          type: string
        pending_setup_intent:
          description: You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents)
            to collect user authentication when creating a subscription without immediate
            payment or updating a subscription's payment method, allowing you to optimize
            for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
        pending_update:
          description: If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates)
            that will be applied to the subscription once the `latest_invoice` has
            been paid.
          nullable: true
          type: string
        schedule:
          description: The schedule attached to the subscription
          nullable: true
          type: string
          x-expansionResources:
            oneOf:
            - $ref: null
        start_date:
          description: Date when the subscription was first created. The date might
            differ from the `created` date due to backdating.
          format: unix-time
          type: integer
        status:
          description: 'Possible values are `incomplete`, `incomplete_expired`, `trialing`,
            `active`, `past_due`, `canceled`, or `unpaid`.

            For `collection_method=charge_automatically` a subscription moves into
            `incomplete` if the initial payment attempt fails. A subscription in this
            state can only have metadata and default_source updated. Once the first
            invoice is paid, the subscription moves into an `active` state. If the
            first invoice is not paid within 23 hours, the subscription transitions
            to `incomplete_expired`. This is a terminal state, the open invoice will
            be voided and no further invoices will be generated.

            A subscription that is currently in a trial period is `trialing` and moves
            to `active` when the trial period is over.

            If subscription `collection_method=charge_automatically` it becomes `past_due`
            when payment to renew it fails and `canceled` or `unpaid` (depending on
            your subscriptions settings) when Stripe has exhausted all payment retry
            attempts.

            If subscription `collection_method=send_invoice` it becomes `past_due`
            when its invoice is not paid by the due date, and `canceled` or `unpaid`
            if it is still not paid by an additional deadline after that. Note that
            when a subscription has a status of `unpaid`, no subsequent invoices will
            be attempted (invoices will be created, but then immediately automatically
            closed). After receiving updated payment information from a customer,
            you may choose to reopen and pay their closed invoices.'
          enum:
          - active
          - canceled
          - incomplete
          - incomplete_expired
          - past_due
          - trialing
          - unpaid
          type: string
        trial_end:
          description: If the subscription has a trial, the end of that trial.
          format: unix-time
          nullable: true
          type: integer
        trial_start:
          description: If the subscription has a trial, the beginning of that trial.
          format: unix-time
          nullable: true
          type: integer
      required:
      - automatic_tax
      - billing_cycle_anchor
      - cancel_at_period_end
      - collection_method
      - created
      - current_period_end
      - current_period_start
      - customer
      - id
      - items
      - livemode
      - object
      - start_date
      - status
      title: StripeSubscription
      type: object
    StripeSubscriptionItem:
      description: 'Subscription items allow you to create customer subscriptions
        with more than

        one plan, making it easy to represent complex billing Relationship.'
      properties:
        created:
          description: Time at which the object was created. Measured in seconds since
            the Unix epoch.
          type: integer
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        object:
          description: String representing the object's type. Objects of the same
            type share the same value.
          enum:
          - subscription_item
          type: string
        price:
          $ref: '#/components/schemas/StripePrice'
        quantity:
          description: The [quantity](https://stripe.com/docs/subscriptions/quantities)
            of the plan to which the customer should be subscribed.
          type: integer
        subscription:
          description: The `subscription` this `subscription_item` belongs to.
          maxLength: 5000
          type: string
      required:
      - created
      - id
      - object
      - price
      - subscription
      title: StripeSubscriptionItem
      type: object
    StripeSubscriptionsResponse:
      description: A response object returned from stripe products endpoints such
        as /subscriptions https://stripe.com/docs/api/subscriptions/list
      properties:
        data:
          items:
            $ref: '#/components/schemas/StripeSubscription'
          type: array
        has_more:
          type: boolean
        object:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
      required:
      - object
      - url
      - has_more
      - data
      title: StripeSubscriptionsResponse
      type: object
    Suggestion:
      description: 'This is the model return by the connector''s suggest endpoint.


        Note:

        assets are the assets that this target was ran against.


        distribution is the distribution that we generated from comparing the target
        to the asset''s vectors.(currently uuid(assetid) : value that is the difference
        between the asset and the target) **could potentially make an additional model
        here that is an array from most to least relevent.


        *** distribution is required but we are currently unable to reflect that with
        our current dart generation.'
      properties:
        assets:
          $ref: '#/components/schemas/Assets'
        distribution:
          additionalProperties:
            type: number
          type: object
        reuse:
          $ref: '#/components/schemas/ReuseSuggestion'
        save:
          $ref: '#/components/schemas/SaveSuggestion'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        target:
          $ref: '#/components/schemas/SuggestionTarget'
      required:
      - reuse
      - save
      - target
      - assets
      title: Suggestion
      type: object
    SuggestionTarget:
      description: This is the target that was sent to pieces. This will return the
        string that represents this coppied || pasted asset. This will also send along
        the SeededConnectorCreation and will send along the vector that we created
        based on the seed.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/SeededConnectorCreation'
        vector:
          description: This is the vector representation of this target that we generated.
          type: integer
      required:
      - seed
      - vector
      title: SuggestionTarget
      type: object
    SystemExecutionCpuInformation:
      properties:
        brand:
          description: this is the brand of cpu
          type: string
        count:
          description: this is the number of cpus
          type: integer
        frequency:
          type: integer
      required:
      - count
      - brand
      - frequency
      title: SystemExecutionCpuInformation
      type: object
    SystemExecutionInformation:
      description: This is system information that we are able to get from the users
        machine(rust package TBD). TODO potentially pull this out of TLP.
      properties:
        cpu:
          $ref: '#/components/schemas/SystemExecutionCpuInformation'
        kernel:
          type: string
        memory:
          type: integer
        os:
          type: string
      required:
      - memory
      - os
      - kernel
      - cpu
      title: SystemExecutionInformation
      type: object
    TLPCodeClassification:
      description: 'rankings here will be in the order of most likely prediction to
        least likely


        distribution here will be in order to our most likely prediction to least
        likely.


        result will be the top result. in our distribution.'
      properties:
        distribution:
          $ref: '#/components/schemas/TLPLanguages'
        normalized:
          description: This is the preprocessed string before tokenization.
          type: string
        rankings:
          $ref: '#/components/schemas/TLPLanguages'
        result:
          $ref: '#/components/schemas/TLPLanguage'
        tokens:
          description: The Tokenized input string. List of 32bit floats.
          items:
            type: number
          type: array
      required:
      - result
      - rankings
      - distribution
      - tokens
      - normalized
      title: TLPCodeClassification
      type: object
    TLPCodeFragmentClassification:
      description: Model for ML big query classification.
      properties:
        asset:
          type: string
        classification:
          type: string
        context:
          type: string
        created:
          type: string
        distribution:
          type: string
        latency:
          description: this is the time it takes to run this model.
          type: number
        metadata:
          $ref: '#/components/schemas/TLPCodeFragmentClassificationMetadata'
        model:
          type: string
        probability:
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        system:
          $ref: '#/components/schemas/SystemExecutionInformation'
        user:
          description: identifier for the user
          type: string
      required:
      - asset
      - model
      - created
      - classification
      - probability
      - context
      - user
      title: TLPCodeFragmentClassification
      type: object
    TLPCodeFragmentClassificationMetadata:
      properties:
        context:
          $ref: '#/components/schemas/Classification'
        prior:
          $ref: '#/components/schemas/Classification'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TLPCodeFragmentClassificationMetadata
      type: object
    TLPCodeFragmentDescription:
      description: Model for ML big query Code Description.
      properties:
        asset:
          description: This is the asset id.
          type: string
        context:
          description: the application this description was created from.
          type: string
        created:
          description: timestamp of creation
          type: string
        description:
          description: This is the stringified json of a TLPDescription object
          type: string
        latency:
          description: the time it takes to run this model.
          type: number
        model:
          description: this is the model version
          type: string
        os:
          description: This is the UUID of the OS that this context is currently connected
            to.
          type: string
        user:
          description: the uuid of the user the description was created for.
          type: string
      required:
      - asset
      - created
      - model
      - user
      title: TLPCodeFragmentDescription
      type: object
      x-stoplight:
        id: 2vtypyagv37f0
    TLPCodeFragmentDescriptiveStatistics:
      description: Model for ML big query Data collection.
      properties:
        asset:
          type: string
        ast:
          type: string
        context:
          description: this is the application in which this was created from.
          type: string
        language:
          type: string
        length:
          type: number
        os:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        snippet:
          description: this is the value of the snippet
          type: string
        timestamp:
          type: string
        user:
          type: string
      required:
      - user
      - os
      - language
      - length
      - ast
      - timestamp
      - asset
      - context
      - snippet
      title: TLPCodeFragmentDescriptiveStatistics
      type: object
    TLPCodeFragmentDiscovery:
      properties:
        autocreation:
          description: if all of the snippets were automatically created
          type: boolean
        clusters:
          description: Stringified json that contains size and language of every cluster
          type: string
        context:
          description: this is the application in which this was created from
          type: string
        created:
          description: time of creation
          type: string
        duration:
          description: time of parsing all of the files
          type: integer
        model:
          description: model version
          type: string
        os:
          description: this is the OS in which this was created from.
          type: string
        snippetized:
          description: if snippetizer was used
          type: boolean
        snippets:
          description: Stringified json that contains cluster_idx, size, language
            and post-processing of every snippet
          type: string
        user:
          description: user ID
          type: string
      type: object
    TLPCodeFragmentReclassification:
      description: Model for ML big query Reclassification.
      properties:
        asset:
          type: string
        context:
          description: this is the application is which this is from.
          type: string
        created:
          type: string
        model:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updates:
          $ref: '#/components/schemas/TLPCodeFragmentReclassificationUpdates'
        user:
          description: this is the user that is reclassifying
          type: string
      required:
      - asset
      - model
      - created
      - updates
      - user
      - context
      title: TLPCodeFragmentReclassification
      type: object
    TLPCodeFragmentReclassificationUpdates:
      properties:
        current:
          $ref: '#/components/schemas/Classification'
        previous:
          $ref: '#/components/schemas/Classification'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - previous
      - current
      title: TLPCodeFragmentReclassificationUpdates
      type: object
    TLPCodeFragmentStatistics:
      properties:
        descriptive:
          $ref: '#/components/schemas/TLPCodeFragmentDescriptiveStatistics'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TLPCodeFragmentStatistics
      type: object
    TLPCodeFragmentSuggestedReuse:
      properties:
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TLPCodeFragmentSuggestedReuse
      type: object
    TLPCodeFragmentSuggestedSave:
      description: Model for monitoring and evaluating the suggested save feature
      properties:
        asset:
          type: string
        candidates:
          description: number of candidates
          type: integer
        context:
          description: context from where suggestion came from
          type: string
        created:
          type: string
        model:
          type: string
        os:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          description: maximum similarity score
          type: number
        user:
          type: string
      required:
      - asset
      - user
      - model
      - created
      - os
      title: TLPCodeFragmentSuggestedSave
      type: object
    TLPCodeFragmentTagify:
      properties:
        code:
          $ref: '#/components/schemas/TLPCodeSnippetTagifyCode'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TLPCodeFragmentTagify
      type: object
    TLPCodeSnippetCluster:
      description: This is the model that gets returned from the SnippetClusteringReturnable.
        The text here is the representative (seed) of the cluster.
      properties:
        index:
          description: This is the original index of the snippet, or where it was
            within the input array.
          type: integer
        related:
          description: This is all of the other snippets within the cluster that were
            NOT chosen to represent(seed), but are included in the cluster itself.
          items:
            $ref: '#/components/schemas/TLPCodeSnippetClusterMember'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        size:
          description: This was the size of the original cluster.
          type: integer
        text:
          description: The text here is the representative (seed) of the cluster.
          type: string
      required:
      - text
      - size
      - index
      title: TLPCodeSnippetCluster
      type: object
    TLPCodeSnippetClusterMember:
      description: This is a related member within the cluster.
      properties:
        index:
          description: This is the original index of the snippet, or where it was
            within the input array.
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        text:
          description: This is the text the represents the snippet itself.
          type: string
      required:
      - text
      - index
      title: TLPCodeSnippetClusterMember
      type: object
    TLPCodeSnippetClusteringReturnable:
      description: This is the returned model from the cluster function within the
        snippetCluster facade.
      properties:
        duration:
          description: this is the time (in milliseconds) it takes to process the
            cluster.
          type: integer
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        iterable:
          items:
            $ref: '#/components/schemas/TLPCodeSnippetCluster'
          type: array
        maxChildren:
          description: The maximum parse breadth for expanding a node's children -
            tree sitter
          type: integer
        maxDepth:
          description: The maximum parse depth for tree sitter.
          type: integer
        maxImportSize:
          description: The max number of snippets returned.(input Param)
          type: integer
        minPoints:
          description: The minimum number of other points in a cluster.
          type: integer
        minSimilarity:
          description: The minimum similarity between snippets for them to be in the
            same cluster.
          type: number
      required:
      - iterable
      - duration
      - maxImportSize
      - minSimilarity
      - minPoints
      - maxDepth
      - maxChildren
      title: TLPCodeSnippetClusteringReturnable
      type: object
    TLPCodeSnippetSearchInput:
      description: "id: represents the the identifier that will be used to map to\
        \ the asset that was used.\n\nEmbedding is the embedding for the searchable\
        \ format of the asset that we will used for search.\n\nembedding is optional\
        \ on in the case you pass along a list of tags that we will use to calculate\
        \ the embedding.\n\nif you do not pass and embedding in you are required to\
        \ pass in a list of tags, if not we will throw an error.\n\nif tags or embedding\
        \ is not passed in we will also throw an error.\n\nNote:\n  - You can pass\
        \ in tags here to get your embedding, however this process is an approximation\
        \ and will be better if you use the tagify embedding instead. So if you has\
        \ access to tagify please use this instead."
      properties:
        embeddings:
          description: List of embeddings.
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
        id:
          type: string
        tags:
          description: This is optionally passed in if the format embedding is not
            available or not calculated yet.
          items:
            $ref: '#/components/schemas/TLPCodeSnippetTagifyCodeTag'
          type: array
      required:
      - id
      title: TLPCodeSnippetSearchInput
      type: object
      x-stoplight:
        id: bp2h8v3mt5b63
    TLPCodeSnippetSearchInputs:
      description: This is the initial model used for searching.
      properties:
        map:
          additionalProperties:
            $ref: '#/components/schemas/TLPCodeSnippetSearchInput'
          type: object
      required:
      - iterable
      title: TLPCodeSnippetSearchInputs
      type: object
      x-stoplight:
        id: byqh6mrefcbe6
    TLPCodeSnippetSuggestedInteractions:
      properties:
        reuse:
          $ref: '#/components/schemas/TLPCodeFragmentSuggestedReuse'
        save:
          $ref: '#/components/schemas/TLPCodeFragmentSuggestedSave'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TLPCodeSnippetSuggestedInteractions
      type: object
    TLPCodeSnippetTagifyCode:
      description: ''
      properties:
        asset:
          description: This is the asset id.
          type: string
        context:
          description: this is the origin in which this asset was created, application(string
            representation)
          type: string
        distribution:
          description: stringified array of numbers
          type: string
        inferred_distribution:
          description: stringified array of numbers
          type: string
        inferred_tags:
          description: stringified array of strings
          type: string
        inferred_threshold:
          description: this is the minimum score from the postprocessing that a tag
            needs to have to be included in the inferred_tags array.
          type: number
        label_version:
          description: This is the version of the file that we are using that contains
            all the possible tags
          type: string
        model:
          description: 'this is the model version

            '
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tags:
          description: stringified array of strings
          type: string
        threshold:
          description: this is the minimum score from the model that a tag needs to
            have to be included in the tags array.
          type: number
      required:
      - distribution
      - inferred_distribution
      - tags
      - inferred_tags
      - model
      - label_version
      - threshold
      - inferred_threshold
      - context
      - asset
      title: TLPCodeSnippetTagifyCode
      type: object
    TLPCodeSnippetTagifyCodeInferredTag:
      description: This is a specific tag that is included in the tagifyCode Returnable.
        where we have a raw tag.
      properties:
        raw:
          description: this is the raw text of the tag
          type: string
      required:
      - raw
      title: TLPCodeSnippetTagifyCodeTag
      type: object
    TLPCodeSnippetTagifyCodeReturnable:
      description: TODO revist this model.
      properties:
        distribution:
          items:
            type: number
          type: array
        embedding:
          description: This is the embedding for the format.
          items:
            type: number
          type: array
        inferred_distribution:
          items:
            type: number
          type: array
        inferred_tags:
          items:
            $ref: '#/components/schemas/TLPCodeSnippetTagifyCodeInferredTag'
          type: array
        tags:
          items:
            $ref: '#/components/schemas/TLPCodeSnippetTagifyCodeTag'
          type: array
      required:
      - distribution
      - inferred_distribution
      - tags
      - inferred_tags
      - embedding
      title: TLPCodeSnippetTagifyCodeReturnable
      type: object
    TLPCodeSnippetTagifyCodeTag:
      description: 'This is a specific tag that is included in the tagifyCode Returnable.
        where we have a raw tag.


        TODO may want to add an optional id here so that we can use this model for
        our TLPCodeSnippetSearchInput and save the embedding.'
      properties:
        raw:
          description: this is the raw text of the tag
          type: string
      required:
      - raw
      title: TLPCodeSnippetTagifyCodeTag
      type: object
    TLPCodeSnippetTagifyColor:
      properties:
        hex:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tags:
          items:
            $ref: '#/components/schemas/TLPCodeSnippetTagifyNamedColor'
          type: array
      required:
      - hex
      - tags
      title: TLPCodeSnippetTagifyColor
      type: object
    TLPCodeSnippetTagifyColorReturnable:
      properties:
        hexes:
          description: This is an array of our tagged hexes
          items:
            $ref: '#/components/schemas/TLPCodeSnippetTagifyColor'
          type: array
      required:
      - hexes
      title: TLPCodeSnippetTagifyColorReturnable
      type: object
    TLPCodeSnippetTagifyNamedColor:
      properties:
        delta:
          type: number
        hex:
          type: string
        name:
          type: string
        parentColor:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - name
      - parentColor
      - delta
      - hex
      title: TLPCodeSnippetTagifyNamedColor
      type: object
    TLPCodeSnippetizerReturnable:
      description: 'This is the value that is returned from the snippitizer found
        within the ml_facade.

        the iterable is an array of snippets that we were able to extract.'
      properties:
        duration:
          description: the amount of time it took to run in ms.
          type: integer
        iterable:
          items:
            $ref: '#/components/schemas/TLPCodeSnippetizerSnippet'
          type: array
        runs:
          description: because of an issue with texttiling we sometimes have to run
            the last found snippet again (up to a maximum number of runs). runs is
            the number of times it actually ran
          type: integer
      required:
      - iterable
      - duration
      - runs
      title: TLPCodeSnippetizerReturnable
      type: object
    TLPCodeSnippetizerSnippet:
      description: The location is the snippet that we have extracted, where the start
        and the end here is the starting line and ending line.
      properties:
        location:
          $ref: '#/components/schemas/TextLocation'
      required:
      - location
      title: TLPCodeSnippetizerSnippet
      type: object
    TLPDescription:
      description: 'This object holds description data that is returned from the code
        description model and set of filters that are used post-process the description.  '
      properties:
        confidence:
          description: Confidence is a value between 0 and 1
          type: number
        embedding:
          description: The transformer encoder embedding
          items:
            type: number
          type: array
        filters:
          $ref: '#/components/schemas/TLPDescriptionFilters'
        value:
          type: string
      required:
      - value
      title: TLPDescription
      type: object
    TLPDescriptionFilter:
      description: This object is a filter is applied to a description value with
        a unique label and the confidence level of the filter and whether or not it
        should be applied
      properties:
        applied:
          type: boolean
        confidence:
          description: Confidence is a value between 0 and 1
          type: number
        label:
          $ref: '#/components/schemas/TLPDescriptionFilterEnum'
      required:
      - label
      title: TLPDescriptionFilter
      type: object
    TLPDescriptionFilterEnum:
      description: This enum is used to label and identify unique filters used in
        post-processing the description
      enum:
      - PUNCTUATION
      - ALPHABETICAL
      - REPETITION
      readOnly: true
      title: TLPDescriptionFilterEnum
      type: string
    TLPDescriptionFilters:
      description: This object holds a set of filters that were applied to the description
        model. The iterable is an array of unique filters.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPDescriptionFilter'
          type: array
      required:
      - iterable
      title: TLPDescriptionFilters
      type: object
    TLPDetectorSensitive:
      description: ''
      properties:
        category:
          $ref: '#/components/schemas/SensitiveCategoryEnum'
        description:
          description: this is the description of the type of key we match with.
          type: string
        entropy:
          description: entropy of the sensitive
          type: number
        match:
          $ref: '#/components/schemas/TextMatch'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        severity:
          $ref: '#/components/schemas/SensitiveSeverityEnum'
      required:
      - match
      - severity
      - description
      - category
      title: TLPDetectorSensitive
      type: object
    TLPDirectedDiscoveryFilter:
      description: Contains enum which represents code block type
      properties:
        name:
          $ref: '#/components/schemas/TLPDirectedDiscoveryFilterEnum'
      required:
      - name
      title: TLPDirectedDiscoveryFilter
      type: object
      x-stoplight:
        id: f3sjzvv04snxy
    TLPDirectedDiscoveryFilterEnum:
      description: Code block type like function, class, abstract
      enum:
      - FUNCTION
      - METHOD
      - CLASS
      - STRUCT
      - ABSTRACT
      - COMMENT
      - IMPORT
      - IF
      - LOOP
      - RETURN
      title: TLPDirectedDiscoveryFilterEnum
      type: string
      x-stoplight:
        id: ewv8gu8hfz498
    TLPDirectedDiscoveryFilters:
      description: Contains array of TLPDirectedDiscoveryFilter
      properties:
        iterable:
          description: Array that contains filters like class/function/loop
          items:
            $ref: '#/components/schemas/TLPDirectedDiscoveryFilter'
          type: array
      required:
      - iterable
      title: TLPDirectedDiscoveryFilters
      type: object
      x-stoplight:
        id: 17nd872wtvhkh
    TLPInput:
      description: 'The class where a developer will specify the value of the raw
        string queued for technical language processing. This contains a required
        property, "value", accompanied by two optional properties, "prior" and "id".
        Prior enables a developer to provide metadata used to assist in processing
        and the ID is a way for a developer to uniquely identify an input upon returning
        from the /tlp endpoint.


        NOTE: "prior" currently does not carry any weight in the processing pipeline,
        however this is subject to change.'
      properties:
        id:
          description: 'An optional ID provided by the developer used to uniquely
            identify this incoming string. '
          type: string
        prior:
          $ref: '#/components/schemas/TLPInputPrior'
        value:
          description: The raw text queued for technical language processing.
          type: string
      required:
      - value
      title: TLPInput
      type: object
    TLPInputModel:
      description: A class representing a Machine Learning model. This has two required
        properties, "name" and "behavior", where name is the name of the model, and
        behavior is the configuration of the model. Optionally a developer can provide
        a specific version of the model to use, however if one is not provided we
        will use the latest version.
      properties:
        behavior:
          $ref: '#/components/schemas/TLPModelBehaviorEnum'
        name:
          $ref: '#/components/schemas/TLPModelNameEnum'
        version:
          description: Version of the model to use. If one is not provided we will
            use the latest.
          type: string
      required:
      - name
      - behavior
      title: TLPInputModel
      type: object
    TLPInputModels:
      description: 'In the future, this is where a developer will be able to specify
        Runtime Machine Learning models to use for the /tlp endpoint.


        Note: This is currently unavailable.'
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPInputModel'
          type: array
      required:
      - iterable
      title: TLPInputModels
      type: object
    TLPInputPrior:
      description: 'An optional class that can be used by a developer to provide preliminary
        information about what they believe a specific string to be: code or text,
        and if code, optionally they can provide language predictions.


        The first optional property is "naturalLanguage", which is a float between
        0-1 that represents the likelihood a string is natural language (1.0) or technical
        language (0.0).


        The second optional property is "langauges"... TODO: Please update this description...'
      properties:
        languages:
          $ref: '#/components/schemas/TLPLanguages'
        naturalLanguage:
          description: A float between 0-1 that represents the likelihood a string
            is natural language (1.0) or technical language (0.0).
          type: number
      title: TLPInputPrior
      type: object
    TLPInputs:
      description: This is the main body for the /tlp endpoint. This requires an array
        of Input classes that represent the data the developer wishes to run technical
        language processing on. This also accepts an optional "models" property, which
        enables a developer to preference which Machine Learning models to use in
        the processing pipeline.
      properties:
        iterable:
          description: This is an array inputs, where the min is a single input.
          items:
            $ref: '#/components/schemas/TLPInput'
          type: array
        models:
          $ref: '#/components/schemas/TLPInputModels'
      required:
      - iterable
      title: TLPInputs
      type: object
    TLPLanguage:
      description: current here is a key to the current language in the lookup property.
      properties:
        current:
          type: string
        likelihood:
          type: number
        lookup:
          $ref: '#/components/schemas/TLPLanguageMap'
      required:
      - likelihood
      - current
      - lookup
      title: TLPLanguage
      type: object
    TLPLanguageDescriptor:
      description: name here is the key used to represent this class within the LanguageMap
        model.
      properties:
        alternatives:
          items:
            type: string
          type: array
        family:
          $ref: '#/components/schemas/TLPLanguageFamilyEnum'
        name:
          type: string
        readable:
          type: string
      required:
      - family
      - readable
      - alternatives
      - name
      title: TLPLanguageDescriptor
      type: object
    TLPLanguageFamilyEnum:
      description: '**** TODO add more ENUMS'
      enum:
      - BATCHFILE
      - C
      - COFFEESCRIPT
      - CPP
      - CSHARP
      - CSS
      - DART
      - ERLANG
      - GO
      - HASKELL
      - HTML
      - JAVA
      - JAVASCRIPT
      - LUA
      - MARKDOWN
      - MATLAB
      - OBJECTIVEC
      - PERL
      - PHP
      - POWERSHELL
      - PYTHON
      - R
      - RUBY
      - RUST
      - SCALA
      - SHELLSCRIPT
      - SQL
      - SWIFT
      - TEX
      - TYPESCRIPT
      - TOML
      - YAML
      - JSON
      - XML
      - GROOVY
      - KOTLIN
      - EMACSLISP
      - CLOJURE
      - ELIXIR
      readOnly: true
      title: TLPLanguageFamilyEnum
      type: string
    TLPLanguageMap:
      description: This is going to have a model of all our languages. all will be
        optional here.
      properties:
        asp:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        batchfile:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        c:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        clojure:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        coffeescript:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        coldfusion:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        cpp:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        csharp:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        css:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        dart:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        elixir:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        emacslisp:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        erlang:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        go:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        groovy:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        haskell:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        html:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        java:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        javascript:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        json:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        kotlin:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        lua:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        markdown:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        matlab:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        objectivec:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        perl:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        php:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        powershell:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        python:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        r:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        ruby:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        rust:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        scala:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        shellscript:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        solidity:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        sql:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        swift:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        systemverilog:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        tex:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        toml:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        typescript:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        xml:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
        yaml:
          $ref: '#/components/schemas/TLPLanguageDescriptor'
      title: TLPLanguageMap
      type: object
    TLPLanguages:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPLanguage'
          type: array
      required:
      - iterable
      title: TLPLanguages
      type: object
    TLPLinks:
      properties:
        emails:
          items:
            type: string
          type: array
        urls:
          items:
            type: string
          type: array
        users:
          items:
            type: string
          type: array
      required:
      - urls
      - emails
      - users
      title: TLPLinks
      type: object
    TLPModel:
      description: 'This is model data that will describe the model used to process
        your text.


        version: is the version of the model.


        performance: is the type of performance that was specified for this model
        ie, BALANCED, ACCURATE, SPEED'
      properties:
        behavior:
          $ref: '#/components/schemas/TLPModelBehaviorEnum'
        description:
          type: string
        name:
          $ref: '#/components/schemas/TLPModelNameEnum'
        version:
          description: 'ex: ''t01-v03-i02'''
          type: string
      required:
      - version
      - behavior
      - description
      - name
      title: TLPModel
      type: object
    TLPModelBehaviorEnum:
      description: 'An enumeration where a developer can optimize the configuration
        for a model.


        SPEED: This version will optimize for faster data processing, but sacrifice
        accuracy.


        ACCURACY: This version will optimize for more precise results, but sacrifice
        speed.


        BALANCED: This version is a mix between SPEED and ACCURACY.'
      enum:
      - BALANCED
      - SPEED
      - ACCURACY
      title: TLPModelBehaviorEnum
      type: string
    TLPModelNameEnum:
      description: An enumeration representing all available models.
      enum:
      - CODE_CLASSIFICATION
      - TEXT_VS_CODE
      - TAGIFY
      - DESCRIPTION
      - SENSITIVES
      title: TLPModelNameEnum
      type: string
    TLPModels:
      description: ''
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPModel'
          type: array
      required:
      - iterable
      title: TLPModels
      type: object
    TLPNaturalLanguage:
      properties:
        likelihood:
          type: number
        normalized:
          description: This is the preprocessed string before tokenization.
          type: string
        result:
          type: boolean
        tokens:
          description: The Tokenized input string. List of 32bit floats.
          items:
            type: number
          type: array
      required:
      - result
      - likelihood
      - tokens
      - normalized
      title: TLPNaturalLanguage
      type: object
    TLPOutput:
      description: 'id optional, and will be present if provided in the input.


        Title is optionally passed into the TLP output.

        '
      properties:
        codeClassification:
          $ref: '#/components/schemas/TLPCodeClassification'
        description:
          $ref: '#/components/schemas/TLPDescription'
        id:
          type: string
        links:
          $ref: '#/components/schemas/TLPLinks'
        naturalLanguage:
          $ref: '#/components/schemas/TLPNaturalLanguage'
        queries:
          $ref: '#/components/schemas/TLPSearchQueries'
        sensitives:
          $ref: '#/components/schemas/TLPSensitives'
        tags:
          $ref: '#/components/schemas/TLPTags'
        title:
          $ref: '#/components/schemas/TLPTitle'
      required:
      - naturalLanguage
      - codeClassification
      - tags
      - sensitives
      - links
      - description
      title: TLPOutput
      type: object
    TLPOutputs:
      description: 'iterable is an array of all the outputs we will give back based
        on a specific number of inputs.


        models is an a class of all the models that were used to determine the outputs.'
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPOutput'
          type: array
        models:
          $ref: '#/components/schemas/TLPModels'
      required:
      - iterable
      - models
      title: TLPOutputs
      type: object
    TLPSearchQueries:
      description: This is used to generate useful search queries.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPSearchQuery'
          type: array
      required:
      - iterable
      title: TLPSearchQueries
      type: object
    TLPSearchQuery:
      properties:
        value:
          type: string
      title: TLPSearchQuery
      type: object
    TLPSensitive:
      description: This is a fully referenced representation of a sensitive pieces
        of data.
      properties:
        category:
          $ref: '#/components/schemas/TLPSensitiveCategoryEnum'
        description:
          type: string
        id:
          type: string
        match:
          $ref: '#/components/schemas/TLPTextMatch'
        metadata:
          $ref: '#/components/schemas/TLPSensitiveMetadata'
        severity:
          $ref: '#/components/schemas/TLPSensitiveSeverityEnum'
      required:
      - id
      - match
      - category
      - severity
      - description
      title: TLPSensitive
      type: object
    TLPSensitiveCategoryEnum:
      description: This is the enum that is use to describe the category of our Sensitive
        Model.
      enum:
      - SECRET
      - API_KEY
      - CLIENT_ID
      - CLIENT_SECRET
      - SECRET_KEY
      - API_TOKEN
      - ACCESS_KEY
      - ACCESS_TOKEN
      - URL
      - PUBLIC_KEY
      - PRIVATE_KEY
      - API_ID
      - WEB_HOOK_URL
      title: TLPSensitiveCategoryEnum
      type: string
    TLPSensitiveMetadata:
      description: This is optional metatdata attached to a sensitive piece of data.
      properties:
        entropy:
          description: entropy of the sensitive
          type: number
        match:
          $ref: '#/components/schemas/TLPTextMatch'
      title: TLPSensitiveMetadata
      type: object
    TLPSensitiveSeverityEnum:
      description: This is the enum used to describe the severity of our sensitive
        model. ie low, moderate, high
      enum:
      - LOW
      - MODERATE
      - HIGH
      title: TLPSensitiveSeverityEnum
      type: string
    TLPSensitives:
      description: This is a model that represents many individual sensitive pieces
        of data.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPSensitive'
          type: array
      required:
      - iterable
      title: TLPSensitives
      type: object
    TLPSensitivesDetectorReturnable:
      description: This is the value that is returned from the sensitive detector.
      properties:
        duration:
          description: duration in ms.
          type: integer
        iterable:
          items:
            $ref: '#/components/schemas/TLPDetectorSensitive'
          type: array
      required:
      - iterable
      - duration
      title: TLPSensitivesDetectorReturnable
      type: object
    TLPTag:
      properties:
        likelihood:
          type: number
        value:
          type: string
      required:
      - value
      - likelihood
      title: TLPTag
      type: object
    TLPTagRelatedTag:
      properties:
        raw:
          description: This is the value of that tag.
          type: string
      required:
      - raw
      title: TLPTagRelatedTag
      type: object
    TLPTagRelatedTagsReturnable:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPTagRelatedTag'
          type: array
      required:
      - iterable
      title: TLPTagRelatedTagsReturnable
      type: object
    TLPTags:
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TLPTag'
          type: array
      required:
      - iterable
      title: TLPTags
      type: object
    TLPTextLocation:
      description: This is a generic model that is used for text location.
      properties:
        end:
          description: this is the end index within the original string.
          type: integer
        start:
          description: this is the start index within the original string.
          type: integer
        text:
          description: this is the value that was found.
          type: string
      required:
      - text
      - start
      - end
      title: TLPTextLocation
      type: object
    TLPTextMatch:
      description: 'Thext Match currently used for sensitive for scales for people,
        and anything related to text matching.


        group: is the entire match

        subgroup is the inner match within the group.(optional)'
      properties:
        group:
          $ref: '#/components/schemas/TLPTextLocation'
        subgroup:
          $ref: '#/components/schemas/TLPTextLocation'
      required:
      - group
      title: TLPTextMatch
      type: object
    TLPTitle:
      description: This object holds title data that is returned from the title generation
        model.
      properties:
        value:
          description: This is the value of the title that was generated.
          type: string
      required:
      - value
      title: TLPTitle
      type: object
      x-stoplight:
        id: fho3lfdmrira9
    Tag:
      description: This represents a fully polinated Tag, that is either attached
        to an asset or a format that adds additional information "tags" to describe
        itself.Helps improve Search and other contextual information that is useful
        for the user.
      properties:
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        category:
          $ref: '#/components/schemas/TagCategoryEnum'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          description: UUID that represents the tag.
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        relationship:
          $ref: '#/components/schemas/Relationship'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        text:
          description: represnts the value of a tag.
          type: string
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - text
      - created
      - updated
      - category
      title: Tag
      type: object
    TagCategoryEnum:
      description: This is an enum that describes the category that that this tag
        is apart of.
      enum:
      - HANDLE
      - EMAIL
      - UNKNOWN
      title: TagCategoryEnum
      type: string
    Tags:
      description: This is a model that represents multiple Tag Models
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an tag id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Tags
      type: object
    TemporalRangeGrounding:
      description: 'This is used in the QGPT flow as well as within the conversation.


        This will let us know grounding''s that you want us to use within a given
        time range(s).


        workstreams: is used to describe workstreams context. (specific to the "workstream
        mapper" - name subject to change)'
      properties:
        workstreams:
          $ref: '#/components/schemas/FlattenedRanges'
      title: TemporalRangeGrounding
      type: object
    TemporalSearchOptions:
      description: 'created: will return the materials based on if the range is satisfied
        w/ this created timestamp

        ** same goes for updated'
      properties:
        created:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/AnonymousTemporalRange'
      title: TemporalSearchOptions
      type: object
    TerminatingOSServerApplet:
      description: TODO
      properties:
        parent:
          $ref: '#/components/schemas/Application'
        port:
          description: Validation check if the port is passed in.
          nullable: true
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        type:
          $ref: '#/components/schemas/OSAppletEnum'
      required:
      - type
      title: TerminatingOSServerApplet
      type: object
    TextLocation:
      description: This is a generic model that is used for text location.
      properties:
        end:
          description: this is the end index within the original string.
          type: integer
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        start:
          description: this is the start index within the original string.
          type: integer
        text:
          description: this is the value that was found.
          type: string
      required:
      - text
      - start
      - end
      title: TextLocation
      type: object
    TextLocations:
      description: This is a generic model that is used for plural text locations.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TextLocation'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: TextLocations
      type: object
    TextMatch:
      description: 'Thext Match currently used for sensitive for scales for people,
        and anything related to text matching.


        group: is the entire match

        subgroup is the inner match within the group.(optional)'
      properties:
        group:
          $ref: '#/components/schemas/TextLocation'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        subgroup:
          $ref: '#/components/schemas/TextLocation'
      required:
      - group
      title: TextMatch
      type: object
    TextuallyExtractedMaterial:
      description: "This is an extraction,\nthis was a person/website/anchor that\
        \ was extracted\n\nthis will return the text location where this was found\
        \ within the extraction.\n\nas well return the material itself that was extracted.\n\
        \nNote:\n- seeds: will only be extracted people if provided, because the website/anchors\
        \ will be created if extracted.\n- basically only thing that is different\
        \ about the extracted people, if that if we extract a person that was not\
        \ already saved,\n  then we will not save them, however if there are related\
        \ people then we will add them as well."
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        match:
          $ref: '#/components/schemas/TextLocation'
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seeds:
          $ref: '#/components/schemas/Seeds'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - match
      title: TextuallyExtractedMaterial
      type: object
    TextuallyExtractedMaterials:
      description: This is a plural of an Extraction
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/TextuallyExtractedMaterial'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: TextuallyExtractedMaterials
      type: object
    Theme:
      description: This will describe the theme that belongs to a user.
      properties:
        dark:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - dark
      title: Theme
      type: object
    TokenizedPKCE:
      description: This is the flow that mobile apps use to access an API. Use this
        endpoint to exchange an Authorization Code for a Token.
      properties:
        audience:
          description: 'The audience domain: i.e. https://pieces.us.auth0.com'
          example: https://pieces.us.auth0.com
          type: string
        client_id:
          description: Your application's Client ID.
          type: string
        code:
          description: The Authorization Code received from the initial /authorize
            call.
          type: string
        code_verifier:
          description: Cryptographically random key that was used to generate the
            code_challenge passed to /authorize.
          type: string
        grant_type:
          description: Denotes the flow you are using. For Authorization Code, use
            authorization_code or refresh_token.
          enum:
          - refresh_token
          - authorization_code
          type: string
        redirect_uri:
          description: This is required only if it was set at the GET /authorize endpoint.
            The values must match.
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - grant_type
      - client_id
      - code
      - redirect_uri
      - code_verifier
      title: TokenizedPKCE
      type: object
    TransferableBytes:
      description: 'Bytes is a Model for A FileFormat. Raw and file are the only 2
        that are currently supported. Raw and file are an array of integers that represent
        the file.Typical conversion UTF8 -> array[int] or UTF8 -> array[bytes(in hexidecimal)]
        -> array[int]. Either way you convert is up to you but the type we need here
        is an array of integers.


        [NOT IMPLEMENTED] base64, base64_url, data_url

        [IMPLEMENTED] raw'
      properties:
        base64:
          description: NOT IMPLEMENTED
          items:
            type: integer
          type: array
        base64_url:
          description: NOT IMPLEMENTED
          items:
            type: integer
          type: array
        data_url:
          description: NOT IMPLEMENTED
          items:
            type: integer
          type: array
        raw:
          description: IMPLEMENTED
          items:
            type: integer
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TransferableBytes
      type: object
    TransferableString:
      description: 'This is a String representaion of any of these changes.


        [NOT IMPLEMENTED] base64, base64_url, data_url

        [IMPLEMENTED] raw'
      properties:
        base64:
          description: NOT IMPLEMENTED
          type: string
        base64_url:
          description: NOT IMPLEMENTED
          type: string
        data_url:
          description: NOT IMPLEMENTED
          type: string
        raw:
          description: IMPLEMENTED
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: TransferableString
      type: object
    UltraSuiteMetadata:
      description: This is some additional metadata retreived from UltraSuite.
      properties:
        ext:
          $ref: '#/components/schemas/ClassificationSpecificEnum'
        name:
          type: string
      title: UltraSuiteMetadata
      type: object
    UncheckedOSServerUpdate:
      description: This is the input body for /os/update/check, just a placeholder
        for now.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: UncheckedOSServerUpdate
      type: object
    UniversalUniqueIdentifier:
      description: 'A uuid model. 36 Characters (4 Dashes, 32 Numbers/Letters) '
      example: 6a2f41a3-c54c-fce8-32d2-0324e1c32e22
      format: uuid
      maxLength: 36
      minLength: 36
      pattern: '[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
      title: UniversalUniqueIdentifier (UUID)
      type: string
      x-tags:
      - uuid
    UnsegmentedTechnicalLanguage:
      description: 'This is the input model for ''/machine_learning/text/technical_language/parsers/segmentation''


        This will take the unsegmentedText here!'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        value:
          type: string
          x-stoplight:
            id: 58gaxay29crfe
      required:
      - value
      title: UnsegmentedTechnicalLanguage
      type: object
      x-stoplight:
        id: 2nxomz0a6u1t0
    UpdatedExternalProviderApiKey:
      description: This is the update Auth0UserMetadata object, and the specific update
        output model for "/external_provider/api_key/update"
      properties:
        metadata:
          $ref: '#/components/schemas/Auth0UserMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - metadata
      title: UpdatedExternalProviderApiKey
      type: object
      x-stoplight:
        id: kyltrem97npuz
    UpdatingStatusEnum:
      description: 'This is a simple enum used to determine the status of the Updating
        process.(of PiecesOS)


        UpdatingStatusEnum(READY_TO_RESTART, AVAILABLE(but not downloaded), DOWNLOADING,
        UNKNOWN, UP_TO_DATE)


        UNKNOWN: should never be the case


        These are some enums that are currently not implemented but are for future
        support( REINSTALL_REQUIRED, CONTACT_SUPPORT)'
      enum:
      - READY_TO_RESTART
      - AVAILABLE
      - DOWNLOADING
      - UNKNOWN
      - UP_TO_DATE
      - REINSTALL_REQUIRED
      - CONTACT_SUPPORT
      title: UpdatingStatusEnum
      type: string
      x-stoplight:
        id: bvwdklaqis0zl
    UserBetaStatus:
      description: This is used to either grant or remove a specific provider betastatus
      properties:
        auth0:
          $ref: '#/components/schemas/Auth0UserBetaStatus'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        user:
          type: string
      required:
      - user
      title: UserBetaStatus
      type: object
    UserProfile:
      description: This is the model for a user logged into Pieces.
      properties:
        aesthetics:
          $ref: '#/components/schemas/Aesthetics'
        allocation:
          $ref: '#/components/schemas/AllocationCloud'
        auth0:
          $ref: '#/components/schemas/Auth0UserMetadata'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        email:
          default: user@pieces.app
          example: user@pieces.app
          format: email
          type: string
        id:
          type: string
        name:
          description: This is the name of the User.
          type: string
        picture:
          default: https://picsum.photos/200
          description: 'mapped from picture.URL pointing to the user''s profile picture. '
          example: https://picsum.photos/200
          format: uri
          type: string
        providers:
          $ref: '#/components/schemas/ExternalProviders'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        username:
          description: "\t(unique) User's username.\n\t"
          type: string
        vanityname:
          type: string
      required:
      - id
      - aesthetics
      title: UserProfile
      type: object
    Users:
      description: A base class for a collection of users and some additional meta
        properties.
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/UserProfile'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: Users
      type: object
    VerifiedOSFilesystemPath:
      description: 'This will return is the given path was verified/ or it was invalid.


        and if it is valid if it is a file/folder


        note: file/directory are both null.'
      properties:
        bytes:
          $ref: '#/components/schemas/ByteDescriptor'
        denied:
          description: This means that attempting to access the file was not aloud(ie
            no permission)
          type: boolean
        directory:
          type: boolean
        file:
          type: boolean
        path:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        verified:
          description: This means if the path(file/folder) exists on the machine.
          type: boolean
      required:
      - verified
      - path
      title: VerifiedOSFilesystemPath
      type: object
    Website:
      description: This is a specific model for related websites to an asset.
      properties:
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        deleted:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        interactions:
          description: This is an optional value that will keep track of the number
            of times this has been interacted with.
          type: integer
        mechanisms:
          additionalProperties:
            $ref: '#/components/schemas/MechanismEnum'
          description: This is a Map<String, MechanismEnum> where the the key is an
            asset id.
          type: object
        messages:
          $ref: '#/components/schemas/FlattenedConversationMessages'
        name:
          description: This is a name that is customized.
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        url:
          description: this is the actual website url.
          type: string
      required:
      - id
      - url
      - name
      - created
      - updated
      title: Website
      type: object
    Websites:
      description: This is a specific model for related websites to an asset.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an website
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/Website'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: Websites
      type: object
    WindowDimensions:
      description: 'note: this is modeled off of the browsers bounding box DOMRect

        https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect'
      properties:
        bottom:
          type: number
        height:
          type: number
        left:
          type: number
        right:
          type: number
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        top:
          type: number
        width:
          type: number
        x:
          type: number
        y:
          type: number
      required:
      - bottom
      - height
      - left
      - right
      - top
      - width
      - x
      - y
      title: WindowDimensions
      type: object
    WorkstreamEvent:
      description: 'This is a Shadow Activity event:


        This is used to for 2 collections the internal Shadow Activity collection
        and the Shadow Activity Collection.


        The Internal Shadow Activity will me just a massive growing and shrinkling
        persisted list activity event that will endup getting rolled up into Workstream
        summaries. When we roll up the internalWorkstreamEvent events we will do a
        ton of filtering and only take the highly relevant events and turn them into
        WorkstreamEvent (these will be used to create a reference to the workstream
        summary, so we can know what event were used to generate the summary and vise
        versa).


        A Shadow Activity model is a collection of a ton of small interactions with
        the plugins (copy/paste/file open/file close/tab changed/...etc events) that
        will also enable use to know what materials are being used to funnel them
        into our engine to show highly relevant data according to your given flow.'
      properties:
        application:
          $ref: '#/components/schemas/Application'
        context:
          $ref: '#/components/schemas/WorkstreamEventContext'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        trigger:
          $ref: '#/components/schemas/WorkstreamEventTrigger'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
      required:
      - id
      - application
      - created
      - updated
      - trigger
      title: WorkstreamEvent
      type: object
    WorkstreamEventContext:
      description: 'This is a free form data object that will enable additional data
        to be passed into SeededWorkstreamEvent, that corresponds to the event on
        the WorkstreamEvent.


        This is a WIP object.


        Need to think if we want to do something like raw:string (that is just a jsonObject)
        that is stringified, or if we add specific bits of data that we want. and
        specific fields for each event.'
      properties:
        browser:
          $ref: '#/components/schemas/WorkstreamEventTriggerContextBrowser'
        ide:
          $ref: '#/components/schemas/WorkstreamEventTriggerContextIDE'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: WorkstreamEventContext
      type: object
    WorkstreamEventTrigger:
      description: This is the specific event that represent the Shadow Activity ie
        the copy/paste ...xyz
      properties:
        application_enter:
          type: boolean
        application_leave:
          type: boolean
        application_switch:
          type: boolean
        check_in:
          description: this is a sort of check-in event(ie when ever your application
            is in the forground on there is an interaction)
          type: boolean
        copy:
          type: boolean
        file_close:
          type: boolean
        file_open:
          type: boolean
        paste:
          type: boolean
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tab_close:
          type: boolean
        tab_enter:
          type: boolean
        tab_leave:
          type: boolean
        tab_open:
          type: boolean
        tab_switch:
          type: boolean
        url_changed:
          type: boolean
      title: WorkstreamEventTrigger
      type: object
      x-stoplight:
        id: e1b2aa543b0eb
    WorkstreamEventTriggerContextBrowser:
      description: 'This is the given context for the browser,


        a client can pass through many of the same tab if they would like,


        note: however please try to only side 3 unique website/anchors'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tabs:
          $ref: '#/components/schemas/BrowserTabs'
      title: WorkstreamEventTriggerContextBrowser
      type: object
    WorkstreamEventTriggerContextIDE:
      description: 'This is the given context for an IDE.


        tabs: this here refers to the tabs w/in the IDE.


        Modules here are the given repositories


        Name: this is the name of a workspace, but not required.'
      properties:
        modules:
          $ref: '#/components/schemas/ProjectModules'
        name:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        tabs:
          $ref: '#/components/schemas/IDETabs'
      title: WorkstreamEventTriggerContextIDE
      type: object
    WorkstreamEvents:
      description: This is a collection of many Shadow Activity events.
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an activity
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/WorkstreamEvent'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: WorkstreamEvents
      type: object
    WorkstreamIngestion:
      description: This is used for a returnable in the contest ingestion endpoint
        for the Feed.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: WorkstreamIngestion
      type: object
    WorkstreamPatternEngineDataCleanupRequest:
      description: 'NOTE: if we want to remove all the data the from would be unset,
        the to will be right now.


        from: is always in the past

        to: is always at least before from in our time.'
      properties:
        ranges:
          items:
            $ref: '#/components/schemas/AnonymousTemporalRange'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: WorkstreamPatternEngineDataCleanupRequest
      type: object
    WorkstreamPatternEngineSource:
      description: 'This is a specific model for a given WPE qdrant source.


        note: application is optional b/c we may want a network sorce in the future

        TODO: think about adding an enum or something that will delimit the type of
        processor(vision/filewatcher/network/audio)


        TODO: in the future we can add tabs/filepaths to this model here.

        TODO: Enum for source/processor ? i.e. WorkstreamPatternEngineProcessorEnum.VISION,
        WorkstreamPatternEngineProcessorEnum.NETWORK, WorkstreamPatternEngineProcessorEnum.FILE_IO,
        WorkstreamPatternEngineProcessorEnum.AUDIO, etc.'
      properties:
        name:
          description: This is the name of the window(foreground window)/application.(this
            will always be present)
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - name
      title: WorkstreamPatternEngineSource
      type: object
    WorkstreamPatternEngineSources:
      description: This is a plural version of the WPE qdrant applications
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/WorkstreamPatternEngineSource'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: WorkstreamPatternEngineSources
      type: object
    WorkstreamPatternEngineStatus:
      description: This will return the status for the Workstream pettern engine,
        specifically the activation/deactivation status
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        vision:
          $ref: '#/components/schemas/WorkstreamPatternEngineVisionStatus'
      title: WorkstreamPatternEngineStatus
      type: object
    WorkstreamPatternEngineVisionCalibration:
      description: 'This model is used for the dimensions of the copilot/feed/xyz
        window.


        if dimensions/captured are null this means we do not have the dimensions for
        this given window.


        TODO: consider adding 5 markers here for the qr codes(ie location of these
        as wel)

        NOTE: will want to add type of calibration for this specific dimension(ie
        copilot/feed/xyz)'
      properties:
        captured:
          $ref: '#/components/schemas/GroupedTimestamp'
        dimensions:
          $ref: '#/components/schemas/WindowDimensions'
        foreground:
          description: This is the name of the window(foreground window).(this will
            always be present)
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - foreground
      title: WorkstreamPatternEngineVisionCalibration
      type: object
    WorkstreamPatternEngineVisionCalibrations:
      description: 'TODO: description

        This the plural of a single copilot Capture.


        This will return all the the given copilot captures'
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/WorkstreamPatternEngineVisionCalibration'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: WorkstreamPatternEngineVisionCalibrations
      type: object
    WorkstreamPatternEngineVisionEvent:
      description: 'This will return a specific event for the WPE.


        note: value is nullable here because we may want to pass in transferables:true/false'
      properties:
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        id:
          type: string
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        source:
          $ref: '#/components/schemas/WorkstreamPatternEngineSource'
        textual:
          $ref: '#/components/schemas/WorkstreamPatternEngineVisionEventTextualValue'
      required:
      - id
      - created
      title: WorkstreamPatternEngineVisionEvent
      type: object
    WorkstreamPatternEngineVisionEventDeletions:
      description: 'note: recomended to use the search option here(where you can pass
        in workstream.

        note: "scope" here will run a search with the given scope and then remove
        these events.'
      properties:
        identifiers:
          $ref: '#/components/schemas/FlattenedWorkstreamPatternEngineVisionEvents'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        search_scope:
          $ref: '#/components/schemas/SearchInput'
      title: WorkstreamPatternEngineVisionEventDeletions
      type: object
    WorkstreamPatternEngineVisionEventTextualValue:
      description: 'note: we could add a summarize property.

        TODO: might need an extracted bool to say to aggregate the extracted'
      properties:
        extracted:
          $ref: '#/components/schemas/TextuallyExtractedMaterial'
        ocr:
          $ref: '#/components/schemas/TransferableString'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: WorkstreamPatternEngineVisionEventTextualValue
      type: object
    WorkstreamPatternEngineVisionEvents:
      description: This is a plural snapshot of all of the events within WPE qdrant
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/WorkstreamPatternEngineVisionEvent'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      required:
      - iterable
      title: WorkstreamPatternEngineVisionEvents
      type: object
    WorkstreamPatternEngineVisionEventsMetadata:
      description: This is specific model that will return the size of the WPE in
        bytes
      properties:
        bytes:
          $ref: '#/components/schemas/ByteDescriptor'
        newest:
          $ref: '#/components/schemas/WorkstreamPatternEngineVisionEvent'
        oldest:
          $ref: '#/components/schemas/WorkstreamPatternEngineVisionEvent'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        total:
          description: This is the total number of events.
          type: integer
      required:
      - bytes
      - total
      title: WorkstreamPatternEngineVisionEventsMetadata
      type: object
    WorkstreamPatternEngineVisionMetadata:
      description: This will return all the WPE vision specific metadata
      properties:
        events:
          $ref: '#/components/schemas/WorkstreamPatternEngineVisionEventsMetadata'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: WorkstreamPatternEngineVisionMetadata
      type: object
    WorkstreamPatternEngineVisionStatus:
      description: 'activation: can be active for forever w/ continous true, or it
        can be activated for the next couple hours


        deactivation: here can be deactivated for forever w/ continuous true, or it
        can be deactivated for the next couple hours


        Note: one or the other will be set and both are nullable.'
      properties:
        activation:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        deactivation:
          $ref: '#/components/schemas/AnonymousTemporalRange'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
      title: WorkstreamPatternEngineVisionStatus
      type: object
    WorkstreamSearchOptions:
      description: 'This is a search realted to the workstream pattern engine data,

        for instance in a WPE/vision/search we will want to be able to search via
        a WorkstreamPatternEngineSource.'
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        sources:
          $ref: '#/components/schemas/WorkstreamPatternEngineSources'
      title: WorkstreamSearchOptions
      type: object
    WorkstreamSuggestion:
      description: "This is an individual material that is apart of the workstream\
        \ feed.\nmight want to also consider plural uuids ie top websites/tags/and\
        \ others..\n\nrelated: this is an optional field that will only be calculated\
        \ for first degree relationships.\n         ie. an anchor may have related.iterable.first.persons\
        \ that are not associated but related.\n         via the workstream patturn\
        \ engine.\n\ncurrent: if current is defined then this is the current viewed\
        \ object"
      properties:
        anchor:
          $ref: '#/components/schemas/ReferencedAnchor'
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        asset:
          $ref: '#/components/schemas/ReferencedAsset'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversation:
          $ref: '#/components/schemas/ReferencedConversation'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        current:
          $ref: '#/components/schemas/WorkstreamSuggestion'
        person:
          $ref: '#/components/schemas/ReferencedPerson'
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        related:
          $ref: '#/components/schemas/WorkstreamSuggestions'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        seed:
          $ref: '#/components/schemas/Seed'
        seeds:
          $ref: '#/components/schemas/Seeds'
        summaries:
          $ref: '#/components/schemas/FlattenedWorkstreamSummaries'
        summary:
          $ref: '#/components/schemas/ReferencedWorkstreamSummary'
        tag:
          $ref: '#/components/schemas/ReferencedTag'
        tags:
          $ref: '#/components/schemas/FlattenedTags'
        website:
          $ref: '#/components/schemas/ReferencedWebsite'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      title: WorkstreamSuggestion
      type: object
    WorkstreamSuggestionType:
      description: This is used to map the types of the iterable to given booleans
        of their respective material types
      properties:
        anchor:
          type: boolean
        anchors:
          type: boolean
        asset:
          type: boolean
        assets:
          type: boolean
        conversation:
          type: boolean
        conversations:
          type: boolean
        person:
          type: boolean
        persons:
          type: boolean
        schema:
          type: boolean
        seed:
          type: boolean
        seeds:
          type: boolean
        summaries:
          type: boolean
        summary:
          type: boolean
        tag:
          type: boolean
        tags:
          type: boolean
        website:
          type: boolean
        websites:
          type: boolean
      title: WorkstreamSuggestionType
      type: object
    WorkstreamSuggestions:
      description: 'This is a list of the materials used in the workstream suggestions.


        The feed will return a list of individual material that will be required to
        be fetched and re-referenced.(the materials that is.)


        Considering if we want to have all the materaials just being referenced( ie
        ReferencedWebsite/ReferencedWorkstreamSummary/...xyz) && rebuilt'
      properties:
        iterable:
          items:
            $ref: '#/components/schemas/WorkstreamSuggestion'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        types:
          description: 'This is iterable <WorkstreamSuggestionType>[] that gives the
            type of each of the items in the iterable.

            I.E. types[0] is the suggestion type of the item at iterable[0].'
          items:
            $ref: '#/components/schemas/WorkstreamSuggestionType'
          type: array
      required:
      - iterable
      title: WorkstreamSuggestions
      type: object
    WorkstreamSuggestionsRefresh:
      description: This will return the new refreshed suggestions, about what data
        changed, and the data that was used to bias the suggestions.
      properties:
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        suggestions:
          $ref: '#/components/schemas/WorkstreamSuggestions'
      required:
      - suggestions
      title: WorkstreamSuggestionsRefresh
      type: object
    WorkstreamSummaries:
      description: This is a collection of many WorkstreamSummary
      properties:
        indices:
          additionalProperties:
            type: integer
          description: This is a Map<String, int> where the the key is an summary
            id.
          type: object
        iterable:
          items:
            $ref: '#/components/schemas/WorkstreamSummary'
          type: array
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
      required:
      - iterable
      title: WorkstreamSummaries
      type: object
      x-stoplight:
        id: 6x6tiv80fzx7z
    WorkstreamSummary:
      description: This is representation or a summarized version of the highly relevant
        WorkstreamEvent events from a given time period, 1 day, 1 week, 1 month, dependinng
        on your given flow.
      properties:
        anchors:
          $ref: '#/components/schemas/FlattenedAnchors'
        annotations:
          $ref: '#/components/schemas/FlattenedAnnotations'
        applications:
          $ref: '#/components/schemas/Applications'
        assets:
          $ref: '#/components/schemas/FlattenedAssets'
        conversations:
          $ref: '#/components/schemas/FlattenedConversations'
        created:
          $ref: '#/components/schemas/GroupedTimestamp'
        events:
          $ref: '#/components/schemas/FlattenedWorkstreamEvents'
        id:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
        persons:
          $ref: '#/components/schemas/FlattenedPersons'
        ranges:
          $ref: '#/components/schemas/FlattenedRanges'
        schema:
          $ref: '#/components/schemas/EmbeddedModelSchema'
        score:
          $ref: '#/components/schemas/Score'
        updated:
          $ref: '#/components/schemas/GroupedTimestamp'
        websites:
          $ref: '#/components/schemas/FlattenedWebsites'
      required:
      - id
      - created
      - updated
      - name
      - range
      - model
      title: WorkstreamSummary
      type: object
      x-stoplight:
        id: 89sodddjqbtk4
  securitySchemes:
    auth0:
      flows:
        authorizationCode:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
          tokenUrl: ''
        clientCredentials:
          refreshUrl: ''
          scopes: {}
          tokenUrl: ''
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
      type: oauth2
    authorization:
      flows:
        authorizationCode:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
          tokenUrl: ''
        clientCredentials:
          refreshUrl: ''
          scopes: {}
          tokenUrl: ''
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
      type: oauth2
info:
  description: ' '
  title: Runtime Common Library
  version: '1.0'
openapi: 3.0.2
paths: {}
servers:
- description: Local Pieces OS Server for macOS & Windows
  url: http://localhost:1000
- description: Local Pieces OS Server for Linux
  url: http://localhost:5323
tags:
- name: Runtime
